// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module bias512 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_V_V_dout,
        in_V_V_empty_n,
        in_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] in_V_V_dout;
input   in_V_V_empty_n;
output   in_V_V_read;
output  [15:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_V_V_read;
reg out_V_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln58_fu_165_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state3_pp0_stage0_iter3;
reg    ap_enable_reg_pp0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [1:0] Conv_0_biases_V_2_address0;
reg    Conv_0_biases_V_2_ce0;
wire   [23:0] Conv_0_biases_V_2_q0;
reg    in_V_V_blk_n;
wire    ap_block_pp0_stage0;
reg    out_V_V_blk_n;
reg   [11:0] i_06_reg_120;
reg   [1:0] loops_0_05_reg_134;
wire   [11:0] i_fu_153_p2;
reg   [11:0] i_reg_221;
wire   [1:0] add_ln321_fu_159_p2;
reg   [1:0] add_ln321_reg_226;
reg   [0:0] icmp_ln58_reg_231;
reg   [0:0] icmp_ln58_reg_231_pp0_iter1_reg;
reg   [0:0] icmp_ln58_reg_231_pp0_iter2_reg;
reg   [15:0] tmp_V_752_reg_235;
reg  signed [23:0] p_Val2_119_reg_240;
reg   [0:0] tmp_400_reg_245;
reg   [0:0] tmp_400_reg_245_pp0_iter2_reg;
reg   [15:0] p_Val2_121_reg_250;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg   [11:0] ap_phi_mux_i_06_phi_fu_124_p6;
reg   [1:0] ap_phi_mux_loops_0_05_phi_fu_138_p6;
wire   [63:0] zext_ln61_fu_148_p1;
reg    ap_block_pp0_stage0_01001;
wire   [15:0] zext_ln415_fu_171_p1;
wire  signed [23:0] tmp_400_fu_182_p1;
wire  signed [32:0] sext_ln703_fu_197_p1;
wire   [32:0] lhs_V_fu_190_p3;
wire   [32:0] ret_V_fu_200_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_72;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

bias512_Conv_0_bibml #(
    .DataWidth( 24 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
Conv_0_biases_V_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Conv_0_biases_V_2_address0),
    .ce0(Conv_0_biases_V_2_ce0),
    .q0(Conv_0_biases_V_2_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_06_reg_120 <= i_reg_221;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_231 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_06_reg_120 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_reg_231 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        loops_0_05_reg_134 <= add_ln321_reg_226;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_231 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        loops_0_05_reg_134 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln321_reg_226 <= add_ln321_fu_159_p2;
        i_reg_221 <= i_fu_153_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln58_reg_231 <= icmp_ln58_fu_165_p2;
        icmp_ln58_reg_231_pp0_iter1_reg <= icmp_ln58_reg_231;
        p_Val2_119_reg_240 <= Conv_0_biases_V_2_q0;
        tmp_400_reg_245 <= tmp_400_fu_182_p1[32'd16];
        tmp_V_752_reg_235 <= in_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln58_reg_231_pp0_iter2_reg <= icmp_ln58_reg_231_pp0_iter1_reg;
        p_Val2_121_reg_250 <= {{ret_V_fu_200_p2[32:17]}};
        tmp_400_reg_245_pp0_iter2_reg <= tmp_400_reg_245;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Conv_0_biases_V_2_ce0 = 1'b1;
    end else begin
        Conv_0_biases_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_231_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln58_reg_231 == 1'd1)) begin
            ap_phi_mux_i_06_phi_fu_124_p6 = 12'd0;
        end else if ((icmp_ln58_reg_231 == 1'd0)) begin
            ap_phi_mux_i_06_phi_fu_124_p6 = i_reg_221;
        end else begin
            ap_phi_mux_i_06_phi_fu_124_p6 = i_06_reg_120;
        end
    end else begin
        ap_phi_mux_i_06_phi_fu_124_p6 = i_06_reg_120;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_72)) begin
        if ((icmp_ln58_reg_231 == 1'd1)) begin
            ap_phi_mux_loops_0_05_phi_fu_138_p6 = 2'd0;
        end else if ((icmp_ln58_reg_231 == 1'd0)) begin
            ap_phi_mux_loops_0_05_phi_fu_138_p6 = add_ln321_reg_226;
        end else begin
            ap_phi_mux_loops_0_05_phi_fu_138_p6 = loops_0_05_reg_134;
        end
    end else begin
        ap_phi_mux_loops_0_05_phi_fu_138_p6 = loops_0_05_reg_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_fu_165_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_blk_n = in_V_V_empty_n;
    end else begin
        in_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_V_V_read = 1'b1;
    end else begin
        in_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Conv_0_biases_V_2_address0 = zext_ln61_fu_148_p1;

assign add_ln321_fu_159_p2 = (ap_phi_mux_loops_0_05_phi_fu_138_p6 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((in_V_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter3 = (out_V_V_full_n == 1'b0);
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (in_V_V_empty_n == 1'b0);
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_72 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign i_fu_153_p2 = (ap_phi_mux_i_06_phi_fu_124_p6 + 12'd1);

assign icmp_ln58_fu_165_p2 = ((ap_phi_mux_i_06_phi_fu_124_p6 == 12'd2303) ? 1'b1 : 1'b0);

assign lhs_V_fu_190_p3 = {{tmp_V_752_reg_235}, {17'd0}};

assign out_V_V_din = (zext_ln415_fu_171_p1 + p_Val2_121_reg_250);

assign ret_V_fu_200_p2 = ($signed(sext_ln703_fu_197_p1) + $signed(lhs_V_fu_190_p3));

assign sext_ln703_fu_197_p1 = p_Val2_119_reg_240;

assign tmp_400_fu_182_p1 = Conv_0_biases_V_2_q0;

assign zext_ln415_fu_171_p1 = tmp_400_reg_245_pp0_iter2_reg;

assign zext_ln61_fu_148_p1 = ap_phi_mux_loops_0_05_phi_fu_138_p6;

endmodule //bias512
