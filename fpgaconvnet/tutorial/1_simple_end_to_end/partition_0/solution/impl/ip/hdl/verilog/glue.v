// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module glue (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_0_V_V_dout,
        in_0_V_V_empty_n,
        in_0_V_V_read,
        in_1_V_V_dout,
        in_1_V_V_empty_n,
        in_1_V_V_read,
        in_2_V_V_dout,
        in_2_V_V_empty_n,
        in_2_V_V_read,
        in_3_V_V_dout,
        in_3_V_V_empty_n,
        in_3_V_V_read,
        out_0_V_V_din,
        out_0_V_V_full_n,
        out_0_V_V_write,
        out_1_V_V_din,
        out_1_V_V_full_n,
        out_1_V_V_write,
        out_2_V_V_din,
        out_2_V_V_full_n,
        out_2_V_V_write,
        out_3_V_V_din,
        out_3_V_V_full_n,
        out_3_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [29:0] in_0_V_V_dout;
input   in_0_V_V_empty_n;
output   in_0_V_V_read;
input  [29:0] in_1_V_V_dout;
input   in_1_V_V_empty_n;
output   in_1_V_V_read;
input  [29:0] in_2_V_V_dout;
input   in_2_V_V_empty_n;
output   in_2_V_V_read;
input  [29:0] in_3_V_V_dout;
input   in_3_V_V_empty_n;
output   in_3_V_V_read;
output  [15:0] out_0_V_V_din;
input   out_0_V_V_full_n;
output   out_0_V_V_write;
output  [15:0] out_1_V_V_din;
input   out_1_V_V_full_n;
output   out_1_V_V_write;
output  [15:0] out_2_V_V_din;
input   out_2_V_V_full_n;
output   out_2_V_V_write;
output  [15:0] out_3_V_V_din;
input   out_3_V_V_full_n;
output   out_3_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_0_V_V_read;
reg in_1_V_V_read;
reg in_2_V_V_read;
reg in_3_V_V_read;
reg out_0_V_V_write;
reg out_1_V_V_write;
reg out_2_V_V_write;
reg out_3_V_V_write;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln64_fu_230_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    in_0_V_V_blk_n;
wire    ap_block_pp0_stage0;
reg    in_1_V_V_blk_n;
reg    in_2_V_V_blk_n;
reg    in_3_V_V_blk_n;
reg    out_0_V_V_blk_n;
reg    out_1_V_V_blk_n;
reg    out_2_V_V_blk_n;
reg    out_3_V_V_blk_n;
reg   [11:0] pixel_index_01_reg_138;
reg   [12:0] trunc_ln_reg_306;
reg   [0:0] tmp_51_reg_311;
reg   [12:0] trunc_ln708_1_reg_316;
reg   [0:0] tmp_52_reg_321;
reg   [12:0] trunc_ln708_2_reg_326;
reg   [0:0] tmp_53_reg_331;
reg   [12:0] trunc_ln708_3_reg_336;
reg   [0:0] tmp_54_reg_341;
wire   [11:0] pixel_index_fu_224_p2;
reg   [11:0] pixel_index_reg_346;
reg   [0:0] icmp_ln64_reg_351;
reg    ap_block_pp0_stage0_subdone;
reg   [11:0] ap_phi_mux_pixel_index_01_phi_fu_142_p6;
reg    ap_block_pp0_stage0_01001;
wire   [13:0] zext_ln415_fu_239_p1;
wire  signed [13:0] sext_ln415_fu_236_p1;
wire   [13:0] tmp_V_144_fu_242_p2;
wire   [13:0] zext_ln415_1_fu_256_p1;
wire  signed [13:0] sext_ln415_2_fu_253_p1;
wire   [13:0] tmp_V_147_fu_259_p2;
wire   [13:0] zext_ln415_2_fu_273_p1;
wire  signed [13:0] sext_ln415_4_fu_270_p1;
wire   [13:0] tmp_V_150_fu_276_p2;
wire   [13:0] zext_ln415_3_fu_290_p1;
wire  signed [13:0] sext_ln415_6_fu_287_p1;
wire   [13:0] tmp_V_153_fu_293_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_102;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln64_reg_351 == 1'd0))) begin
        pixel_index_01_reg_138 <= pixel_index_reg_346;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_351 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        pixel_index_01_reg_138 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln64_reg_351 <= icmp_ln64_fu_230_p2;
        tmp_51_reg_311 <= in_0_V_V_dout[32'd16];
        tmp_52_reg_321 <= in_1_V_V_dout[32'd16];
        tmp_53_reg_331 <= in_2_V_V_dout[32'd16];
        tmp_54_reg_341 <= in_3_V_V_dout[32'd16];
        trunc_ln708_1_reg_316 <= {{in_1_V_V_dout[29:17]}};
        trunc_ln708_2_reg_326 <= {{in_2_V_V_dout[29:17]}};
        trunc_ln708_3_reg_336 <= {{in_3_V_V_dout[29:17]}};
        trunc_ln_reg_306 <= {{in_0_V_V_dout[29:17]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixel_index_reg_346 <= pixel_index_fu_224_p2;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_351 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_102)) begin
        if ((icmp_ln64_reg_351 == 1'd1)) begin
            ap_phi_mux_pixel_index_01_phi_fu_142_p6 = 12'd0;
        end else if ((icmp_ln64_reg_351 == 1'd0)) begin
            ap_phi_mux_pixel_index_01_phi_fu_142_p6 = pixel_index_reg_346;
        end else begin
            ap_phi_mux_pixel_index_01_phi_fu_142_p6 = pixel_index_01_reg_138;
        end
    end else begin
        ap_phi_mux_pixel_index_01_phi_fu_142_p6 = pixel_index_01_reg_138;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_fu_230_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_0_V_V_blk_n = in_0_V_V_empty_n;
    end else begin
        in_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_0_V_V_read = 1'b1;
    end else begin
        in_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_1_V_V_blk_n = in_1_V_V_empty_n;
    end else begin
        in_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_1_V_V_read = 1'b1;
    end else begin
        in_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_2_V_V_blk_n = in_2_V_V_empty_n;
    end else begin
        in_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_2_V_V_read = 1'b1;
    end else begin
        in_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_3_V_V_blk_n = in_3_V_V_empty_n;
    end else begin
        in_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_3_V_V_read = 1'b1;
    end else begin
        in_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_0_V_V_blk_n = out_0_V_V_full_n;
    end else begin
        out_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_0_V_V_write = 1'b1;
    end else begin
        out_0_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_1_V_V_blk_n = out_1_V_V_full_n;
    end else begin
        out_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_1_V_V_write = 1'b1;
    end else begin
        out_1_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_2_V_V_blk_n = out_2_V_V_full_n;
    end else begin
        out_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_2_V_V_write = 1'b1;
    end else begin
        out_2_V_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_3_V_V_blk_n = out_3_V_V_full_n;
    end else begin
        out_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_3_V_V_write = 1'b1;
    end else begin
        out_3_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_3_V_V_full_n == 1'b0) | (out_2_V_V_full_n == 1'b0) | (out_1_V_V_full_n == 1'b0) | (out_0_V_V_full_n == 1'b0))) | ((ap_start == 1'b1) & ((in_3_V_V_empty_n == 1'b0) | (in_2_V_V_empty_n == 1'b0) | (in_1_V_V_empty_n == 1'b0) | (in_0_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_3_V_V_full_n == 1'b0) | (out_2_V_V_full_n == 1'b0) | (out_1_V_V_full_n == 1'b0) | (out_0_V_V_full_n == 1'b0))) | ((ap_start == 1'b1) & ((in_3_V_V_empty_n == 1'b0) | (in_2_V_V_empty_n == 1'b0) | (in_1_V_V_empty_n == 1'b0) | (in_0_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((out_3_V_V_full_n == 1'b0) | (out_2_V_V_full_n == 1'b0) | (out_1_V_V_full_n == 1'b0) | (out_0_V_V_full_n == 1'b0))) | ((ap_start == 1'b1) & ((in_3_V_V_empty_n == 1'b0) | (in_2_V_V_empty_n == 1'b0) | (in_1_V_V_empty_n == 1'b0) | (in_0_V_V_empty_n == 1'b0))));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((in_3_V_V_empty_n == 1'b0) | (in_2_V_V_empty_n == 1'b0) | (in_1_V_V_empty_n == 1'b0) | (in_0_V_V_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((out_3_V_V_full_n == 1'b0) | (out_2_V_V_full_n == 1'b0) | (out_1_V_V_full_n == 1'b0) | (out_0_V_V_full_n == 1'b0));
end

always @ (*) begin
    ap_condition_102 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln64_fu_230_p2 = ((ap_phi_mux_pixel_index_01_phi_fu_142_p6 == 12'd2303) ? 1'b1 : 1'b0);

assign out_0_V_V_din = $signed(tmp_V_144_fu_242_p2);

assign out_1_V_V_din = $signed(tmp_V_147_fu_259_p2);

assign out_2_V_V_din = $signed(tmp_V_150_fu_276_p2);

assign out_3_V_V_din = $signed(tmp_V_153_fu_293_p2);

assign pixel_index_fu_224_p2 = (ap_phi_mux_pixel_index_01_phi_fu_142_p6 + 12'd1);

assign sext_ln415_2_fu_253_p1 = $signed(trunc_ln708_1_reg_316);

assign sext_ln415_4_fu_270_p1 = $signed(trunc_ln708_2_reg_326);

assign sext_ln415_6_fu_287_p1 = $signed(trunc_ln708_3_reg_336);

assign sext_ln415_fu_236_p1 = $signed(trunc_ln_reg_306);

assign tmp_V_144_fu_242_p2 = ($signed(zext_ln415_fu_239_p1) + $signed(sext_ln415_fu_236_p1));

assign tmp_V_147_fu_259_p2 = ($signed(zext_ln415_1_fu_256_p1) + $signed(sext_ln415_2_fu_253_p1));

assign tmp_V_150_fu_276_p2 = ($signed(zext_ln415_2_fu_273_p1) + $signed(sext_ln415_4_fu_270_p1));

assign tmp_V_153_fu_293_p2 = ($signed(zext_ln415_3_fu_290_p1) + $signed(sext_ln415_6_fu_287_p1));

assign zext_ln415_1_fu_256_p1 = tmp_52_reg_321;

assign zext_ln415_2_fu_273_p1 = tmp_53_reg_331;

assign zext_ln415_3_fu_290_p1 = tmp_54_reg_341;

assign zext_ln415_fu_239_p1 = tmp_51_reg_311;

endmodule //glue
