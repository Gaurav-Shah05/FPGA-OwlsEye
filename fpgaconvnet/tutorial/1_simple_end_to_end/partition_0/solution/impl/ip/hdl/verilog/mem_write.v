// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mem_write (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        weights_reloading_in_3_dout,
        weights_reloading_in_3_empty_n,
        weights_reloading_in_3_read,
        out_0_V_V_dout,
        out_0_V_V_empty_n,
        out_0_V_V_read,
        out_1_V_V_dout,
        out_1_V_V_empty_n,
        out_1_V_V_read,
        out_2_V_V_dout,
        out_2_V_V_empty_n,
        out_2_V_V_read,
        out_3_V_V_dout,
        out_3_V_V_empty_n,
        out_3_V_V_read,
        m_axi_out_hw_V_AWVALID,
        m_axi_out_hw_V_AWREADY,
        m_axi_out_hw_V_AWADDR,
        m_axi_out_hw_V_AWID,
        m_axi_out_hw_V_AWLEN,
        m_axi_out_hw_V_AWSIZE,
        m_axi_out_hw_V_AWBURST,
        m_axi_out_hw_V_AWLOCK,
        m_axi_out_hw_V_AWCACHE,
        m_axi_out_hw_V_AWPROT,
        m_axi_out_hw_V_AWQOS,
        m_axi_out_hw_V_AWREGION,
        m_axi_out_hw_V_AWUSER,
        m_axi_out_hw_V_WVALID,
        m_axi_out_hw_V_WREADY,
        m_axi_out_hw_V_WDATA,
        m_axi_out_hw_V_WSTRB,
        m_axi_out_hw_V_WLAST,
        m_axi_out_hw_V_WID,
        m_axi_out_hw_V_WUSER,
        m_axi_out_hw_V_ARVALID,
        m_axi_out_hw_V_ARREADY,
        m_axi_out_hw_V_ARADDR,
        m_axi_out_hw_V_ARID,
        m_axi_out_hw_V_ARLEN,
        m_axi_out_hw_V_ARSIZE,
        m_axi_out_hw_V_ARBURST,
        m_axi_out_hw_V_ARLOCK,
        m_axi_out_hw_V_ARCACHE,
        m_axi_out_hw_V_ARPROT,
        m_axi_out_hw_V_ARQOS,
        m_axi_out_hw_V_ARREGION,
        m_axi_out_hw_V_ARUSER,
        m_axi_out_hw_V_RVALID,
        m_axi_out_hw_V_RREADY,
        m_axi_out_hw_V_RDATA,
        m_axi_out_hw_V_RLAST,
        m_axi_out_hw_V_RID,
        m_axi_out_hw_V_RUSER,
        m_axi_out_hw_V_RRESP,
        m_axi_out_hw_V_BVALID,
        m_axi_out_hw_V_BREADY,
        m_axi_out_hw_V_BRESP,
        m_axi_out_hw_V_BID,
        m_axi_out_hw_V_BUSER,
        out_hw_V_offset_dout,
        out_hw_V_offset_empty_n,
        out_hw_V_offset_read
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] weights_reloading_in_3_dout;
input   weights_reloading_in_3_empty_n;
output   weights_reloading_in_3_read;
input  [15:0] out_0_V_V_dout;
input   out_0_V_V_empty_n;
output   out_0_V_V_read;
input  [15:0] out_1_V_V_dout;
input   out_1_V_V_empty_n;
output   out_1_V_V_read;
input  [15:0] out_2_V_V_dout;
input   out_2_V_V_empty_n;
output   out_2_V_V_read;
input  [15:0] out_3_V_V_dout;
input   out_3_V_V_empty_n;
output   out_3_V_V_read;
output   m_axi_out_hw_V_AWVALID;
input   m_axi_out_hw_V_AWREADY;
output  [31:0] m_axi_out_hw_V_AWADDR;
output  [0:0] m_axi_out_hw_V_AWID;
output  [31:0] m_axi_out_hw_V_AWLEN;
output  [2:0] m_axi_out_hw_V_AWSIZE;
output  [1:0] m_axi_out_hw_V_AWBURST;
output  [1:0] m_axi_out_hw_V_AWLOCK;
output  [3:0] m_axi_out_hw_V_AWCACHE;
output  [2:0] m_axi_out_hw_V_AWPROT;
output  [3:0] m_axi_out_hw_V_AWQOS;
output  [3:0] m_axi_out_hw_V_AWREGION;
output  [0:0] m_axi_out_hw_V_AWUSER;
output   m_axi_out_hw_V_WVALID;
input   m_axi_out_hw_V_WREADY;
output  [63:0] m_axi_out_hw_V_WDATA;
output  [7:0] m_axi_out_hw_V_WSTRB;
output   m_axi_out_hw_V_WLAST;
output  [0:0] m_axi_out_hw_V_WID;
output  [0:0] m_axi_out_hw_V_WUSER;
output   m_axi_out_hw_V_ARVALID;
input   m_axi_out_hw_V_ARREADY;
output  [31:0] m_axi_out_hw_V_ARADDR;
output  [0:0] m_axi_out_hw_V_ARID;
output  [31:0] m_axi_out_hw_V_ARLEN;
output  [2:0] m_axi_out_hw_V_ARSIZE;
output  [1:0] m_axi_out_hw_V_ARBURST;
output  [1:0] m_axi_out_hw_V_ARLOCK;
output  [3:0] m_axi_out_hw_V_ARCACHE;
output  [2:0] m_axi_out_hw_V_ARPROT;
output  [3:0] m_axi_out_hw_V_ARQOS;
output  [3:0] m_axi_out_hw_V_ARREGION;
output  [0:0] m_axi_out_hw_V_ARUSER;
input   m_axi_out_hw_V_RVALID;
output   m_axi_out_hw_V_RREADY;
input  [63:0] m_axi_out_hw_V_RDATA;
input   m_axi_out_hw_V_RLAST;
input  [0:0] m_axi_out_hw_V_RID;
input  [0:0] m_axi_out_hw_V_RUSER;
input  [1:0] m_axi_out_hw_V_RRESP;
input   m_axi_out_hw_V_BVALID;
output   m_axi_out_hw_V_BREADY;
input  [1:0] m_axi_out_hw_V_BRESP;
input  [0:0] m_axi_out_hw_V_BID;
input  [0:0] m_axi_out_hw_V_BUSER;
input  [28:0] out_hw_V_offset_dout;
input   out_hw_V_offset_empty_n;
output   out_hw_V_offset_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weights_reloading_in_3_read;
reg out_0_V_V_read;
reg out_1_V_V_read;
reg out_2_V_V_read;
reg out_3_V_V_read;
reg m_axi_out_hw_V_AWVALID;
reg m_axi_out_hw_V_WVALID;
reg m_axi_out_hw_V_BREADY;
reg out_hw_V_offset_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    weights_reloading_in_3_blk_n;
reg    out_0_V_V_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln68_reg_311;
reg   [0:0] icmp_ln68_reg_311_pp0_iter1_reg;
reg    out_1_V_V_blk_n;
reg    out_2_V_V_blk_n;
reg    out_3_V_V_blk_n;
reg    out_hw_V_blk_n_AW;
reg    out_hw_V_blk_n_W;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln68_reg_311_pp0_iter2_reg;
reg    out_hw_V_blk_n_B;
reg    ap_enable_reg_pp0_iter8;
reg   [0:0] icmp_ln68_reg_311_pp0_iter7_reg;
reg    out_hw_V_offset_blk_n;
reg   [9:0] loops_1_0_i_i_i_reg_154;
reg   [1:0] loops_0_0_i_i_i_reg_165;
reg   [11:0] i_0_i_i_i_reg_176;
wire   [29:0] empty_fu_187_p1;
reg   [29:0] empty_reg_301;
reg    ap_block_state1;
wire   [32:0] zext_ln68_fu_191_p1;
reg   [32:0] zext_ln68_reg_306;
wire   [0:0] icmp_ln68_fu_195_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
reg    ap_block_state10_pp0_stage0_iter8;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln68_reg_311_pp0_iter3_reg;
reg   [0:0] icmp_ln68_reg_311_pp0_iter4_reg;
reg   [0:0] icmp_ln68_reg_311_pp0_iter5_reg;
reg   [0:0] icmp_ln68_reg_311_pp0_iter6_reg;
wire   [1:0] loops_impl_next_i_s_fu_201_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] out_index_fu_216_p3;
reg   [31:0] out_index_reg_320;
wire   [11:0] i_fu_224_p2;
wire   [9:0] select_ln891_fu_256_p3;
wire   [32:0] add_ln332_fu_267_p2;
reg   [32:0] add_ln332_reg_335;
reg   [15:0] tmp_V_reg_340;
reg   [15:0] tmp_V_141_reg_345;
reg   [15:0] tmp_V_142_reg_350;
reg   [15:0] tmp_V_143_reg_355;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
wire  signed [63:0] sext_ln332_fu_272_p1;
reg    ap_block_pp0_stage0_01001;
wire   [29:0] empty_221_fu_207_p1;
wire   [29:0] tmp4_i_i_i_fu_211_p2;
wire   [0:0] icmp_ln891_4_fu_236_p2;
wire   [9:0] loops_impl_i_V_fu_242_p2;
wire   [0:0] icmp_ln891_fu_230_p2;
wire   [9:0] select_ln206_fu_248_p3;
wire  signed [32:0] sext_ln87_fu_264_p1;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_195_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_i_i_i_reg_176 <= i_fu_224_p2;
    end else if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_i_i_reg_176 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_195_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loops_0_0_i_i_i_reg_165 <= loops_impl_next_i_s_fu_201_p2;
    end else if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        loops_0_0_i_i_i_reg_165 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_195_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        loops_1_0_i_i_i_reg_154 <= select_ln891_fu_256_p3;
    end else if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        loops_1_0_i_i_i_reg_154 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_311 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln332_reg_335 <= add_ln332_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_301 <= empty_fu_187_p1;
        zext_ln68_reg_306[28 : 0] <= zext_ln68_fu_191_p1[28 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln68_reg_311 <= icmp_ln68_fu_195_p2;
        icmp_ln68_reg_311_pp0_iter1_reg <= icmp_ln68_reg_311;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln68_reg_311_pp0_iter2_reg <= icmp_ln68_reg_311_pp0_iter1_reg;
        icmp_ln68_reg_311_pp0_iter3_reg <= icmp_ln68_reg_311_pp0_iter2_reg;
        icmp_ln68_reg_311_pp0_iter4_reg <= icmp_ln68_reg_311_pp0_iter3_reg;
        icmp_ln68_reg_311_pp0_iter5_reg <= icmp_ln68_reg_311_pp0_iter4_reg;
        icmp_ln68_reg_311_pp0_iter6_reg <= icmp_ln68_reg_311_pp0_iter5_reg;
        icmp_ln68_reg_311_pp0_iter7_reg <= icmp_ln68_reg_311_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_index_reg_320 <= out_index_fu_216_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_V_141_reg_345 <= out_1_V_V_dout;
        tmp_V_142_reg_350 <= out_2_V_V_dout;
        tmp_V_143_reg_355 <= out_3_V_V_dout;
        tmp_V_reg_340 <= out_0_V_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln68_fu_195_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_out_hw_V_AWVALID = 1'b1;
    end else begin
        m_axi_out_hw_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_out_hw_V_BREADY = 1'b1;
    end else begin
        m_axi_out_hw_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_out_hw_V_WVALID = 1'b1;
    end else begin
        m_axi_out_hw_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_0_V_V_blk_n = out_0_V_V_empty_n;
    end else begin
        out_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_0_V_V_read = 1'b1;
    end else begin
        out_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_1_V_V_blk_n = out_1_V_V_empty_n;
    end else begin
        out_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_1_V_V_read = 1'b1;
    end else begin
        out_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_2_V_V_blk_n = out_2_V_V_empty_n;
    end else begin
        out_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_2_V_V_read = 1'b1;
    end else begin
        out_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_3_V_V_blk_n = out_3_V_V_empty_n;
    end else begin
        out_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_3_V_V_read = 1'b1;
    end else begin
        out_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_hw_V_blk_n_AW = m_axi_out_hw_V_AWREADY;
    end else begin
        out_hw_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter7_reg == 1'd0) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_hw_V_blk_n_B = m_axi_out_hw_V_BVALID;
    end else begin
        out_hw_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln68_reg_311_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        out_hw_V_blk_n_W = m_axi_out_hw_V_WREADY;
    end else begin
        out_hw_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_hw_V_offset_blk_n = out_hw_V_offset_empty_n;
    end else begin
        out_hw_V_offset_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        out_hw_V_offset_read = 1'b1;
    end else begin
        out_hw_V_offset_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_reloading_in_3_blk_n = weights_reloading_in_3_empty_n;
    end else begin
        weights_reloading_in_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        weights_reloading_in_3_read = 1'b1;
    end else begin
        weights_reloading_in_3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln68_fu_195_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln68_fu_195_p2 == 1'd1)) | ((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln332_fu_267_p2 = ($signed(zext_ln68_reg_306) + $signed(sext_ln87_fu_264_p1));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((icmp_ln68_reg_311_pp0_iter7_reg == 1'd0) & (m_axi_out_hw_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_3_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_2_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_1_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_0_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((icmp_ln68_reg_311_pp0_iter7_reg == 1'd0) & (m_axi_out_hw_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_3_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_2_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_1_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_0_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((icmp_ln68_reg_311_pp0_iter7_reg == 1'd0) & (m_axi_out_hw_V_BVALID == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & ((1'b1 == ap_block_state4_io) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_3_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_2_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_1_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_0_V_V_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (weights_reloading_in_3_empty_n == 1'b0) | (out_hw_V_offset_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter8 = ((icmp_ln68_reg_311_pp0_iter7_reg == 1'd0) & (m_axi_out_hw_V_BVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (m_axi_out_hw_V_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter2 = (((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_3_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_2_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_1_V_V_empty_n == 1'b0)) | ((icmp_ln68_reg_311_pp0_iter1_reg == 1'd0) & (out_0_V_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state5_io = ((icmp_ln68_reg_311_pp0_iter2_reg == 1'd0) & (m_axi_out_hw_V_WREADY == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign empty_221_fu_207_p1 = loops_1_0_i_i_i_reg_154;

assign empty_fu_187_p1 = weights_reloading_in_3_dout[29:0];

assign i_fu_224_p2 = (i_0_i_i_i_reg_176 + 12'd1);

assign icmp_ln68_fu_195_p2 = ((i_0_i_i_i_reg_176 == 12'd2304) ? 1'b1 : 1'b0);

assign icmp_ln891_4_fu_236_p2 = ((loops_1_0_i_i_i_reg_154 > 10'd574) ? 1'b1 : 1'b0);

assign icmp_ln891_fu_230_p2 = ((loops_0_0_i_i_i_reg_165 == 2'd3) ? 1'b1 : 1'b0);

assign loops_impl_i_V_fu_242_p2 = (loops_1_0_i_i_i_reg_154 + 10'd1);

assign loops_impl_next_i_s_fu_201_p2 = (loops_0_0_i_i_i_reg_165 + 2'd1);

assign m_axi_out_hw_V_ARADDR = 32'd0;

assign m_axi_out_hw_V_ARBURST = 2'd0;

assign m_axi_out_hw_V_ARCACHE = 4'd0;

assign m_axi_out_hw_V_ARID = 1'd0;

assign m_axi_out_hw_V_ARLEN = 32'd0;

assign m_axi_out_hw_V_ARLOCK = 2'd0;

assign m_axi_out_hw_V_ARPROT = 3'd0;

assign m_axi_out_hw_V_ARQOS = 4'd0;

assign m_axi_out_hw_V_ARREGION = 4'd0;

assign m_axi_out_hw_V_ARSIZE = 3'd0;

assign m_axi_out_hw_V_ARUSER = 1'd0;

assign m_axi_out_hw_V_ARVALID = 1'b0;

assign m_axi_out_hw_V_AWADDR = sext_ln332_fu_272_p1;

assign m_axi_out_hw_V_AWBURST = 2'd0;

assign m_axi_out_hw_V_AWCACHE = 4'd0;

assign m_axi_out_hw_V_AWID = 1'd0;

assign m_axi_out_hw_V_AWLEN = 32'd1;

assign m_axi_out_hw_V_AWLOCK = 2'd0;

assign m_axi_out_hw_V_AWPROT = 3'd0;

assign m_axi_out_hw_V_AWQOS = 4'd0;

assign m_axi_out_hw_V_AWREGION = 4'd0;

assign m_axi_out_hw_V_AWSIZE = 3'd0;

assign m_axi_out_hw_V_AWUSER = 1'd0;

assign m_axi_out_hw_V_RREADY = 1'b0;

assign m_axi_out_hw_V_WDATA = {{{{tmp_V_143_reg_355}, {tmp_V_142_reg_350}}, {tmp_V_141_reg_345}}, {tmp_V_reg_340}};

assign m_axi_out_hw_V_WID = 1'd0;

assign m_axi_out_hw_V_WLAST = 1'b0;

assign m_axi_out_hw_V_WSTRB = 8'd255;

assign m_axi_out_hw_V_WUSER = 1'd0;

assign out_index_fu_216_p3 = {{tmp4_i_i_i_fu_211_p2}, {loops_0_0_i_i_i_reg_165}};

assign select_ln206_fu_248_p3 = ((icmp_ln891_4_fu_236_p2[0:0] === 1'b1) ? 10'd0 : loops_impl_i_V_fu_242_p2);

assign select_ln891_fu_256_p3 = ((icmp_ln891_fu_230_p2[0:0] === 1'b1) ? select_ln206_fu_248_p3 : loops_1_0_i_i_i_reg_154);

assign sext_ln332_fu_272_p1 = $signed(add_ln332_reg_335);

assign sext_ln87_fu_264_p1 = $signed(out_index_reg_320);

assign tmp4_i_i_i_fu_211_p2 = (empty_221_fu_207_p1 + empty_reg_301);

assign zext_ln68_fu_191_p1 = out_hw_V_offset_dout;

always @ (posedge ap_clk) begin
    zext_ln68_reg_306[32:29] <= 4'b0000;
end

endmodule //mem_write
