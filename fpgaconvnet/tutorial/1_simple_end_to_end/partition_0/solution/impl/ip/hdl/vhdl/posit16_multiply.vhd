-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity posit16_multiply is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_ui : IN STD_LOGIC_VECTOR (15 downto 0);
    b_ui : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of posit16_multiply is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_posit16_to_double_fu_56_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal da_reg_135 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_posit16_to_double_fu_56_ap_ready : STD_LOGIC;
    signal grp_posit16_to_double_fu_56_ap_done : STD_LOGIC;
    signal grp_posit16_to_double_fu_86_ap_ready : STD_LOGIC;
    signal grp_posit16_to_double_fu_86_ap_done : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal grp_posit16_to_double_fu_86_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal db_reg_140 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal prod_reg_145 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_posit16_to_double_fu_56_ap_start : STD_LOGIC;
    signal grp_posit16_to_double_fu_56_ap_idle : STD_LOGIC;
    signal grp_posit16_to_double_fu_86_ap_start : STD_LOGIC;
    signal grp_posit16_to_double_fu_86_ap_idle : STD_LOGIC;
    signal grp_double_to_posit16_fu_116_ap_start : STD_LOGIC;
    signal grp_double_to_posit16_fu_116_ap_done : STD_LOGIC;
    signal grp_double_to_posit16_fu_116_ap_idle : STD_LOGIC;
    signal grp_double_to_posit16_fu_116_ap_ready : STD_LOGIC;
    signal grp_double_to_posit16_fu_116_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_posit16_to_double_fu_56_ap_start_reg : STD_LOGIC := '0';
    signal grp_posit16_to_double_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal grp_double_to_posit16_fu_116_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component posit16_to_double IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ui : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component double_to_posit16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        f : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fpgaconvnet_ip_dmeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_posit16_to_double_fu_56 : component posit16_to_double
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_posit16_to_double_fu_56_ap_start,
        ap_done => grp_posit16_to_double_fu_56_ap_done,
        ap_idle => grp_posit16_to_double_fu_56_ap_idle,
        ap_ready => grp_posit16_to_double_fu_56_ap_ready,
        ui => a_ui,
        ap_return => grp_posit16_to_double_fu_56_ap_return);

    grp_posit16_to_double_fu_86 : component posit16_to_double
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_posit16_to_double_fu_86_ap_start,
        ap_done => grp_posit16_to_double_fu_86_ap_done,
        ap_idle => grp_posit16_to_double_fu_86_ap_idle,
        ap_ready => grp_posit16_to_double_fu_86_ap_ready,
        ui => b_ui,
        ap_return => grp_posit16_to_double_fu_86_ap_return);

    grp_double_to_posit16_fu_116 : component double_to_posit16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_double_to_posit16_fu_116_ap_start,
        ap_done => grp_double_to_posit16_fu_116_ap_done,
        ap_idle => grp_double_to_posit16_fu_116_ap_idle,
        ap_ready => grp_double_to_posit16_fu_116_ap_ready,
        f => prod_reg_145,
        ap_return => grp_double_to_posit16_fu_116_ap_return);

    fpgaconvnet_ip_dmeOg_U858 : component fpgaconvnet_ip_dmeOg
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => da_reg_135,
        din1 => db_reg_140,
        ce => ap_const_logic_1,
        dout => grp_fu_121_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if (((grp_double_to_posit16_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    ap_return_preg <= grp_double_to_posit16_fu_116_ap_return;
                end if; 
            end if;
        end if;
    end process;


    grp_double_to_posit16_fu_116_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_double_to_posit16_fu_116_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_double_to_posit16_fu_116_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_double_to_posit16_fu_116_ap_ready = ap_const_logic_1)) then 
                    grp_double_to_posit16_fu_116_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_posit16_to_double_fu_56_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_posit16_to_double_fu_56_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_posit16_to_double_fu_56_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_posit16_to_double_fu_56_ap_ready = ap_const_logic_1)) then 
                    grp_posit16_to_double_fu_56_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_posit16_to_double_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_posit16_to_double_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_posit16_to_double_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_posit16_to_double_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_posit16_to_double_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                da_reg_135 <= grp_posit16_to_double_fu_56_ap_return;
                db_reg_140 <= grp_posit16_to_double_fu_86_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                prod_reg_145 <= grp_fu_121_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_block_state2_on_subcall_done, grp_double_to_posit16_fu_116_ap_done, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_double_to_posit16_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_on_subcall_done_assign_proc : process(grp_posit16_to_double_fu_56_ap_done, grp_posit16_to_double_fu_86_ap_done)
    begin
                ap_block_state2_on_subcall_done <= ((grp_posit16_to_double_fu_86_ap_done = ap_const_logic_0) or (grp_posit16_to_double_fu_56_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_double_to_posit16_fu_116_ap_done, ap_CS_fsm_state14)
    begin
        if ((((grp_double_to_posit16_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_double_to_posit16_fu_116_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_double_to_posit16_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(grp_double_to_posit16_fu_116_ap_done, grp_double_to_posit16_fu_116_ap_return, ap_CS_fsm_state14, ap_return_preg)
    begin
        if (((grp_double_to_posit16_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_return <= grp_double_to_posit16_fu_116_ap_return;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    grp_double_to_posit16_fu_116_ap_start <= grp_double_to_posit16_fu_116_ap_start_reg;
    grp_posit16_to_double_fu_56_ap_start <= grp_posit16_to_double_fu_56_ap_start_reg;
    grp_posit16_to_double_fu_86_ap_start <= grp_posit16_to_double_fu_86_ap_start_reg;
end behav;
