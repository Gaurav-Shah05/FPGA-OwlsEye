// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_acc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        acc_stream_0_V_V_dout,
        acc_stream_0_V_V_empty_n,
        acc_stream_0_V_V_read,
        acc_stream_1_V_V_dout,
        acc_stream_1_V_V_empty_n,
        acc_stream_1_V_V_read,
        acc_stream_2_V_V_dout,
        acc_stream_2_V_V_empty_n,
        acc_stream_2_V_V_read,
        acc_stream_3_V_V_dout,
        acc_stream_3_V_V_empty_n,
        acc_stream_3_V_V_read,
        acc_stream_4_V_V_dout,
        acc_stream_4_V_V_empty_n,
        acc_stream_4_V_V_read,
        acc_stream_5_V_V_dout,
        acc_stream_5_V_V_empty_n,
        acc_stream_5_V_V_read,
        acc_stream_6_V_V_dout,
        acc_stream_6_V_V_empty_n,
        acc_stream_6_V_V_read,
        acc_stream_7_V_V_dout,
        acc_stream_7_V_V_empty_n,
        acc_stream_7_V_V_read,
        acc_stream_8_V_V_dout,
        acc_stream_8_V_V_empty_n,
        acc_stream_8_V_V_read,
        acc_stream_9_V_V_dout,
        acc_stream_9_V_V_empty_n,
        acc_stream_9_V_V_read,
        acc_stream_10_V_V_dout,
        acc_stream_10_V_V_empty_n,
        acc_stream_10_V_V_read,
        acc_stream_11_V_V_dout,
        acc_stream_11_V_V_empty_n,
        acc_stream_11_V_V_read,
        acc_stream_12_V_V_dout,
        acc_stream_12_V_V_empty_n,
        acc_stream_12_V_V_read,
        acc_stream_13_V_V_dout,
        acc_stream_13_V_V_empty_n,
        acc_stream_13_V_V_read,
        acc_stream_14_V_V_dout,
        acc_stream_14_V_V_empty_n,
        acc_stream_14_V_V_read,
        acc_stream_15_V_V_dout,
        acc_stream_15_V_V_empty_n,
        acc_stream_15_V_V_read,
        acc_stream_16_V_V_dout,
        acc_stream_16_V_V_empty_n,
        acc_stream_16_V_V_read,
        acc_stream_17_V_V_dout,
        acc_stream_17_V_V_empty_n,
        acc_stream_17_V_V_read,
        acc_stream_18_V_V_dout,
        acc_stream_18_V_V_empty_n,
        acc_stream_18_V_V_read,
        acc_stream_19_V_V_dout,
        acc_stream_19_V_V_empty_n,
        acc_stream_19_V_V_read,
        acc_stream_20_V_V_dout,
        acc_stream_20_V_V_empty_n,
        acc_stream_20_V_V_read,
        acc_stream_21_V_V_dout,
        acc_stream_21_V_V_empty_n,
        acc_stream_21_V_V_read,
        acc_stream_22_V_V_dout,
        acc_stream_22_V_V_empty_n,
        acc_stream_22_V_V_read,
        acc_stream_23_V_V_dout,
        acc_stream_23_V_V_empty_n,
        acc_stream_23_V_V_read,
        acc_stream_24_V_V_dout,
        acc_stream_24_V_V_empty_n,
        acc_stream_24_V_V_read,
        out_V_V_din,
        out_V_V_full_n,
        out_V_V_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [29:0] acc_stream_0_V_V_dout;
input   acc_stream_0_V_V_empty_n;
output   acc_stream_0_V_V_read;
input  [29:0] acc_stream_1_V_V_dout;
input   acc_stream_1_V_V_empty_n;
output   acc_stream_1_V_V_read;
input  [29:0] acc_stream_2_V_V_dout;
input   acc_stream_2_V_V_empty_n;
output   acc_stream_2_V_V_read;
input  [29:0] acc_stream_3_V_V_dout;
input   acc_stream_3_V_V_empty_n;
output   acc_stream_3_V_V_read;
input  [29:0] acc_stream_4_V_V_dout;
input   acc_stream_4_V_V_empty_n;
output   acc_stream_4_V_V_read;
input  [29:0] acc_stream_5_V_V_dout;
input   acc_stream_5_V_V_empty_n;
output   acc_stream_5_V_V_read;
input  [29:0] acc_stream_6_V_V_dout;
input   acc_stream_6_V_V_empty_n;
output   acc_stream_6_V_V_read;
input  [29:0] acc_stream_7_V_V_dout;
input   acc_stream_7_V_V_empty_n;
output   acc_stream_7_V_V_read;
input  [29:0] acc_stream_8_V_V_dout;
input   acc_stream_8_V_V_empty_n;
output   acc_stream_8_V_V_read;
input  [29:0] acc_stream_9_V_V_dout;
input   acc_stream_9_V_V_empty_n;
output   acc_stream_9_V_V_read;
input  [29:0] acc_stream_10_V_V_dout;
input   acc_stream_10_V_V_empty_n;
output   acc_stream_10_V_V_read;
input  [29:0] acc_stream_11_V_V_dout;
input   acc_stream_11_V_V_empty_n;
output   acc_stream_11_V_V_read;
input  [29:0] acc_stream_12_V_V_dout;
input   acc_stream_12_V_V_empty_n;
output   acc_stream_12_V_V_read;
input  [29:0] acc_stream_13_V_V_dout;
input   acc_stream_13_V_V_empty_n;
output   acc_stream_13_V_V_read;
input  [29:0] acc_stream_14_V_V_dout;
input   acc_stream_14_V_V_empty_n;
output   acc_stream_14_V_V_read;
input  [29:0] acc_stream_15_V_V_dout;
input   acc_stream_15_V_V_empty_n;
output   acc_stream_15_V_V_read;
input  [29:0] acc_stream_16_V_V_dout;
input   acc_stream_16_V_V_empty_n;
output   acc_stream_16_V_V_read;
input  [29:0] acc_stream_17_V_V_dout;
input   acc_stream_17_V_V_empty_n;
output   acc_stream_17_V_V_read;
input  [29:0] acc_stream_18_V_V_dout;
input   acc_stream_18_V_V_empty_n;
output   acc_stream_18_V_V_read;
input  [29:0] acc_stream_19_V_V_dout;
input   acc_stream_19_V_V_empty_n;
output   acc_stream_19_V_V_read;
input  [29:0] acc_stream_20_V_V_dout;
input   acc_stream_20_V_V_empty_n;
output   acc_stream_20_V_V_read;
input  [29:0] acc_stream_21_V_V_dout;
input   acc_stream_21_V_V_empty_n;
output   acc_stream_21_V_V_read;
input  [29:0] acc_stream_22_V_V_dout;
input   acc_stream_22_V_V_empty_n;
output   acc_stream_22_V_V_read;
input  [29:0] acc_stream_23_V_V_dout;
input   acc_stream_23_V_V_empty_n;
output   acc_stream_23_V_V_read;
input  [29:0] acc_stream_24_V_V_dout;
input   acc_stream_24_V_V_empty_n;
output   acc_stream_24_V_V_read;
output  [29:0] out_V_V_din;
input   out_V_V_full_n;
output   out_V_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg acc_stream_0_V_V_read;
reg acc_stream_1_V_V_read;
reg acc_stream_2_V_V_read;
reg acc_stream_3_V_V_read;
reg acc_stream_4_V_V_read;
reg acc_stream_5_V_V_read;
reg acc_stream_6_V_V_read;
reg acc_stream_7_V_V_read;
reg acc_stream_8_V_V_read;
reg acc_stream_9_V_V_read;
reg acc_stream_10_V_V_read;
reg acc_stream_11_V_V_read;
reg acc_stream_12_V_V_read;
reg acc_stream_13_V_V_read;
reg acc_stream_14_V_V_read;
reg acc_stream_15_V_V_read;
reg acc_stream_16_V_V_read;
reg acc_stream_17_V_V_read;
reg acc_stream_18_V_V_read;
reg acc_stream_19_V_V_read;
reg acc_stream_20_V_V_read;
reg acc_stream_21_V_V_read;
reg acc_stream_22_V_V_read;
reg acc_stream_23_V_V_read;
reg acc_stream_24_V_V_read;
reg out_V_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln273_fu_289_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
reg    ap_block_state3_pp0_stage0_iter6;
reg    ap_enable_reg_pp0_iter6;
reg    ap_block_pp0_stage0_11001;
reg    acc_stream_0_V_V_blk_n;
wire    ap_block_pp0_stage0;
reg    acc_stream_1_V_V_blk_n;
reg    acc_stream_2_V_V_blk_n;
reg    acc_stream_3_V_V_blk_n;
reg    acc_stream_4_V_V_blk_n;
reg    acc_stream_5_V_V_blk_n;
reg    acc_stream_6_V_V_blk_n;
reg    acc_stream_7_V_V_blk_n;
reg    acc_stream_8_V_V_blk_n;
reg    acc_stream_9_V_V_blk_n;
reg    acc_stream_10_V_V_blk_n;
reg    acc_stream_11_V_V_blk_n;
reg    acc_stream_12_V_V_blk_n;
reg    acc_stream_13_V_V_blk_n;
reg    acc_stream_14_V_V_blk_n;
reg    acc_stream_15_V_V_blk_n;
reg    acc_stream_16_V_V_blk_n;
reg    acc_stream_17_V_V_blk_n;
reg    acc_stream_18_V_V_blk_n;
reg    acc_stream_19_V_V_blk_n;
reg    acc_stream_20_V_V_blk_n;
reg    acc_stream_21_V_V_blk_n;
reg    acc_stream_22_V_V_blk_n;
reg    acc_stream_23_V_V_blk_n;
reg    acc_stream_24_V_V_blk_n;
reg    out_V_V_blk_n;
reg   [11:0] pixel_index_01_reg_269;
reg   [29:0] tmp_V_reg_403;
reg   [29:0] tmp_V_726_reg_408;
reg   [29:0] tmp_V_726_reg_408_pp0_iter1_reg;
reg   [29:0] tmp_V_727_reg_413;
reg   [29:0] tmp_V_728_reg_418;
reg   [29:0] tmp_V_729_reg_423;
reg   [29:0] tmp_V_730_reg_428;
reg   [29:0] tmp_V_731_reg_433;
reg   [29:0] tmp_V_731_reg_433_pp0_iter1_reg;
reg   [29:0] tmp_V_732_reg_438;
reg   [29:0] tmp_V_733_reg_443;
reg   [29:0] tmp_V_734_reg_448;
reg   [29:0] tmp_V_735_reg_453;
reg   [29:0] tmp_V_736_reg_458;
reg   [29:0] tmp_V_737_reg_463;
reg   [29:0] tmp_V_738_reg_468;
reg   [29:0] tmp_V_739_reg_473;
reg   [29:0] tmp_V_740_reg_478;
reg   [29:0] tmp_V_741_reg_483;
reg   [29:0] tmp_V_742_reg_488;
reg   [29:0] tmp_V_743_reg_493;
reg   [29:0] tmp_V_743_reg_493_pp0_iter1_reg;
reg   [29:0] tmp_V_743_reg_493_pp0_iter2_reg;
reg   [29:0] tmp_V_744_reg_498;
reg   [29:0] tmp_V_745_reg_503;
reg   [29:0] tmp_V_746_reg_508;
reg   [29:0] tmp_V_746_reg_508_pp0_iter1_reg;
reg   [29:0] tmp_V_747_reg_513;
reg   [29:0] tmp_V_747_reg_513_pp0_iter1_reg;
reg   [29:0] tmp_V_748_reg_518;
reg   [29:0] tmp_V_749_reg_523;
wire   [11:0] pixel_index_fu_283_p2;
reg   [11:0] pixel_index_reg_528;
reg   [0:0] icmp_ln273_reg_533;
reg   [0:0] icmp_ln273_reg_533_pp0_iter1_reg;
reg   [0:0] icmp_ln273_reg_533_pp0_iter2_reg;
reg   [0:0] icmp_ln273_reg_533_pp0_iter3_reg;
reg   [0:0] icmp_ln273_reg_533_pp0_iter4_reg;
reg   [0:0] icmp_ln273_reg_533_pp0_iter5_reg;
wire   [29:0] add_ln703_fu_297_p2;
reg   [29:0] add_ln703_reg_537;
wire   [29:0] add_ln703_3_fu_305_p2;
reg   [29:0] add_ln703_3_reg_542;
wire   [29:0] add_ln703_5_fu_310_p2;
reg   [29:0] add_ln703_5_reg_547;
wire   [29:0] add_ln703_8_fu_318_p2;
reg   [29:0] add_ln703_8_reg_552;
wire   [29:0] add_ln703_12_fu_327_p2;
reg   [29:0] add_ln703_12_reg_557;
reg   [29:0] add_ln703_12_reg_557_pp0_iter2_reg;
reg   [29:0] add_ln703_12_reg_557_pp0_iter3_reg;
wire   [29:0] add_ln703_14_fu_336_p2;
reg   [29:0] add_ln703_14_reg_562;
reg   [29:0] add_ln703_14_reg_562_pp0_iter2_reg;
reg   [29:0] add_ln703_14_reg_562_pp0_iter3_reg;
wire   [29:0] add_ln703_16_fu_341_p2;
reg   [29:0] add_ln703_16_reg_567;
reg   [29:0] add_ln703_16_reg_567_pp0_iter2_reg;
wire   [29:0] add_ln703_19_fu_345_p2;
reg   [29:0] add_ln703_19_reg_572;
wire   [29:0] add_ln703_4_fu_353_p2;
reg   [29:0] add_ln703_4_reg_577;
reg   [29:0] add_ln703_4_reg_577_pp0_iter3_reg;
reg   [29:0] add_ln703_4_reg_577_pp0_iter4_reg;
wire   [29:0] add_ln703_9_fu_362_p2;
reg   [29:0] add_ln703_9_reg_582;
reg   [29:0] add_ln703_9_reg_582_pp0_iter3_reg;
reg   [29:0] add_ln703_9_reg_582_pp0_iter4_reg;
wire   [29:0] add_ln703_20_fu_371_p2;
reg   [29:0] add_ln703_20_reg_587;
wire   [29:0] add_ln703_21_fu_380_p2;
reg   [29:0] add_ln703_21_reg_592;
wire   [29:0] add_ln703_22_fu_389_p2;
reg   [29:0] add_ln703_22_reg_597;
wire   [29:0] tmp_V_750_fu_398_p2;
reg   [29:0] tmp_V_750_reg_602;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg   [11:0] ap_phi_mux_pixel_index_01_phi_fu_273_p6;
reg    ap_block_pp0_stage0_01001;
wire   [29:0] add_ln703_2_fu_301_p2;
wire   [29:0] add_ln703_7_fu_314_p2;
wire   [29:0] add_ln703_11_fu_323_p2;
wire   [29:0] add_ln703_13_fu_332_p2;
wire   [29:0] add_ln703_1_fu_349_p2;
wire   [29:0] add_ln703_6_fu_358_p2;
wire   [29:0] add_ln703_18_fu_367_p2;
wire   [29:0] add_ln703_17_fu_376_p2;
wire   [29:0] add_ln703_15_fu_385_p2;
wire   [29:0] add_ln703_10_fu_394_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_382;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln273_reg_533_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln273_reg_533 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixel_index_01_reg_269 <= pixel_index_reg_528;
    end else if ((((icmp_ln273_reg_533 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        pixel_index_01_reg_269 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln703_12_reg_557 <= add_ln703_12_fu_327_p2;
        add_ln703_14_reg_562 <= add_ln703_14_fu_336_p2;
        add_ln703_16_reg_567 <= add_ln703_16_fu_341_p2;
        add_ln703_19_reg_572 <= add_ln703_19_fu_345_p2;
        add_ln703_3_reg_542 <= add_ln703_3_fu_305_p2;
        add_ln703_5_reg_547 <= add_ln703_5_fu_310_p2;
        add_ln703_8_reg_552 <= add_ln703_8_fu_318_p2;
        add_ln703_reg_537 <= add_ln703_fu_297_p2;
        icmp_ln273_reg_533 <= icmp_ln273_fu_289_p2;
        icmp_ln273_reg_533_pp0_iter1_reg <= icmp_ln273_reg_533;
        tmp_V_726_reg_408 <= acc_stream_1_V_V_dout;
        tmp_V_726_reg_408_pp0_iter1_reg <= tmp_V_726_reg_408;
        tmp_V_727_reg_413 <= acc_stream_2_V_V_dout;
        tmp_V_728_reg_418 <= acc_stream_3_V_V_dout;
        tmp_V_729_reg_423 <= acc_stream_4_V_V_dout;
        tmp_V_730_reg_428 <= acc_stream_5_V_V_dout;
        tmp_V_731_reg_433 <= acc_stream_6_V_V_dout;
        tmp_V_731_reg_433_pp0_iter1_reg <= tmp_V_731_reg_433;
        tmp_V_732_reg_438 <= acc_stream_7_V_V_dout;
        tmp_V_733_reg_443 <= acc_stream_8_V_V_dout;
        tmp_V_734_reg_448 <= acc_stream_9_V_V_dout;
        tmp_V_735_reg_453 <= acc_stream_10_V_V_dout;
        tmp_V_736_reg_458 <= acc_stream_11_V_V_dout;
        tmp_V_737_reg_463 <= acc_stream_12_V_V_dout;
        tmp_V_738_reg_468 <= acc_stream_13_V_V_dout;
        tmp_V_739_reg_473 <= acc_stream_14_V_V_dout;
        tmp_V_740_reg_478 <= acc_stream_15_V_V_dout;
        tmp_V_741_reg_483 <= acc_stream_16_V_V_dout;
        tmp_V_742_reg_488 <= acc_stream_17_V_V_dout;
        tmp_V_743_reg_493 <= acc_stream_18_V_V_dout;
        tmp_V_743_reg_493_pp0_iter1_reg <= tmp_V_743_reg_493;
        tmp_V_744_reg_498 <= acc_stream_19_V_V_dout;
        tmp_V_745_reg_503 <= acc_stream_20_V_V_dout;
        tmp_V_746_reg_508 <= acc_stream_21_V_V_dout;
        tmp_V_746_reg_508_pp0_iter1_reg <= tmp_V_746_reg_508;
        tmp_V_747_reg_513 <= acc_stream_22_V_V_dout;
        tmp_V_747_reg_513_pp0_iter1_reg <= tmp_V_747_reg_513;
        tmp_V_748_reg_518 <= acc_stream_23_V_V_dout;
        tmp_V_749_reg_523 <= acc_stream_24_V_V_dout;
        tmp_V_reg_403 <= acc_stream_0_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln703_12_reg_557_pp0_iter2_reg <= add_ln703_12_reg_557;
        add_ln703_12_reg_557_pp0_iter3_reg <= add_ln703_12_reg_557_pp0_iter2_reg;
        add_ln703_14_reg_562_pp0_iter2_reg <= add_ln703_14_reg_562;
        add_ln703_14_reg_562_pp0_iter3_reg <= add_ln703_14_reg_562_pp0_iter2_reg;
        add_ln703_16_reg_567_pp0_iter2_reg <= add_ln703_16_reg_567;
        add_ln703_20_reg_587 <= add_ln703_20_fu_371_p2;
        add_ln703_21_reg_592 <= add_ln703_21_fu_380_p2;
        add_ln703_22_reg_597 <= add_ln703_22_fu_389_p2;
        add_ln703_4_reg_577 <= add_ln703_4_fu_353_p2;
        add_ln703_4_reg_577_pp0_iter3_reg <= add_ln703_4_reg_577;
        add_ln703_4_reg_577_pp0_iter4_reg <= add_ln703_4_reg_577_pp0_iter3_reg;
        add_ln703_9_reg_582 <= add_ln703_9_fu_362_p2;
        add_ln703_9_reg_582_pp0_iter3_reg <= add_ln703_9_reg_582;
        add_ln703_9_reg_582_pp0_iter4_reg <= add_ln703_9_reg_582_pp0_iter3_reg;
        icmp_ln273_reg_533_pp0_iter2_reg <= icmp_ln273_reg_533_pp0_iter1_reg;
        icmp_ln273_reg_533_pp0_iter3_reg <= icmp_ln273_reg_533_pp0_iter2_reg;
        icmp_ln273_reg_533_pp0_iter4_reg <= icmp_ln273_reg_533_pp0_iter3_reg;
        icmp_ln273_reg_533_pp0_iter5_reg <= icmp_ln273_reg_533_pp0_iter4_reg;
        tmp_V_743_reg_493_pp0_iter2_reg <= tmp_V_743_reg_493_pp0_iter1_reg;
        tmp_V_750_reg_602 <= tmp_V_750_fu_398_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        pixel_index_reg_528 <= pixel_index_fu_283_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_0_V_V_blk_n = acc_stream_0_V_V_empty_n;
    end else begin
        acc_stream_0_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_0_V_V_read = 1'b1;
    end else begin
        acc_stream_0_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_10_V_V_blk_n = acc_stream_10_V_V_empty_n;
    end else begin
        acc_stream_10_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_10_V_V_read = 1'b1;
    end else begin
        acc_stream_10_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_11_V_V_blk_n = acc_stream_11_V_V_empty_n;
    end else begin
        acc_stream_11_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_11_V_V_read = 1'b1;
    end else begin
        acc_stream_11_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_12_V_V_blk_n = acc_stream_12_V_V_empty_n;
    end else begin
        acc_stream_12_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_12_V_V_read = 1'b1;
    end else begin
        acc_stream_12_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_13_V_V_blk_n = acc_stream_13_V_V_empty_n;
    end else begin
        acc_stream_13_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_13_V_V_read = 1'b1;
    end else begin
        acc_stream_13_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_14_V_V_blk_n = acc_stream_14_V_V_empty_n;
    end else begin
        acc_stream_14_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_14_V_V_read = 1'b1;
    end else begin
        acc_stream_14_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_15_V_V_blk_n = acc_stream_15_V_V_empty_n;
    end else begin
        acc_stream_15_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_15_V_V_read = 1'b1;
    end else begin
        acc_stream_15_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_16_V_V_blk_n = acc_stream_16_V_V_empty_n;
    end else begin
        acc_stream_16_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_16_V_V_read = 1'b1;
    end else begin
        acc_stream_16_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_17_V_V_blk_n = acc_stream_17_V_V_empty_n;
    end else begin
        acc_stream_17_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_17_V_V_read = 1'b1;
    end else begin
        acc_stream_17_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_18_V_V_blk_n = acc_stream_18_V_V_empty_n;
    end else begin
        acc_stream_18_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_18_V_V_read = 1'b1;
    end else begin
        acc_stream_18_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_19_V_V_blk_n = acc_stream_19_V_V_empty_n;
    end else begin
        acc_stream_19_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_19_V_V_read = 1'b1;
    end else begin
        acc_stream_19_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_1_V_V_blk_n = acc_stream_1_V_V_empty_n;
    end else begin
        acc_stream_1_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_1_V_V_read = 1'b1;
    end else begin
        acc_stream_1_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_20_V_V_blk_n = acc_stream_20_V_V_empty_n;
    end else begin
        acc_stream_20_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_20_V_V_read = 1'b1;
    end else begin
        acc_stream_20_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_21_V_V_blk_n = acc_stream_21_V_V_empty_n;
    end else begin
        acc_stream_21_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_21_V_V_read = 1'b1;
    end else begin
        acc_stream_21_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_22_V_V_blk_n = acc_stream_22_V_V_empty_n;
    end else begin
        acc_stream_22_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_22_V_V_read = 1'b1;
    end else begin
        acc_stream_22_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_23_V_V_blk_n = acc_stream_23_V_V_empty_n;
    end else begin
        acc_stream_23_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_23_V_V_read = 1'b1;
    end else begin
        acc_stream_23_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_24_V_V_blk_n = acc_stream_24_V_V_empty_n;
    end else begin
        acc_stream_24_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_24_V_V_read = 1'b1;
    end else begin
        acc_stream_24_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_2_V_V_blk_n = acc_stream_2_V_V_empty_n;
    end else begin
        acc_stream_2_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_2_V_V_read = 1'b1;
    end else begin
        acc_stream_2_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_3_V_V_blk_n = acc_stream_3_V_V_empty_n;
    end else begin
        acc_stream_3_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_3_V_V_read = 1'b1;
    end else begin
        acc_stream_3_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_4_V_V_blk_n = acc_stream_4_V_V_empty_n;
    end else begin
        acc_stream_4_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_4_V_V_read = 1'b1;
    end else begin
        acc_stream_4_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_5_V_V_blk_n = acc_stream_5_V_V_empty_n;
    end else begin
        acc_stream_5_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_5_V_V_read = 1'b1;
    end else begin
        acc_stream_5_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_6_V_V_blk_n = acc_stream_6_V_V_empty_n;
    end else begin
        acc_stream_6_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_6_V_V_read = 1'b1;
    end else begin
        acc_stream_6_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_7_V_V_blk_n = acc_stream_7_V_V_empty_n;
    end else begin
        acc_stream_7_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_7_V_V_read = 1'b1;
    end else begin
        acc_stream_7_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_8_V_V_blk_n = acc_stream_8_V_V_empty_n;
    end else begin
        acc_stream_8_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_8_V_V_read = 1'b1;
    end else begin
        acc_stream_8_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_9_V_V_blk_n = acc_stream_9_V_V_empty_n;
    end else begin
        acc_stream_9_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        acc_stream_9_V_V_read = 1'b1;
    end else begin
        acc_stream_9_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln273_reg_533_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_382)) begin
        if ((icmp_ln273_reg_533 == 1'd1)) begin
            ap_phi_mux_pixel_index_01_phi_fu_273_p6 = 12'd0;
        end else if ((icmp_ln273_reg_533 == 1'd0)) begin
            ap_phi_mux_pixel_index_01_phi_fu_273_p6 = pixel_index_reg_528;
        end else begin
            ap_phi_mux_pixel_index_01_phi_fu_273_p6 = pixel_index_01_reg_269;
        end
    end else begin
        ap_phi_mux_pixel_index_01_phi_fu_273_p6 = pixel_index_01_reg_269;
    end
end

always @ (*) begin
    if (((icmp_ln273_fu_289_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_V_V_blk_n = out_V_V_full_n;
    end else begin
        out_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        out_V_V_write = 1'b1;
    end else begin
        out_V_V_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_10_fu_394_p2 = (add_ln703_9_reg_582_pp0_iter4_reg + add_ln703_4_reg_577_pp0_iter4_reg);

assign add_ln703_11_fu_323_p2 = (tmp_V_738_reg_468 + tmp_V_739_reg_473);

assign add_ln703_12_fu_327_p2 = (add_ln703_11_fu_323_p2 + tmp_V_737_reg_463);

assign add_ln703_13_fu_332_p2 = (tmp_V_741_reg_483 + tmp_V_742_reg_488);

assign add_ln703_14_fu_336_p2 = (add_ln703_13_fu_332_p2 + tmp_V_740_reg_478);

assign add_ln703_15_fu_385_p2 = (add_ln703_14_reg_562_pp0_iter3_reg + add_ln703_12_reg_557_pp0_iter3_reg);

assign add_ln703_16_fu_341_p2 = (tmp_V_744_reg_498 + tmp_V_745_reg_503);

assign add_ln703_17_fu_376_p2 = (add_ln703_16_reg_567_pp0_iter2_reg + tmp_V_743_reg_493_pp0_iter2_reg);

assign add_ln703_18_fu_367_p2 = (tmp_V_746_reg_508_pp0_iter1_reg + tmp_V_747_reg_513_pp0_iter1_reg);

assign add_ln703_19_fu_345_p2 = (tmp_V_748_reg_518 + tmp_V_749_reg_523);

assign add_ln703_1_fu_349_p2 = (add_ln703_reg_537 + tmp_V_726_reg_408_pp0_iter1_reg);

assign add_ln703_20_fu_371_p2 = (add_ln703_19_reg_572 + add_ln703_18_fu_367_p2);

assign add_ln703_21_fu_380_p2 = (add_ln703_20_reg_587 + add_ln703_17_fu_376_p2);

assign add_ln703_22_fu_389_p2 = (add_ln703_21_reg_592 + add_ln703_15_fu_385_p2);

assign add_ln703_2_fu_301_p2 = (tmp_V_729_reg_423 + tmp_V_730_reg_428);

assign add_ln703_3_fu_305_p2 = (add_ln703_2_fu_301_p2 + tmp_V_728_reg_418);

assign add_ln703_4_fu_353_p2 = (add_ln703_3_reg_542 + add_ln703_1_fu_349_p2);

assign add_ln703_5_fu_310_p2 = (tmp_V_732_reg_438 + tmp_V_733_reg_443);

assign add_ln703_6_fu_358_p2 = (add_ln703_5_reg_547 + tmp_V_731_reg_433_pp0_iter1_reg);

assign add_ln703_7_fu_314_p2 = (tmp_V_735_reg_453 + tmp_V_736_reg_458);

assign add_ln703_8_fu_318_p2 = (add_ln703_7_fu_314_p2 + tmp_V_734_reg_448);

assign add_ln703_9_fu_362_p2 = (add_ln703_8_reg_552 + add_ln703_6_fu_358_p2);

assign add_ln703_fu_297_p2 = (tmp_V_reg_403 + tmp_V_727_reg_413);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((1'b0 == acc_stream_10_V_V_empty_n) | (1'b0 == acc_stream_9_V_V_empty_n) | (1'b0 == acc_stream_8_V_V_empty_n) | (1'b0 == acc_stream_7_V_V_empty_n) | (1'b0 == acc_stream_6_V_V_empty_n) | (1'b0 == acc_stream_5_V_V_empty_n) | (1'b0 == acc_stream_4_V_V_empty_n) | (1'b0 == acc_stream_3_V_V_empty_n) | (1'b0 == acc_stream_2_V_V_empty_n) | (1'b0 == acc_stream_1_V_V_empty_n) | (1'b0 == acc_stream_0_V_V_empty_n) | (1'b0 == acc_stream_24_V_V_empty_n) | (1'b0 == acc_stream_23_V_V_empty_n) | (1'b0 == acc_stream_22_V_V_empty_n) | (1'b0 == acc_stream_21_V_V_empty_n) | (1'b0 == acc_stream_20_V_V_empty_n) | (1'b0 == acc_stream_19_V_V_empty_n) | (1'b0 == acc_stream_18_V_V_empty_n) | (1'b0 == acc_stream_17_V_V_empty_n) | (1'b0 == acc_stream_16_V_V_empty_n) | (1'b0 == acc_stream_15_V_V_empty_n) | (1'b0 == acc_stream_14_V_V_empty_n) | (1'b0 == acc_stream_13_V_V_empty_n) | (1'b0 == acc_stream_12_V_V_empty_n) | (1'b0 == acc_stream_11_V_V_empty_n))) | ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((1'b0 == acc_stream_10_V_V_empty_n) | (1'b0 == acc_stream_9_V_V_empty_n) | (1'b0 == acc_stream_8_V_V_empty_n) | (1'b0 == acc_stream_7_V_V_empty_n) | (1'b0 == acc_stream_6_V_V_empty_n) | (1'b0 == acc_stream_5_V_V_empty_n) | (1'b0 == acc_stream_4_V_V_empty_n) | (1'b0 == acc_stream_3_V_V_empty_n) | (1'b0 == acc_stream_2_V_V_empty_n) | (1'b0 == acc_stream_1_V_V_empty_n) | (1'b0 == acc_stream_0_V_V_empty_n) | (1'b0 == acc_stream_24_V_V_empty_n) | (1'b0 == acc_stream_23_V_V_empty_n) | (1'b0 == acc_stream_22_V_V_empty_n) | (1'b0 == acc_stream_21_V_V_empty_n) | (1'b0 == acc_stream_20_V_V_empty_n) | (1'b0 == acc_stream_19_V_V_empty_n) | (1'b0 == acc_stream_18_V_V_empty_n) | (1'b0 == acc_stream_17_V_V_empty_n) | (1'b0 == acc_stream_16_V_V_empty_n) | (1'b0 == acc_stream_15_V_V_empty_n) | (1'b0 == acc_stream_14_V_V_empty_n) | (1'b0 == acc_stream_13_V_V_empty_n) | (1'b0 == acc_stream_12_V_V_empty_n) | (1'b0 == acc_stream_11_V_V_empty_n))) | ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((1'b0 == acc_stream_10_V_V_empty_n) | (1'b0 == acc_stream_9_V_V_empty_n) | (1'b0 == acc_stream_8_V_V_empty_n) | (1'b0 == acc_stream_7_V_V_empty_n) | (1'b0 == acc_stream_6_V_V_empty_n) | (1'b0 == acc_stream_5_V_V_empty_n) | (1'b0 == acc_stream_4_V_V_empty_n) | (1'b0 == acc_stream_3_V_V_empty_n) | (1'b0 == acc_stream_2_V_V_empty_n) | (1'b0 == acc_stream_1_V_V_empty_n) | (1'b0 == acc_stream_0_V_V_empty_n) | (1'b0 == acc_stream_24_V_V_empty_n) | (1'b0 == acc_stream_23_V_V_empty_n) | (1'b0 == acc_stream_22_V_V_empty_n) | (1'b0 == acc_stream_21_V_V_empty_n) | (1'b0 == acc_stream_20_V_V_empty_n) | (1'b0 == acc_stream_19_V_V_empty_n) | (1'b0 == acc_stream_18_V_V_empty_n) | (1'b0 == acc_stream_17_V_V_empty_n) | (1'b0 == acc_stream_16_V_V_empty_n) | (1'b0 == acc_stream_15_V_V_empty_n) | (1'b0 == acc_stream_14_V_V_empty_n) | (1'b0 == acc_stream_13_V_V_empty_n) | (1'b0 == acc_stream_12_V_V_empty_n) | (1'b0 == acc_stream_11_V_V_empty_n))) | ((out_V_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((1'b0 == acc_stream_10_V_V_empty_n) | (1'b0 == acc_stream_9_V_V_empty_n) | (1'b0 == acc_stream_8_V_V_empty_n) | (1'b0 == acc_stream_7_V_V_empty_n) | (1'b0 == acc_stream_6_V_V_empty_n) | (1'b0 == acc_stream_5_V_V_empty_n) | (1'b0 == acc_stream_4_V_V_empty_n) | (1'b0 == acc_stream_3_V_V_empty_n) | (1'b0 == acc_stream_2_V_V_empty_n) | (1'b0 == acc_stream_1_V_V_empty_n) | (1'b0 == acc_stream_0_V_V_empty_n) | (1'b0 == acc_stream_24_V_V_empty_n) | (1'b0 == acc_stream_23_V_V_empty_n) | (1'b0 == acc_stream_22_V_V_empty_n) | (1'b0 == acc_stream_21_V_V_empty_n) | (1'b0 == acc_stream_20_V_V_empty_n) | (1'b0 == acc_stream_19_V_V_empty_n) | (1'b0 == acc_stream_18_V_V_empty_n) | (1'b0 == acc_stream_17_V_V_empty_n) | (1'b0 == acc_stream_16_V_V_empty_n) | (1'b0 == acc_stream_15_V_V_empty_n) | (1'b0 == acc_stream_14_V_V_empty_n) | (1'b0 == acc_stream_13_V_V_empty_n) | (1'b0 == acc_stream_12_V_V_empty_n) | (1'b0 == acc_stream_11_V_V_empty_n));
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter6 = (out_V_V_full_n == 1'b0);
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_382 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign icmp_ln273_fu_289_p2 = ((ap_phi_mux_pixel_index_01_phi_fu_273_p6 == 12'd2303) ? 1'b1 : 1'b0);

assign out_V_V_din = tmp_V_750_reg_602;

assign pixel_index_fu_283_p2 = (ap_phi_mux_pixel_index_01_phi_fu_273_p6 + 12'd1);

assign tmp_V_750_fu_398_p2 = (add_ln703_22_reg_597 + add_ln703_10_fu_394_p2);

endmodule //conv_acc
