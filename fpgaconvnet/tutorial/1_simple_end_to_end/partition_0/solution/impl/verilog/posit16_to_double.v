// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module posit16_to_double (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ui,
        ap_return
);

parameter    ap_ST_fsm_state1 = 230'd1;
parameter    ap_ST_fsm_state2 = 230'd2;
parameter    ap_ST_fsm_state3 = 230'd4;
parameter    ap_ST_fsm_state4 = 230'd8;
parameter    ap_ST_fsm_state5 = 230'd16;
parameter    ap_ST_fsm_state6 = 230'd32;
parameter    ap_ST_fsm_state7 = 230'd64;
parameter    ap_ST_fsm_state8 = 230'd128;
parameter    ap_ST_fsm_state9 = 230'd256;
parameter    ap_ST_fsm_state10 = 230'd512;
parameter    ap_ST_fsm_state11 = 230'd1024;
parameter    ap_ST_fsm_state12 = 230'd2048;
parameter    ap_ST_fsm_state13 = 230'd4096;
parameter    ap_ST_fsm_state14 = 230'd8192;
parameter    ap_ST_fsm_state15 = 230'd16384;
parameter    ap_ST_fsm_state16 = 230'd32768;
parameter    ap_ST_fsm_state17 = 230'd65536;
parameter    ap_ST_fsm_state18 = 230'd131072;
parameter    ap_ST_fsm_state19 = 230'd262144;
parameter    ap_ST_fsm_state20 = 230'd524288;
parameter    ap_ST_fsm_state21 = 230'd1048576;
parameter    ap_ST_fsm_state22 = 230'd2097152;
parameter    ap_ST_fsm_state23 = 230'd4194304;
parameter    ap_ST_fsm_state24 = 230'd8388608;
parameter    ap_ST_fsm_state25 = 230'd16777216;
parameter    ap_ST_fsm_state26 = 230'd33554432;
parameter    ap_ST_fsm_state27 = 230'd67108864;
parameter    ap_ST_fsm_state28 = 230'd134217728;
parameter    ap_ST_fsm_state29 = 230'd268435456;
parameter    ap_ST_fsm_state30 = 230'd536870912;
parameter    ap_ST_fsm_state31 = 230'd1073741824;
parameter    ap_ST_fsm_state32 = 230'd2147483648;
parameter    ap_ST_fsm_state33 = 230'd4294967296;
parameter    ap_ST_fsm_state34 = 230'd8589934592;
parameter    ap_ST_fsm_state35 = 230'd17179869184;
parameter    ap_ST_fsm_state36 = 230'd34359738368;
parameter    ap_ST_fsm_state37 = 230'd68719476736;
parameter    ap_ST_fsm_state38 = 230'd137438953472;
parameter    ap_ST_fsm_state39 = 230'd274877906944;
parameter    ap_ST_fsm_state40 = 230'd549755813888;
parameter    ap_ST_fsm_state41 = 230'd1099511627776;
parameter    ap_ST_fsm_state42 = 230'd2199023255552;
parameter    ap_ST_fsm_state43 = 230'd4398046511104;
parameter    ap_ST_fsm_state44 = 230'd8796093022208;
parameter    ap_ST_fsm_state45 = 230'd17592186044416;
parameter    ap_ST_fsm_state46 = 230'd35184372088832;
parameter    ap_ST_fsm_state47 = 230'd70368744177664;
parameter    ap_ST_fsm_state48 = 230'd140737488355328;
parameter    ap_ST_fsm_state49 = 230'd281474976710656;
parameter    ap_ST_fsm_state50 = 230'd562949953421312;
parameter    ap_ST_fsm_state51 = 230'd1125899906842624;
parameter    ap_ST_fsm_state52 = 230'd2251799813685248;
parameter    ap_ST_fsm_state53 = 230'd4503599627370496;
parameter    ap_ST_fsm_state54 = 230'd9007199254740992;
parameter    ap_ST_fsm_state55 = 230'd18014398509481984;
parameter    ap_ST_fsm_state56 = 230'd36028797018963968;
parameter    ap_ST_fsm_state57 = 230'd72057594037927936;
parameter    ap_ST_fsm_state58 = 230'd144115188075855872;
parameter    ap_ST_fsm_state59 = 230'd288230376151711744;
parameter    ap_ST_fsm_state60 = 230'd576460752303423488;
parameter    ap_ST_fsm_state61 = 230'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 230'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 230'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 230'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 230'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 230'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 230'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 230'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 230'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 230'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 230'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 230'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 230'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 230'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 230'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 230'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 230'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 230'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 230'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 230'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 230'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 230'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 230'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 230'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 230'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 230'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 230'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 230'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 230'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 230'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 230'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 230'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 230'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 230'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 230'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 230'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 230'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 230'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 230'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 230'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 230'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 230'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 230'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 230'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 230'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 230'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 230'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 230'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 230'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 230'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 230'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 230'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 230'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 230'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 230'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 230'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 230'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 230'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 230'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 230'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 230'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 230'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 230'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 230'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 230'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 230'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 230'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 230'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 230'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 230'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 230'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 230'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 230'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 230'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 230'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 230'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 230'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 230'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 230'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 230'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 230'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 230'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 230'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 230'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 230'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 230'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 230'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 230'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 230'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 230'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 230'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 230'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 230'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 230'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 230'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 230'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 230'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 230'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 230'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 230'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 230'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 230'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 230'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 230'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 230'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 230'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 230'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 230'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 230'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 230'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 230'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 230'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 230'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 230'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 230'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 230'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 230'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 230'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 230'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 230'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 230'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 230'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 230'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 230'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 230'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 230'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 230'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 230'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 230'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 230'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 230'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 230'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 230'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 230'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 230'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 230'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 230'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 230'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 230'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 230'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 230'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 230'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 230'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 230'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 230'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 230'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 230'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 230'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 230'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 230'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 230'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 230'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 230'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 230'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 230'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 230'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 230'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 230'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 230'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 230'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 230'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 230'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 230'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 230'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 230'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 230'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 230'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 230'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 230'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 230'd862718293348820473429344482784628181556388621521298319395315527974912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] ui;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [229:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_fu_518_p2;
reg   [63:0] reg_531;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state219;
wire    ap_CS_fsm_state229;
wire   [0:0] icmp_ln54_fu_538_p2;
reg   [0:0] icmp_ln54_reg_1038;
wire   [0:0] icmp_ln55_fu_544_p2;
reg   [0:0] icmp_ln55_reg_1042;
wire   [0:0] neg_fu_550_p3;
reg   [0:0] neg_reg_1046;
wire   [15:0] zext_ln60_fu_568_p1;
reg   [0:0] regSign_reg_1055;
wire    ap_CS_fsm_state2;
wire   [15:0] shl_ln72_fu_592_p2;
wire   [15:0] shl_ln72_1_fu_612_p2;
wire   [0:0] xor_ln70_fu_606_p2;
wire   [15:0] shl_ln72_2_fu_632_p2;
wire   [0:0] xor_ln70_1_fu_626_p2;
wire   [15:0] shl_ln72_3_fu_652_p2;
wire   [0:0] xor_ln70_2_fu_646_p2;
wire   [15:0] shl_ln72_4_fu_672_p2;
wire   [0:0] xor_ln70_3_fu_666_p2;
wire   [15:0] shl_ln72_5_fu_692_p2;
wire   [0:0] xor_ln70_4_fu_686_p2;
wire   [15:0] shl_ln72_6_fu_712_p2;
wire   [0:0] xor_ln70_5_fu_706_p2;
wire   [15:0] shl_ln72_7_fu_732_p2;
wire   [0:0] xor_ln70_6_fu_726_p2;
wire   [15:0] shl_ln72_8_fu_752_p2;
wire   [0:0] xor_ln70_7_fu_746_p2;
wire   [15:0] shl_ln72_9_fu_772_p2;
wire   [0:0] xor_ln70_8_fu_766_p2;
wire   [15:0] shl_ln72_10_fu_792_p2;
wire   [0:0] xor_ln70_9_fu_786_p2;
wire   [15:0] shl_ln72_11_fu_812_p2;
wire   [0:0] xor_ln70_10_fu_806_p2;
wire   [15:0] shl_ln72_12_fu_832_p2;
wire   [0:0] xor_ln70_11_fu_826_p2;
wire   [0:0] xor_ln70_13_fu_858_p2;
wire   [0:0] xor_ln70_12_fu_846_p2;
wire   [15:0] p_tmp_4_13_fu_864_p3;
wire   [3:0] p_10_cast_fu_872_p1;
wire   [3:0] p_11_cast_cast_cast_fu_876_p3;
wire   [4:0] zext_ln78_fu_884_p1;
wire    ap_CS_fsm_state3;
wire   [4:0] k_fu_908_p3;
reg   [4:0] k_reg_1189;
wire   [15:0] tmp_45_fu_915_p2;
wire   [0:0] ap_phi_mux_icmp_ln70_lcssa_phi_fu_175_p28;
wire   [4:0] remaining_fu_921_p2;
wire   [4:0] remaining_3_fu_959_p3;
reg   [4:0] remaining_3_reg_1204;
wire    ap_CS_fsm_state4;
wire   [15:0] tmp_48_fu_967_p3;
wire   [31:0] zext_ln97_fu_975_p1;
reg   [31:0] zext_ln97_reg_1214;
wire   [3:0] i_fu_988_p2;
reg   [3:0] i_reg_1222;
wire    ap_CS_fsm_state5;
reg   [0:0] tmp_49_reg_1227;
wire   [0:0] icmp_ln97_fu_983_p2;
wire   [15:0] tmp_50_fu_1002_p2;
reg   [15:0] tmp_50_reg_1232;
wire   [63:0] grp_fu_512_p2;
reg   [63:0] frac_reg_1242;
wire    ap_CS_fsm_state19;
wire   [63:0] frac_1_fu_1012_p3;
wire    ap_CS_fsm_state20;
wire   [63:0] grp_fu_525_p1;
reg   [63:0] y_assign_reg_1252;
wire    ap_CS_fsm_state27;
wire   [63:0] grp_fu_528_p1;
reg   [63:0] y_assign_1_reg_1257;
wire   [63:0] grp_pow_generic_double_s_fu_450_ap_return;
reg   [63:0] tmp_i_reg_1262;
wire    ap_CS_fsm_state209;
wire   [63:0] grp_pow_generic_double_s_fu_481_ap_return;
reg   [63:0] tmp_i1_reg_1267;
wire    grp_pow_generic_double_s_fu_450_ap_start;
wire    grp_pow_generic_double_s_fu_450_ap_done;
wire    grp_pow_generic_double_s_fu_450_ap_idle;
wire    grp_pow_generic_double_s_fu_450_ap_ready;
wire    grp_pow_generic_double_s_fu_481_ap_start;
wire    grp_pow_generic_double_s_fu_481_ap_done;
wire    grp_pow_generic_double_s_fu_481_ap_idle;
wire    grp_pow_generic_double_s_fu_481_ap_ready;
reg   [15:0] p_01_reg_162;
reg   [0:0] icmp_ln70_lcssa_reg_171;
reg   [15:0] tmp_0_lcssa_reg_218;
reg   [3:0] remaining_0_lcssa_reg_252;
reg   [3:0] regCount_0_lcssa_reg_311;
reg   [4:0] remaining_1_reg_370;
reg   [15:0] tmp_1_reg_379;
reg   [63:0] frac_0_reg_389;
reg   [63:0] bitVal_0_reg_401;
reg   [15:0] tmp_3_reg_413;
reg   [3:0] i_0_reg_422;
wire   [63:0] bitcast_ln108_1_fu_1028_p1;
reg   [63:0] ap_phi_mux_p_0_phi_fu_438_p8;
reg   [63:0] p_0_reg_433;
wire    ap_CS_fsm_state230;
reg    grp_pow_generic_double_s_fu_450_ap_start_reg;
reg   [229:0] ap_NS_fsm;
wire    ap_NS_fsm_state28;
wire    ap_CS_fsm_state28;
reg    grp_pow_generic_double_s_fu_481_ap_start_reg;
wire    ap_CS_fsm_state6;
reg   [63:0] grp_fu_518_p0;
reg   [63:0] grp_fu_518_p1;
wire    ap_CS_fsm_state210;
wire    ap_CS_fsm_state220;
wire  signed [31:0] grp_fu_525_p0;
wire   [14:0] trunc_ln60_fu_558_p1;
wire   [14:0] xor_ln60_fu_562_p2;
wire   [0:0] tmp_31_fu_598_p3;
wire   [0:0] tmp_fu_584_p3;
wire   [0:0] tmp_32_fu_618_p3;
wire   [0:0] tmp_34_fu_638_p3;
wire   [0:0] tmp_35_fu_658_p3;
wire   [0:0] tmp_36_fu_678_p3;
wire   [0:0] tmp_37_fu_698_p3;
wire   [0:0] tmp_38_fu_718_p3;
wire   [0:0] tmp_39_fu_738_p3;
wire   [0:0] tmp_40_fu_758_p3;
wire   [0:0] tmp_41_fu_778_p3;
wire   [0:0] tmp_42_fu_798_p3;
wire   [0:0] tmp_43_fu_818_p3;
wire   [0:0] tmp_44_fu_838_p3;
wire   [0:0] trunc_ln68_fu_572_p1;
wire   [15:0] shl_ln72_13_fu_852_p2;
wire   [3:0] add_ln78_fu_892_p2;
wire   [4:0] zext_ln78_1_fu_888_p1;
wire   [4:0] zext_ln78_2_fu_898_p1;
wire   [4:0] sub_ln78_fu_902_p2;
wire   [0:0] icmp_ln88_fu_927_p2;
wire   [0:0] tmp_46_fu_933_p3;
wire   [4:0] remaining_2_fu_947_p2;
wire   [15:0] tmp_47_fu_941_p2;
wire   [0:0] and_ln88_fu_953_p2;
wire   [4:0] zext_ln97_1_fu_979_p1;
wire   [63:0] bitcast_ln108_fu_1018_p1;
wire   [63:0] xor_ln108_fu_1022_p2;
reg   [63:0] ap_return_preg;
reg    ap_condition_2410;
reg    ap_condition_286;
reg    ap_condition_492;
reg    ap_condition_496;
reg    ap_condition_500;
reg    ap_condition_504;
reg    ap_condition_508;
reg    ap_condition_512;
reg    ap_condition_516;
reg    ap_condition_520;
reg    ap_condition_524;
reg    ap_condition_528;
reg    ap_condition_532;
reg    ap_condition_377;

// power-on initialization
initial begin
#0 ap_CS_fsm = 230'd1;
#0 grp_pow_generic_double_s_fu_450_ap_start_reg = 1'b0;
#0 grp_pow_generic_double_s_fu_481_ap_start_reg = 1'b0;
#0 ap_return_preg = 64'd0;
end

pow_generic_double_s grp_pow_generic_double_s_fu_450(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_450_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_450_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_450_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_450_ap_ready),
    .base_r(64'd4616189618054758400),
    .exp(y_assign_reg_1252),
    .ap_return(grp_pow_generic_double_s_fu_450_ap_return)
);

pow_generic_double_s grp_pow_generic_double_s_fu_481(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_pow_generic_double_s_fu_481_ap_start),
    .ap_done(grp_pow_generic_double_s_fu_481_ap_done),
    .ap_idle(grp_pow_generic_double_s_fu_481_ap_idle),
    .ap_ready(grp_pow_generic_double_s_fu_481_ap_ready),
    .base_r(64'd4611686018427387904),
    .exp(y_assign_1_reg_1257),
    .ap_return(grp_pow_generic_double_s_fu_481_ap_return)
);

fpgaconvnet_ip_da6jw #(
    .ID( 1 ),
    .NUM_STAGE( 14 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fpgaconvnet_ip_da6jw_U851(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(frac_0_reg_389),
    .din1(bitVal_0_reg_401),
    .ce(1'b1),
    .dout(grp_fu_512_p2)
);

fpgaconvnet_ip_dmeOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fpgaconvnet_ip_dmeOg_U852(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_518_p0),
    .din1(grp_fu_518_p1),
    .ce(1'b1),
    .dout(grp_fu_518_p2)
);

fpgaconvnet_ip_si7jG #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpgaconvnet_ip_si7jG_U853(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_525_p0),
    .ce(1'b1),
    .dout(grp_fu_525_p1)
);

fpgaconvnet_ip_sig8j #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpgaconvnet_ip_sig8j_U854(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(zext_ln97_reg_1214),
    .ce(1'b1),
    .dout(grp_fu_528_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state230)) begin
            ap_return_preg <= ap_phi_mux_p_0_phi_fu_438_p8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_450_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state28) & (1'b1 == ap_CS_fsm_state27))) begin
            grp_pow_generic_double_s_fu_450_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_450_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_450_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_pow_generic_double_s_fu_481_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state28) & (1'b1 == ap_CS_fsm_state27))) begin
            grp_pow_generic_double_s_fu_481_ap_start_reg <= 1'b1;
        end else if ((grp_pow_generic_double_s_fu_481_ap_ready == 1'b1)) begin
            grp_pow_generic_double_s_fu_481_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        bitVal_0_reg_401 <= reg_531;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        bitVal_0_reg_401 <= 64'd4602678819172646912;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        frac_0_reg_389 <= frac_1_fu_1012_p3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        frac_0_reg_389 <= 64'd4607182418800017408;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_0_reg_422 <= i_reg_1222;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_422 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((xor_ln70_12_fu_846_p2 == 1'd0) & (xor_ln70_11_fu_826_p2 == 1'd0) & (xor_ln70_10_fu_806_p2 == 1'd0) & (xor_ln70_9_fu_786_p2 == 1'd0) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln70_lcssa_reg_171 <= xor_ln70_13_fu_858_p2;
    end else if ((((xor_ln70_fu_606_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_1_fu_626_p2 == 1'd1) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_2_fu_646_p2 == 1'd1) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_3_fu_666_p2 == 1'd1) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_4_fu_686_p2 == 1'd1) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_5_fu_706_p2 == 1'd1) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_6_fu_726_p2 == 1'd1) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_7_fu_746_p2 == 1'd1) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_8_fu_766_p2 == 1'd1) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_9_fu_786_p2 == 1'd1) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_10_fu_806_p2 == 1'd1) & (xor_ln70_9_fu_786_p2 == 1'd0) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_11_fu_826_p2 == 1'd1) & (xor_ln70_10_fu_806_p2 == 1'd0) & (xor_ln70_9_fu_786_p2 == 1'd0) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((xor_ln70_12_fu_846_p2 == 1'd1) & (xor_ln70_11_fu_826_p2 == 1'd0) & (xor_ln70_10_fu_806_p2 == 1'd0) & (xor_ln70_9_fu_786_p2 == 1'd0) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        icmp_ln70_lcssa_reg_171 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_286)) begin
        if ((neg_fu_550_p3 == 1'd0)) begin
            p_01_reg_162 <= ui;
        end else if ((neg_fu_550_p3 == 1'd1)) begin
            p_01_reg_162 <= zext_ln60_fu_568_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_544_p2 == 1'd1) & (icmp_ln54_fu_538_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_433 <= 64'd9221120237041090560;
    end else if (((neg_reg_1046 == 1'd0) & (icmp_ln55_reg_1042 == 1'd0) & (icmp_ln54_reg_1038 == 1'd0) & (1'b1 == ap_CS_fsm_state230))) begin
        p_0_reg_433 <= reg_531;
    end else if (((icmp_ln54_fu_538_p2 == 1'd1) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0_reg_433 <= 64'd0;
    end else if (((neg_reg_1046 == 1'd1) & (icmp_ln55_reg_1042 == 1'd0) & (icmp_ln54_reg_1038 == 1'd0) & (1'b1 == ap_CS_fsm_state230))) begin
        p_0_reg_433 <= bitcast_ln108_1_fu_1028_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((1'b1 == ap_condition_377)) begin
            regCount_0_lcssa_reg_311 <= p_11_cast_cast_cast_fu_876_p3;
        end else if ((1'b1 == ap_condition_532)) begin
            regCount_0_lcssa_reg_311 <= 4'd13;
        end else if ((1'b1 == ap_condition_528)) begin
            regCount_0_lcssa_reg_311 <= 4'd12;
        end else if ((1'b1 == ap_condition_524)) begin
            regCount_0_lcssa_reg_311 <= 4'd11;
        end else if ((1'b1 == ap_condition_520)) begin
            regCount_0_lcssa_reg_311 <= 4'd10;
        end else if ((1'b1 == ap_condition_516)) begin
            regCount_0_lcssa_reg_311 <= 4'd9;
        end else if ((1'b1 == ap_condition_512)) begin
            regCount_0_lcssa_reg_311 <= 4'd8;
        end else if ((1'b1 == ap_condition_508)) begin
            regCount_0_lcssa_reg_311 <= 4'd7;
        end else if ((1'b1 == ap_condition_504)) begin
            regCount_0_lcssa_reg_311 <= 4'd6;
        end else if ((1'b1 == ap_condition_500)) begin
            regCount_0_lcssa_reg_311 <= 4'd5;
        end else if ((1'b1 == ap_condition_496)) begin
            regCount_0_lcssa_reg_311 <= 4'd4;
        end else if ((1'b1 == ap_condition_492)) begin
            regCount_0_lcssa_reg_311 <= 4'd3;
        end else if (((xor_ln70_1_fu_626_p2 == 1'd1) & (xor_ln70_fu_606_p2 == 1'd0))) begin
            regCount_0_lcssa_reg_311 <= 4'd2;
        end else if ((xor_ln70_fu_606_p2 == 1'd1)) begin
            regCount_0_lcssa_reg_311 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((1'b1 == ap_condition_377)) begin
            remaining_0_lcssa_reg_252 <= p_10_cast_fu_872_p1;
        end else if ((1'b1 == ap_condition_532)) begin
            remaining_0_lcssa_reg_252 <= 4'd2;
        end else if ((1'b1 == ap_condition_528)) begin
            remaining_0_lcssa_reg_252 <= 4'd3;
        end else if ((1'b1 == ap_condition_524)) begin
            remaining_0_lcssa_reg_252 <= 4'd4;
        end else if ((1'b1 == ap_condition_520)) begin
            remaining_0_lcssa_reg_252 <= 4'd5;
        end else if ((1'b1 == ap_condition_516)) begin
            remaining_0_lcssa_reg_252 <= 4'd6;
        end else if ((1'b1 == ap_condition_512)) begin
            remaining_0_lcssa_reg_252 <= 4'd7;
        end else if ((1'b1 == ap_condition_508)) begin
            remaining_0_lcssa_reg_252 <= 4'd8;
        end else if ((1'b1 == ap_condition_504)) begin
            remaining_0_lcssa_reg_252 <= 4'd9;
        end else if ((1'b1 == ap_condition_500)) begin
            remaining_0_lcssa_reg_252 <= 4'd10;
        end else if ((1'b1 == ap_condition_496)) begin
            remaining_0_lcssa_reg_252 <= 4'd11;
        end else if ((1'b1 == ap_condition_492)) begin
            remaining_0_lcssa_reg_252 <= 4'd12;
        end else if (((xor_ln70_1_fu_626_p2 == 1'd1) & (xor_ln70_fu_606_p2 == 1'd0))) begin
            remaining_0_lcssa_reg_252 <= 4'd13;
        end else if ((xor_ln70_fu_606_p2 == 1'd1)) begin
            remaining_0_lcssa_reg_252 <= 4'd14;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((ap_phi_mux_icmp_ln70_lcssa_phi_fu_175_p28 == 1'd0)) begin
            remaining_1_reg_370 <= zext_ln78_fu_884_p1;
        end else if ((ap_phi_mux_icmp_ln70_lcssa_phi_fu_175_p28 == 1'd1)) begin
            remaining_1_reg_370 <= remaining_fu_921_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        if ((1'b1 == ap_condition_377)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= p_tmp_4_13_fu_864_p3[15 : 2];
        end else if ((1'b1 == ap_condition_532)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_12_fu_832_p2[15 : 2];
        end else if ((1'b1 == ap_condition_528)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_11_fu_812_p2[15 : 2];
        end else if ((1'b1 == ap_condition_524)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_10_fu_792_p2[15 : 2];
        end else if ((1'b1 == ap_condition_520)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_9_fu_772_p2[15 : 2];
        end else if ((1'b1 == ap_condition_516)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_8_fu_752_p2[15 : 2];
        end else if ((1'b1 == ap_condition_512)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_7_fu_732_p2[15 : 2];
        end else if ((1'b1 == ap_condition_508)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_6_fu_712_p2[15 : 2];
        end else if ((1'b1 == ap_condition_504)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_5_fu_692_p2[15 : 2];
        end else if ((1'b1 == ap_condition_500)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_4_fu_672_p2[15 : 2];
        end else if ((1'b1 == ap_condition_496)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_3_fu_652_p2[15 : 2];
        end else if ((1'b1 == ap_condition_492)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_2_fu_632_p2[15 : 2];
        end else if (((xor_ln70_1_fu_626_p2 == 1'd1) & (xor_ln70_fu_606_p2 == 1'd0))) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_1_fu_612_p2[15 : 2];
        end else if ((xor_ln70_fu_606_p2 == 1'd1)) begin
                        tmp_0_lcssa_reg_218[15 : 2] <= shl_ln72_fu_592_p2[15 : 2];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((ap_phi_mux_icmp_ln70_lcssa_phi_fu_175_p28 == 1'd0)) begin
                        tmp_1_reg_379[15 : 2] <= tmp_0_lcssa_reg_218[15 : 2];
        end else if ((ap_phi_mux_icmp_ln70_lcssa_phi_fu_175_p28 == 1'd1)) begin
                        tmp_1_reg_379[15 : 2] <= tmp_45_fu_915_p2[15 : 2];
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
                tmp_3_reg_413[15 : 2] <= tmp_50_reg_1232[15 : 2];
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
                tmp_3_reg_413[15 : 2] <= tmp_48_fu_967_p3[15 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_49_reg_1227 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        frac_reg_1242 <= grp_fu_512_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_1222 <= i_fu_988_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln54_reg_1038 <= icmp_ln54_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_538_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        icmp_ln55_reg_1042 <= icmp_ln55_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        k_reg_1189 <= k_fu_908_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_544_p2 == 1'd0) & (icmp_ln54_fu_538_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        neg_reg_1046 <= ui[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        regSign_reg_1055 <= p_01_reg_162[32'd14];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state229) | (1'b1 == ap_CS_fsm_state219) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_531 <= grp_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        remaining_3_reg_1204 <= remaining_3_fu_959_p3;
        zext_ln97_reg_1214[0] <= zext_ln97_fu_975_p1[0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln97_fu_983_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_49_reg_1227 <= tmp_3_reg_413[32'd15];
        tmp_50_reg_1232[15 : 3] <= tmp_50_fu_1002_p2[15 : 3];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state209)) begin
        tmp_i1_reg_1267 <= grp_pow_generic_double_s_fu_481_ap_return;
        tmp_i_reg_1262 <= grp_pow_generic_double_s_fu_450_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        y_assign_1_reg_1257 <= grp_fu_528_p1;
        y_assign_reg_1252 <= grp_fu_525_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state230) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_2410)) begin
        if ((neg_reg_1046 == 1'd0)) begin
            ap_phi_mux_p_0_phi_fu_438_p8 = reg_531;
        end else if ((neg_reg_1046 == 1'd1)) begin
            ap_phi_mux_p_0_phi_fu_438_p8 = bitcast_ln108_1_fu_1028_p1;
        end else begin
            ap_phi_mux_p_0_phi_fu_438_p8 = p_0_reg_433;
        end
    end else begin
        ap_phi_mux_p_0_phi_fu_438_p8 = p_0_reg_433;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state230)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state230)) begin
        ap_return = ap_phi_mux_p_0_phi_fu_438_p8;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        grp_fu_518_p0 = reg_531;
    end else if ((1'b1 == ap_CS_fsm_state210)) begin
        grp_fu_518_p0 = tmp_i_reg_1262;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_518_p0 = bitVal_0_reg_401;
    end else begin
        grp_fu_518_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state220)) begin
        grp_fu_518_p1 = frac_0_reg_389;
    end else if ((1'b1 == ap_CS_fsm_state210)) begin
        grp_fu_518_p1 = tmp_i1_reg_1267;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_518_p1 = 64'd4602678819172646912;
    end else begin
        grp_fu_518_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln55_fu_544_p2 == 1'd0) & (icmp_ln54_fu_538_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1) & ((icmp_ln55_fu_544_p2 == 1'd1) | (icmp_ln54_fu_538_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state230;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln97_fu_983_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state169;
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            ap_NS_fsm = ap_ST_fsm_state171;
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            ap_NS_fsm = ap_ST_fsm_state174;
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            ap_NS_fsm = ap_ST_fsm_state178;
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            ap_NS_fsm = ap_ST_fsm_state180;
        end
        ap_ST_fsm_state180 : begin
            ap_NS_fsm = ap_ST_fsm_state181;
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln78_fu_892_p2 = ($signed(regCount_0_lcssa_reg_311) + $signed(4'd15));

assign and_ln88_fu_953_p2 = (tmp_46_fu_933_p3 & icmp_ln88_fu_927_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state209 = ap_CS_fsm[32'd208];

assign ap_CS_fsm_state210 = ap_CS_fsm[32'd209];

assign ap_CS_fsm_state219 = ap_CS_fsm[32'd218];

assign ap_CS_fsm_state220 = ap_CS_fsm[32'd219];

assign ap_CS_fsm_state229 = ap_CS_fsm[32'd228];

assign ap_CS_fsm_state230 = ap_CS_fsm[32'd229];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_NS_fsm_state28 = ap_NS_fsm[32'd27];

always @ (*) begin
    ap_condition_2410 = ((icmp_ln55_reg_1042 == 1'd0) & (icmp_ln54_reg_1038 == 1'd0) & (1'b1 == ap_CS_fsm_state230));
end

always @ (*) begin
    ap_condition_286 = ((icmp_ln55_fu_544_p2 == 1'd0) & (icmp_ln54_fu_538_p2 == 1'd0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1));
end

always @ (*) begin
    ap_condition_377 = ((xor_ln70_12_fu_846_p2 == 1'd0) & (xor_ln70_11_fu_826_p2 == 1'd0) & (xor_ln70_10_fu_806_p2 == 1'd0) & (xor_ln70_9_fu_786_p2 == 1'd0) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_492 = ((xor_ln70_2_fu_646_p2 == 1'd1) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_496 = ((xor_ln70_3_fu_666_p2 == 1'd1) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_500 = ((xor_ln70_4_fu_686_p2 == 1'd1) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_504 = ((xor_ln70_5_fu_706_p2 == 1'd1) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_508 = ((xor_ln70_6_fu_726_p2 == 1'd1) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_512 = ((xor_ln70_7_fu_746_p2 == 1'd1) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_516 = ((xor_ln70_8_fu_766_p2 == 1'd1) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_520 = ((xor_ln70_9_fu_786_p2 == 1'd1) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_524 = ((xor_ln70_10_fu_806_p2 == 1'd1) & (xor_ln70_9_fu_786_p2 == 1'd0) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_528 = ((xor_ln70_11_fu_826_p2 == 1'd1) & (xor_ln70_10_fu_806_p2 == 1'd0) & (xor_ln70_9_fu_786_p2 == 1'd0) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

always @ (*) begin
    ap_condition_532 = ((xor_ln70_12_fu_846_p2 == 1'd1) & (xor_ln70_11_fu_826_p2 == 1'd0) & (xor_ln70_10_fu_806_p2 == 1'd0) & (xor_ln70_9_fu_786_p2 == 1'd0) & (xor_ln70_8_fu_766_p2 == 1'd0) & (xor_ln70_7_fu_746_p2 == 1'd0) & (xor_ln70_6_fu_726_p2 == 1'd0) & (xor_ln70_5_fu_706_p2 == 1'd0) & (xor_ln70_4_fu_686_p2 == 1'd0) & (xor_ln70_3_fu_666_p2 == 1'd0) & (xor_ln70_2_fu_646_p2 == 1'd0) & (xor_ln70_1_fu_626_p2 == 1'd0) & (xor_ln70_fu_606_p2 == 1'd0));
end

assign ap_phi_mux_icmp_ln70_lcssa_phi_fu_175_p28 = icmp_ln70_lcssa_reg_171;

assign bitcast_ln108_1_fu_1028_p1 = xor_ln108_fu_1022_p2;

assign bitcast_ln108_fu_1018_p1 = reg_531;

assign frac_1_fu_1012_p3 = ((tmp_49_reg_1227[0:0] === 1'b1) ? frac_reg_1242 : frac_0_reg_389);

assign grp_fu_525_p0 = $signed(k_reg_1189);

assign grp_pow_generic_double_s_fu_450_ap_start = grp_pow_generic_double_s_fu_450_ap_start_reg;

assign grp_pow_generic_double_s_fu_481_ap_start = grp_pow_generic_double_s_fu_481_ap_start_reg;

assign i_fu_988_p2 = (i_0_reg_422 + 4'd1);

assign icmp_ln54_fu_538_p2 = ((ui == 16'd0) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_544_p2 = ((ui == 16'd32768) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_927_p2 = (($signed(remaining_1_reg_370) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_983_p2 = (($signed(zext_ln97_1_fu_979_p1) < $signed(remaining_3_reg_1204)) ? 1'b1 : 1'b0);

assign k_fu_908_p3 = ((regSign_reg_1055[0:0] === 1'b1) ? zext_ln78_2_fu_898_p1 : sub_ln78_fu_902_p2);

assign neg_fu_550_p3 = ui[32'd15];

assign p_10_cast_fu_872_p1 = xor_ln70_13_fu_858_p2;

assign p_11_cast_cast_cast_fu_876_p3 = ((xor_ln70_13_fu_858_p2[0:0] === 1'b1) ? 4'd14 : 4'd15);

assign p_tmp_4_13_fu_864_p3 = ((xor_ln70_13_fu_858_p2[0:0] === 1'b1) ? shl_ln72_13_fu_852_p2 : 16'd0);

assign remaining_2_fu_947_p2 = ($signed(5'd31) + $signed(remaining_1_reg_370));

assign remaining_3_fu_959_p3 = ((icmp_ln88_fu_927_p2[0:0] === 1'b1) ? remaining_2_fu_947_p2 : remaining_1_reg_370);

assign remaining_fu_921_p2 = ($signed(5'd31) + $signed(zext_ln78_fu_884_p1));

assign shl_ln72_10_fu_792_p2 = p_01_reg_162 << 16'd12;

assign shl_ln72_11_fu_812_p2 = p_01_reg_162 << 16'd13;

assign shl_ln72_12_fu_832_p2 = p_01_reg_162 << 16'd14;

assign shl_ln72_13_fu_852_p2 = p_01_reg_162 << 16'd15;

assign shl_ln72_1_fu_612_p2 = p_01_reg_162 << 16'd3;

assign shl_ln72_2_fu_632_p2 = p_01_reg_162 << 16'd4;

assign shl_ln72_3_fu_652_p2 = p_01_reg_162 << 16'd5;

assign shl_ln72_4_fu_672_p2 = p_01_reg_162 << 16'd6;

assign shl_ln72_5_fu_692_p2 = p_01_reg_162 << 16'd7;

assign shl_ln72_6_fu_712_p2 = p_01_reg_162 << 16'd8;

assign shl_ln72_7_fu_732_p2 = p_01_reg_162 << 16'd9;

assign shl_ln72_8_fu_752_p2 = p_01_reg_162 << 16'd10;

assign shl_ln72_9_fu_772_p2 = p_01_reg_162 << 16'd11;

assign shl_ln72_fu_592_p2 = p_01_reg_162 << 16'd2;

assign sub_ln78_fu_902_p2 = (5'd0 - zext_ln78_1_fu_888_p1);

assign tmp_31_fu_598_p3 = p_01_reg_162[32'd13];

assign tmp_32_fu_618_p3 = p_01_reg_162[32'd12];

assign tmp_34_fu_638_p3 = p_01_reg_162[32'd11];

assign tmp_35_fu_658_p3 = p_01_reg_162[32'd10];

assign tmp_36_fu_678_p3 = p_01_reg_162[32'd9];

assign tmp_37_fu_698_p3 = p_01_reg_162[32'd8];

assign tmp_38_fu_718_p3 = p_01_reg_162[32'd7];

assign tmp_39_fu_738_p3 = p_01_reg_162[32'd6];

assign tmp_40_fu_758_p3 = p_01_reg_162[32'd5];

assign tmp_41_fu_778_p3 = p_01_reg_162[32'd4];

assign tmp_42_fu_798_p3 = p_01_reg_162[32'd3];

assign tmp_43_fu_818_p3 = p_01_reg_162[32'd2];

assign tmp_44_fu_838_p3 = p_01_reg_162[32'd1];

assign tmp_45_fu_915_p2 = tmp_0_lcssa_reg_218 << 16'd1;

assign tmp_46_fu_933_p3 = tmp_1_reg_379[32'd15];

assign tmp_47_fu_941_p2 = tmp_1_reg_379 << 16'd1;

assign tmp_48_fu_967_p3 = ((icmp_ln88_fu_927_p2[0:0] === 1'b1) ? tmp_47_fu_941_p2 : tmp_1_reg_379);

assign tmp_50_fu_1002_p2 = tmp_3_reg_413 << 16'd1;

assign tmp_fu_584_p3 = p_01_reg_162[32'd14];

assign trunc_ln60_fu_558_p1 = ui[14:0];

assign trunc_ln68_fu_572_p1 = p_01_reg_162[0:0];

assign xor_ln108_fu_1022_p2 = (bitcast_ln108_fu_1018_p1 ^ 64'd9223372036854775808);

assign xor_ln60_fu_562_p2 = (trunc_ln60_fu_558_p1 ^ 15'd32767);

assign xor_ln70_10_fu_806_p2 = (tmp_fu_584_p3 ^ tmp_42_fu_798_p3);

assign xor_ln70_11_fu_826_p2 = (tmp_fu_584_p3 ^ tmp_43_fu_818_p3);

assign xor_ln70_12_fu_846_p2 = (tmp_fu_584_p3 ^ tmp_44_fu_838_p3);

assign xor_ln70_13_fu_858_p2 = (trunc_ln68_fu_572_p1 ^ tmp_fu_584_p3);

assign xor_ln70_1_fu_626_p2 = (tmp_fu_584_p3 ^ tmp_32_fu_618_p3);

assign xor_ln70_2_fu_646_p2 = (tmp_fu_584_p3 ^ tmp_34_fu_638_p3);

assign xor_ln70_3_fu_666_p2 = (tmp_fu_584_p3 ^ tmp_35_fu_658_p3);

assign xor_ln70_4_fu_686_p2 = (tmp_fu_584_p3 ^ tmp_36_fu_678_p3);

assign xor_ln70_5_fu_706_p2 = (tmp_fu_584_p3 ^ tmp_37_fu_698_p3);

assign xor_ln70_6_fu_726_p2 = (tmp_fu_584_p3 ^ tmp_38_fu_718_p3);

assign xor_ln70_7_fu_746_p2 = (tmp_fu_584_p3 ^ tmp_39_fu_738_p3);

assign xor_ln70_8_fu_766_p2 = (tmp_fu_584_p3 ^ tmp_40_fu_758_p3);

assign xor_ln70_9_fu_786_p2 = (tmp_fu_584_p3 ^ tmp_41_fu_778_p3);

assign xor_ln70_fu_606_p2 = (tmp_fu_584_p3 ^ tmp_31_fu_598_p3);

assign zext_ln60_fu_568_p1 = xor_ln60_fu_562_p2;

assign zext_ln78_1_fu_888_p1 = regCount_0_lcssa_reg_311;

assign zext_ln78_2_fu_898_p1 = add_ln78_fu_892_p2;

assign zext_ln78_fu_884_p1 = remaining_0_lcssa_reg_252;

assign zext_ln97_1_fu_979_p1 = i_0_reg_422;

assign zext_ln97_fu_975_p1 = and_ln88_fu_953_p2;

always @ (posedge ap_clk) begin
    zext_ln97_reg_1214[31:1] <= 31'b0000000000000000000000000000000;
    tmp_50_reg_1232[2:0] <= 3'b000;
    tmp_0_lcssa_reg_218[1:0] <= 2'b00;
    tmp_1_reg_379[1:0] <= 2'b00;
    tmp_3_reg_413[1:0] <= 2'b00;
end

endmodule //posit16_to_double
