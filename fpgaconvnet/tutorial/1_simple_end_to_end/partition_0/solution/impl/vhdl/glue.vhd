-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity glue is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_0_V_V_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    in_0_V_V_empty_n : IN STD_LOGIC;
    in_0_V_V_read : OUT STD_LOGIC;
    in_1_V_V_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    in_1_V_V_empty_n : IN STD_LOGIC;
    in_1_V_V_read : OUT STD_LOGIC;
    in_2_V_V_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    in_2_V_V_empty_n : IN STD_LOGIC;
    in_2_V_V_read : OUT STD_LOGIC;
    in_3_V_V_dout : IN STD_LOGIC_VECTOR (29 downto 0);
    in_3_V_V_empty_n : IN STD_LOGIC;
    in_3_V_V_read : OUT STD_LOGIC;
    out_0_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_0_V_V_full_n : IN STD_LOGIC;
    out_0_V_V_write : OUT STD_LOGIC;
    out_1_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_1_V_V_full_n : IN STD_LOGIC;
    out_1_V_V_write : OUT STD_LOGIC;
    out_2_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_2_V_V_full_n : IN STD_LOGIC;
    out_2_V_V_write : OUT STD_LOGIC;
    out_3_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_3_V_V_full_n : IN STD_LOGIC;
    out_3_V_V_write : OUT STD_LOGIC );
end;


architecture behav of glue is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_8FF : STD_LOGIC_VECTOR (11 downto 0) := "100011111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln64_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in_0_V_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in_1_V_V_blk_n : STD_LOGIC;
    signal in_2_V_V_blk_n : STD_LOGIC;
    signal in_3_V_V_blk_n : STD_LOGIC;
    signal out_0_V_V_blk_n : STD_LOGIC;
    signal out_1_V_V_blk_n : STD_LOGIC;
    signal out_2_V_V_blk_n : STD_LOGIC;
    signal out_3_V_V_blk_n : STD_LOGIC;
    signal pixel_index_01_reg_138 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln_reg_306 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_51_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_1_reg_316 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_52_reg_321 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_2_reg_326 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_53_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_3_reg_336 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_54_reg_341 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixel_index_fu_224_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal pixel_index_reg_346 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln64_reg_351 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_pixel_index_01_phi_fu_142_p6 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln415_fu_239_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln415_fu_236_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_144_fu_242_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_1_fu_256_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln415_2_fu_253_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_147_fu_259_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_2_fu_273_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln415_4_fu_270_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_150_fu_276_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln415_3_fu_290_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln415_6_fu_287_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_153_fu_293_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_102 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pixel_index_01_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln64_reg_351 = ap_const_lv1_0))) then 
                pixel_index_01_reg_138 <= pixel_index_reg_346;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_351 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                pixel_index_01_reg_138 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln64_reg_351 <= icmp_ln64_fu_230_p2;
                tmp_51_reg_311 <= in_0_V_V_dout(16 downto 16);
                tmp_52_reg_321 <= in_1_V_V_dout(16 downto 16);
                tmp_53_reg_331 <= in_2_V_V_dout(16 downto 16);
                tmp_54_reg_341 <= in_3_V_V_dout(16 downto 16);
                trunc_ln708_1_reg_316 <= in_1_V_V_dout(29 downto 17);
                trunc_ln708_2_reg_326 <= in_2_V_V_dout(29 downto 17);
                trunc_ln708_3_reg_336 <= in_3_V_V_dout(29 downto 17);
                trunc_ln_reg_306 <= in_0_V_V_dout(29 downto 17);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pixel_index_reg_346 <= pixel_index_fu_224_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, in_0_V_V_empty_n, in_1_V_V_empty_n, in_2_V_V_empty_n, in_3_V_V_empty_n, out_0_V_V_full_n, out_1_V_V_full_n, out_2_V_V_full_n, out_3_V_V_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((out_3_V_V_full_n = ap_const_logic_0) or (out_2_V_V_full_n = ap_const_logic_0) or (out_1_V_V_full_n = ap_const_logic_0) or (out_0_V_V_full_n = ap_const_logic_0))) or ((ap_start = ap_const_logic_1) and ((in_3_V_V_empty_n = ap_const_logic_0) or (in_2_V_V_empty_n = ap_const_logic_0) or (in_1_V_V_empty_n = ap_const_logic_0) or (in_0_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, in_0_V_V_empty_n, in_1_V_V_empty_n, in_2_V_V_empty_n, in_3_V_V_empty_n, out_0_V_V_full_n, out_1_V_V_full_n, out_2_V_V_full_n, out_3_V_V_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((out_3_V_V_full_n = ap_const_logic_0) or (out_2_V_V_full_n = ap_const_logic_0) or (out_1_V_V_full_n = ap_const_logic_0) or (out_0_V_V_full_n = ap_const_logic_0))) or ((ap_start = ap_const_logic_1) and ((in_3_V_V_empty_n = ap_const_logic_0) or (in_2_V_V_empty_n = ap_const_logic_0) or (in_1_V_V_empty_n = ap_const_logic_0) or (in_0_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, in_0_V_V_empty_n, in_1_V_V_empty_n, in_2_V_V_empty_n, in_3_V_V_empty_n, out_0_V_V_full_n, out_1_V_V_full_n, out_2_V_V_full_n, out_3_V_V_full_n, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((out_3_V_V_full_n = ap_const_logic_0) or (out_2_V_V_full_n = ap_const_logic_0) or (out_1_V_V_full_n = ap_const_logic_0) or (out_0_V_V_full_n = ap_const_logic_0))) or ((ap_start = ap_const_logic_1) and ((in_3_V_V_empty_n = ap_const_logic_0) or (in_2_V_V_empty_n = ap_const_logic_0) or (in_1_V_V_empty_n = ap_const_logic_0) or (in_0_V_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(in_0_V_V_empty_n, in_1_V_V_empty_n, in_2_V_V_empty_n, in_3_V_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((in_3_V_V_empty_n = ap_const_logic_0) or (in_2_V_V_empty_n = ap_const_logic_0) or (in_1_V_V_empty_n = ap_const_logic_0) or (in_0_V_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(out_0_V_V_full_n, out_1_V_V_full_n, out_2_V_V_full_n, out_3_V_V_full_n)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((out_3_V_V_full_n = ap_const_logic_0) or (out_2_V_V_full_n = ap_const_logic_0) or (out_1_V_V_full_n = ap_const_logic_0) or (out_0_V_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_102_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_102 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln64_reg_351)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_reg_351 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_pixel_index_01_phi_fu_142_p6_assign_proc : process(pixel_index_01_reg_138, pixel_index_reg_346, icmp_ln64_reg_351, ap_condition_102)
    begin
        if ((ap_const_boolean_1 = ap_condition_102)) then
            if ((icmp_ln64_reg_351 = ap_const_lv1_1)) then 
                ap_phi_mux_pixel_index_01_phi_fu_142_p6 <= ap_const_lv12_0;
            elsif ((icmp_ln64_reg_351 = ap_const_lv1_0)) then 
                ap_phi_mux_pixel_index_01_phi_fu_142_p6 <= pixel_index_reg_346;
            else 
                ap_phi_mux_pixel_index_01_phi_fu_142_p6 <= pixel_index_01_reg_138;
            end if;
        else 
            ap_phi_mux_pixel_index_01_phi_fu_142_p6 <= pixel_index_01_reg_138;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, icmp_ln64_fu_230_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln64_fu_230_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln64_fu_230_p2 <= "1" when (ap_phi_mux_pixel_index_01_phi_fu_142_p6 = ap_const_lv12_8FF) else "0";

    in_0_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, in_0_V_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_0_V_V_blk_n <= in_0_V_V_empty_n;
        else 
            in_0_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_0_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_0_V_V_read <= ap_const_logic_1;
        else 
            in_0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_1_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, in_1_V_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_1_V_V_blk_n <= in_1_V_V_empty_n;
        else 
            in_1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_1_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_1_V_V_read <= ap_const_logic_1;
        else 
            in_1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_2_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, in_2_V_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_2_V_V_blk_n <= in_2_V_V_empty_n;
        else 
            in_2_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_2_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_2_V_V_read <= ap_const_logic_1;
        else 
            in_2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    in_3_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, in_3_V_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_3_V_V_blk_n <= in_3_V_V_empty_n;
        else 
            in_3_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_3_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_3_V_V_read <= ap_const_logic_1;
        else 
            in_3_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_0_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, out_0_V_V_full_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_0_V_V_blk_n <= out_0_V_V_full_n;
        else 
            out_0_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_0_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_144_fu_242_p2),16));


    out_0_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_0_V_V_write <= ap_const_logic_1;
        else 
            out_0_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_1_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, out_1_V_V_full_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_1_V_V_blk_n <= out_1_V_V_full_n;
        else 
            out_1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_1_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_147_fu_259_p2),16));


    out_1_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_1_V_V_write <= ap_const_logic_1;
        else 
            out_1_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_2_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, out_2_V_V_full_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_2_V_V_blk_n <= out_2_V_V_full_n;
        else 
            out_2_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_2_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_150_fu_276_p2),16));


    out_2_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_2_V_V_write <= ap_const_logic_1;
        else 
            out_2_V_V_write <= ap_const_logic_0;
        end if; 
    end process;


    out_3_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, out_3_V_V_full_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_3_V_V_blk_n <= out_3_V_V_full_n;
        else 
            out_3_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

        out_3_V_V_din <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_153_fu_293_p2),16));


    out_3_V_V_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_3_V_V_write <= ap_const_logic_1;
        else 
            out_3_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    pixel_index_fu_224_p2 <= std_logic_vector(unsigned(ap_phi_mux_pixel_index_01_phi_fu_142_p6) + unsigned(ap_const_lv12_1));
        sext_ln415_2_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_1_reg_316),14));

        sext_ln415_4_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2_reg_326),14));

        sext_ln415_6_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_3_reg_336),14));

        sext_ln415_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_306),14));

    tmp_V_144_fu_242_p2 <= std_logic_vector(unsigned(zext_ln415_fu_239_p1) + unsigned(sext_ln415_fu_236_p1));
    tmp_V_147_fu_259_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_256_p1) + unsigned(sext_ln415_2_fu_253_p1));
    tmp_V_150_fu_276_p2 <= std_logic_vector(unsigned(zext_ln415_2_fu_273_p1) + unsigned(sext_ln415_4_fu_270_p1));
    tmp_V_153_fu_293_p2 <= std_logic_vector(unsigned(zext_ln415_3_fu_290_p1) + unsigned(sext_ln415_6_fu_287_p1));
    zext_ln415_1_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_52_reg_321),14));
    zext_ln415_2_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_reg_331),14));
    zext_ln415_3_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_reg_341),14));
    zext_ln415_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_51_reg_311),14));
end behav;
