-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of relu is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_23F : STD_LOGIC_VECTOR (9 downto 0) := "1000111111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv16_FFCB : STD_LOGIC_VECTOR (15 downto 0) := "1111111111001011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln49_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal icmp_ln885_reg_494 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln924_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op30_write_state3 : BOOLEAN;
    signal ap_predicate_op32_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter13 : BOOLEAN;
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_V_V_blk_n : STD_LOGIC;
    signal pixel_index_01_reg_136 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_V_132_reg_476 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter6_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter7_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter9_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter10_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter11_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_132_reg_476_pp0_iter12_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal pixel_index_fu_155_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal pixel_index_reg_485 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln49_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_reg_490_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_494_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_174_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_reg_498 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_6_fu_179_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_503_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_503_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_503_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_503_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_503_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_503_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_133_fu_186_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_133_reg_508 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_133_reg_508_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_133_reg_508_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal l_fu_210_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln893_fu_218_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_521 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_521_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_521_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_521_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_521_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_521_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln894_fu_222_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_526 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln894_fu_227_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln894_reg_533 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln894_reg_533_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln897_fu_235_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln897_reg_538 : STD_LOGIC_VECTOR (4 downto 0);
    signal lsb_index_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_549 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln897_1_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_reg_554 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln908_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_reg_564 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_333_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_569_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_584 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_584_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_352_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_reg_599 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_reg_604 : STD_LOGIC_VECTOR (62 downto 0);
    signal m_5_reg_604_pp0_iter8_reg : STD_LOGIC_VECTOR (62 downto 0);
    signal select_ln915_fu_402_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_reg_609 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln4_reg_614 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln915_fu_425_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_reg_619 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln924_1_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_625_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_625_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_625_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_635 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_635_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_635_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln924_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_phi_mux_pixel_index_01_phi_fu_140_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_150_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_192_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_7_fu_202_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln897_fu_231_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln897_fu_256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal lshr_ln897_fu_259_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_4_fu_265_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln897_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_296_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln899_fu_309_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_3_fu_314_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_352_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_360_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_369_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_420_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_435_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_438_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_8_fu_444_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln924_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_150_ce : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_352_ce : STD_LOGIC;
    signal grp_fu_360_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to12 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_290 : BOOLEAN;

    component fpgaconvnet_ip_dcfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fpgaconvnet_ip_ls9j0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fpgaconvnet_ip_shbak IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        OP : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    fpgaconvnet_ip_dcfYi_U2548 : component fpgaconvnet_ip_dcfYi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_150_p0,
        din1 => ap_const_lv64_0,
        ce => grp_fu_150_ce,
        opcode => ap_const_lv5_4,
        dout => grp_fu_150_p2);

    fpgaconvnet_ip_ls9j0_U2549 : component fpgaconvnet_ip_ls9j0
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_352_p0,
        din1 => add_ln908_reg_559,
        ce => grp_fu_352_ce,
        dout => grp_fu_352_p2);

    fpgaconvnet_ip_shbak_U2550 : component fpgaconvnet_ip_shbak
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        OP => 0,
        din0_WIDTH => 64,
        din1_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_360_p0,
        din1 => grp_fu_360_p1,
        ce => grp_fu_360_ce,
        dout => grp_fu_360_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    pixel_index_01_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_reg_490 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                pixel_index_01_reg_136 <= pixel_index_reg_485;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_reg_490 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                pixel_index_01_reg_136 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494_pp0_iter3_reg = ap_const_lv1_0))) then
                add_ln908_reg_559 <= add_ln908_fu_276_p2;
                icmp_ln897_1_reg_554 <= icmp_ln897_1_fu_270_p2;
                lsb_index_reg_543 <= lsb_index_fu_241_p2;
                sub_ln908_reg_564 <= sub_ln908_fu_281_p2;
                tmp_10_reg_549 <= lsb_index_fu_241_p2(31 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494_pp0_iter7_reg = ap_const_lv1_0))) then
                add_ln915_reg_619 <= add_ln915_fu_425_p2;
                icmp_ln924_1_reg_625 <= icmp_ln924_1_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494_pp0_iter11_reg = ap_const_lv1_0))) then
                and_ln924_reg_640 <= and_ln924_fu_470_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln49_reg_490 <= icmp_ln49_fu_161_p2;
                icmp_ln49_reg_490_pp0_iter1_reg <= icmp_ln49_reg_490;
                icmp_ln885_reg_494 <= icmp_ln885_fu_169_p2;
                tmp_V_132_reg_476 <= in_V_V_dout;
                tmp_V_132_reg_476_pp0_iter1_reg <= tmp_V_132_reg_476;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln49_reg_490_pp0_iter10_reg <= icmp_ln49_reg_490_pp0_iter9_reg;
                icmp_ln49_reg_490_pp0_iter11_reg <= icmp_ln49_reg_490_pp0_iter10_reg;
                icmp_ln49_reg_490_pp0_iter12_reg <= icmp_ln49_reg_490_pp0_iter11_reg;
                icmp_ln49_reg_490_pp0_iter2_reg <= icmp_ln49_reg_490_pp0_iter1_reg;
                icmp_ln49_reg_490_pp0_iter3_reg <= icmp_ln49_reg_490_pp0_iter2_reg;
                icmp_ln49_reg_490_pp0_iter4_reg <= icmp_ln49_reg_490_pp0_iter3_reg;
                icmp_ln49_reg_490_pp0_iter5_reg <= icmp_ln49_reg_490_pp0_iter4_reg;
                icmp_ln49_reg_490_pp0_iter6_reg <= icmp_ln49_reg_490_pp0_iter5_reg;
                icmp_ln49_reg_490_pp0_iter7_reg <= icmp_ln49_reg_490_pp0_iter6_reg;
                icmp_ln49_reg_490_pp0_iter8_reg <= icmp_ln49_reg_490_pp0_iter7_reg;
                icmp_ln49_reg_490_pp0_iter9_reg <= icmp_ln49_reg_490_pp0_iter8_reg;
                icmp_ln885_reg_494_pp0_iter10_reg <= icmp_ln885_reg_494_pp0_iter9_reg;
                icmp_ln885_reg_494_pp0_iter11_reg <= icmp_ln885_reg_494_pp0_iter10_reg;
                icmp_ln885_reg_494_pp0_iter12_reg <= icmp_ln885_reg_494_pp0_iter11_reg;
                icmp_ln885_reg_494_pp0_iter2_reg <= icmp_ln885_reg_494;
                icmp_ln885_reg_494_pp0_iter3_reg <= icmp_ln885_reg_494_pp0_iter2_reg;
                icmp_ln885_reg_494_pp0_iter4_reg <= icmp_ln885_reg_494_pp0_iter3_reg;
                icmp_ln885_reg_494_pp0_iter5_reg <= icmp_ln885_reg_494_pp0_iter4_reg;
                icmp_ln885_reg_494_pp0_iter6_reg <= icmp_ln885_reg_494_pp0_iter5_reg;
                icmp_ln885_reg_494_pp0_iter7_reg <= icmp_ln885_reg_494_pp0_iter6_reg;
                icmp_ln885_reg_494_pp0_iter8_reg <= icmp_ln885_reg_494_pp0_iter7_reg;
                icmp_ln885_reg_494_pp0_iter9_reg <= icmp_ln885_reg_494_pp0_iter8_reg;
                icmp_ln908_reg_584_pp0_iter6_reg <= icmp_ln908_reg_584;
                icmp_ln924_1_reg_625_pp0_iter10_reg <= icmp_ln924_1_reg_625_pp0_iter9_reg;
                icmp_ln924_1_reg_625_pp0_iter11_reg <= icmp_ln924_1_reg_625_pp0_iter10_reg;
                icmp_ln924_1_reg_625_pp0_iter9_reg <= icmp_ln924_1_reg_625;
                icmp_ln924_reg_635_pp0_iter10_reg <= icmp_ln924_reg_635;
                icmp_ln924_reg_635_pp0_iter11_reg <= icmp_ln924_reg_635_pp0_iter10_reg;
                m_5_reg_604_pp0_iter8_reg <= m_5_reg_604;
                    or_ln_reg_569_pp0_iter6_reg(0) <= or_ln_reg_569(0);
                p_Result_6_reg_503_pp0_iter3_reg <= p_Result_6_reg_503;
                p_Result_6_reg_503_pp0_iter4_reg <= p_Result_6_reg_503_pp0_iter3_reg;
                p_Result_6_reg_503_pp0_iter5_reg <= p_Result_6_reg_503_pp0_iter4_reg;
                p_Result_6_reg_503_pp0_iter6_reg <= p_Result_6_reg_503_pp0_iter5_reg;
                p_Result_6_reg_503_pp0_iter7_reg <= p_Result_6_reg_503_pp0_iter6_reg;
                p_Result_6_reg_503_pp0_iter8_reg <= p_Result_6_reg_503_pp0_iter7_reg;
                tmp_V_132_reg_476_pp0_iter10_reg <= tmp_V_132_reg_476_pp0_iter9_reg;
                tmp_V_132_reg_476_pp0_iter11_reg <= tmp_V_132_reg_476_pp0_iter10_reg;
                tmp_V_132_reg_476_pp0_iter12_reg <= tmp_V_132_reg_476_pp0_iter11_reg;
                tmp_V_132_reg_476_pp0_iter2_reg <= tmp_V_132_reg_476_pp0_iter1_reg;
                tmp_V_132_reg_476_pp0_iter3_reg <= tmp_V_132_reg_476_pp0_iter2_reg;
                tmp_V_132_reg_476_pp0_iter4_reg <= tmp_V_132_reg_476_pp0_iter3_reg;
                tmp_V_132_reg_476_pp0_iter5_reg <= tmp_V_132_reg_476_pp0_iter4_reg;
                tmp_V_132_reg_476_pp0_iter6_reg <= tmp_V_132_reg_476_pp0_iter5_reg;
                tmp_V_132_reg_476_pp0_iter7_reg <= tmp_V_132_reg_476_pp0_iter6_reg;
                tmp_V_132_reg_476_pp0_iter8_reg <= tmp_V_132_reg_476_pp0_iter7_reg;
                tmp_V_132_reg_476_pp0_iter9_reg <= tmp_V_132_reg_476_pp0_iter8_reg;
                tmp_V_133_reg_508_pp0_iter3_reg <= tmp_V_133_reg_508;
                tmp_V_133_reg_508_pp0_iter4_reg <= tmp_V_133_reg_508_pp0_iter3_reg;
                trunc_ln893_reg_521_pp0_iter3_reg <= trunc_ln893_reg_521;
                trunc_ln893_reg_521_pp0_iter4_reg <= trunc_ln893_reg_521_pp0_iter3_reg;
                trunc_ln893_reg_521_pp0_iter5_reg <= trunc_ln893_reg_521_pp0_iter4_reg;
                trunc_ln893_reg_521_pp0_iter6_reg <= trunc_ln893_reg_521_pp0_iter5_reg;
                trunc_ln893_reg_521_pp0_iter7_reg <= trunc_ln893_reg_521_pp0_iter6_reg;
                trunc_ln894_reg_533_pp0_iter4_reg <= trunc_ln894_reg_533;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494_pp0_iter4_reg = ap_const_lv1_0))) then
                icmp_ln908_reg_584 <= icmp_ln908_fu_347_p2;
                    or_ln_reg_569(0) <= or_ln_fu_333_p3(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494_pp0_iter8_reg = ap_const_lv1_0))) then
                icmp_ln924_reg_635 <= icmp_ln924_fu_461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494 = ap_const_lv1_0))) then
                l_reg_516 <= l_fu_210_p3;
                p_Result_6_reg_503 <= tmp_V_132_reg_476_pp0_iter1_reg(15 downto 15);
                tmp_V_133_reg_508 <= tmp_V_133_fu_186_p3;
                trunc_ln893_reg_521 <= trunc_ln893_fu_218_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494_pp0_iter5_reg = ap_const_lv1_0))) then
                lshr_ln908_reg_594 <= grp_fu_352_p2;
                shl_ln908_reg_599 <= grp_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494_pp0_iter6_reg = ap_const_lv1_0))) then
                m_5_reg_604 <= m_2_fu_378_p2(63 downto 1);
                    select_ln915_reg_609(0) <= select_ln915_fu_402_p3(0);
                trunc_ln4_reg_614 <= m_2_fu_378_p2(52 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                pixel_index_reg_485 <= pixel_index_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_reg_494_pp0_iter2_reg = ap_const_lv1_0))) then
                sub_ln894_reg_526 <= sub_ln894_fu_222_p2;
                sub_ln897_reg_538 <= sub_ln897_fu_235_p2;
                trunc_ln894_reg_533 <= trunc_ln894_fu_227_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln885_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_V_reg_498 <= tmp_V_fu_174_p2;
            end if;
        end if;
    end process;
    or_ln_reg_569(31 downto 1) <= "0000000000000000000000000000000";
    or_ln_reg_569_pp0_iter6_reg(31 downto 1) <= "0000000000000000000000000000000";
    select_ln915_reg_609(10 downto 1) <= "0111111111";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    a_fu_291_p2 <= (icmp_ln897_fu_286_p2 and icmp_ln897_1_reg_554);
    add_ln899_fu_309_p2 <= std_logic_vector(signed(ap_const_lv16_FFCB) + signed(trunc_ln894_reg_533_pp0_iter4_reg));
    add_ln908_fu_276_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_526));
    add_ln915_fu_425_p2 <= std_logic_vector(unsigned(sub_ln915_fu_420_p2) + unsigned(select_ln915_reg_609));
    and_ln899_fu_321_p2 <= (xor_ln899_fu_303_p2 and p_Result_3_fu_314_p3);
    and_ln924_fu_470_p2 <= (or_ln924_fu_466_p2 and grp_fu_150_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_start, in_V_V_empty_n, out_V_V_full_n, ap_predicate_op30_write_state3, ap_predicate_op32_write_state3, ap_enable_reg_pp0_iter13)
    begin
                ap_block_pp0_stage0_00001 <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)) or ((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op30_write_state3 = ap_const_boolean_1)))) or ((in_V_V_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, in_V_V_empty_n, out_V_V_full_n, ap_predicate_op30_write_state3, ap_predicate_op32_write_state3, ap_enable_reg_pp0_iter13)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)) or ((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op30_write_state3 = ap_const_boolean_1)))) or ((in_V_V_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, in_V_V_empty_n, out_V_V_full_n, ap_predicate_op30_write_state3, ap_predicate_op32_write_state3, ap_enable_reg_pp0_iter13)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)) or ((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op30_write_state3 = ap_const_boolean_1)))) or ((in_V_V_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, in_V_V_empty_n, out_V_V_full_n, ap_predicate_op30_write_state3, ap_predicate_op32_write_state3, ap_enable_reg_pp0_iter13)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)) or ((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op30_write_state3 = ap_const_boolean_1)))) or ((in_V_V_empty_n = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter0_assign_proc : process(in_V_V_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (in_V_V_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter13_assign_proc : process(out_V_V_full_n, ap_predicate_op30_write_state3, ap_predicate_op32_write_state3)
    begin
                ap_block_state3_pp0_stage0_iter13 <= (((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)) or ((out_V_V_full_n = ap_const_logic_0) and (ap_predicate_op30_write_state3 = ap_const_boolean_1)));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_290_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_290 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001, icmp_ln49_reg_490_pp0_iter12_reg)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_reg_490_pp0_iter12_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_0to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_pixel_index_01_phi_fu_140_p6_assign_proc : process(pixel_index_01_reg_136, pixel_index_reg_485, icmp_ln49_reg_490, ap_condition_290)
    begin
        if ((ap_const_boolean_1 = ap_condition_290)) then
            if ((icmp_ln49_reg_490 = ap_const_lv1_1)) then 
                ap_phi_mux_pixel_index_01_phi_fu_140_p6 <= ap_const_lv10_0;
            elsif ((icmp_ln49_reg_490 = ap_const_lv1_0)) then 
                ap_phi_mux_pixel_index_01_phi_fu_140_p6 <= pixel_index_reg_485;
            else 
                ap_phi_mux_pixel_index_01_phi_fu_140_p6 <= pixel_index_01_reg_136;
            end if;
        else 
            ap_phi_mux_pixel_index_01_phi_fu_140_p6 <= pixel_index_01_reg_136;
        end if; 
    end process;


    ap_predicate_op30_write_state3_assign_proc : process(icmp_ln885_reg_494_pp0_iter12_reg, and_ln924_reg_640)
    begin
                ap_predicate_op30_write_state3 <= ((icmp_ln885_reg_494_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln924_reg_640));
    end process;


    ap_predicate_op32_write_state3_assign_proc : process(icmp_ln885_reg_494_pp0_iter12_reg, and_ln924_reg_640)
    begin
                ap_predicate_op32_write_state3 <= ((ap_const_lv1_0 = and_ln924_reg_640) or (icmp_ln885_reg_494_pp0_iter12_reg = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_start, icmp_ln49_fu_161_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln49_fu_161_p2 = ap_const_lv1_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to12)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to12 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_150_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_150_ce <= ap_const_logic_1;
        else 
            grp_fu_150_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_150_p0 <= p_Result_8_fu_444_p5;

    grp_fu_352_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_352_ce <= ap_const_logic_1;
        else 
            grp_fu_352_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_352_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_133_reg_508_pp0_iter4_reg),32));

    grp_fu_360_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_360_ce <= ap_const_logic_1;
        else 
            grp_fu_360_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_360_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_133_reg_508_pp0_iter4_reg),64));
    grp_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_reg_564),64));
    icmp_ln49_fu_161_p2 <= "1" when (ap_phi_mux_pixel_index_01_phi_fu_140_p6 = ap_const_lv10_23F) else "0";
    icmp_ln885_fu_169_p2 <= "1" when (tmp_V_132_reg_476 = ap_const_lv16_0) else "0";
    icmp_ln897_1_fu_270_p2 <= "0" when (p_Result_4_fu_265_p2 = ap_const_lv16_0) else "1";
    icmp_ln897_fu_286_p2 <= "1" when (signed(tmp_10_reg_549) > signed(ap_const_lv31_0)) else "0";
    icmp_ln908_fu_347_p2 <= "1" when (signed(lsb_index_reg_543) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_1_fu_430_p2 <= "1" when (trunc_ln4_reg_614 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_461_p2 <= "0" when (add_ln915_reg_619 = ap_const_lv11_7FF) else "1";

    in_V_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, in_V_V_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_210_p3_proc : process(p_Result_7_fu_202_p3)
    begin
        l_fu_210_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_7_fu_202_p3(i) = '1' then
                l_fu_210_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_241_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_reg_526));
    lshr_ln897_fu_259_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv16_FFFF),to_integer(unsigned('0' & zext_ln897_fu_256_p1(16-1 downto 0)))));
    m_1_fu_369_p3 <= 
        zext_ln908_fu_366_p1 when (icmp_ln908_reg_584_pp0_iter6_reg(0) = '1') else 
        shl_ln908_reg_599;
    m_2_fu_378_p2 <= std_logic_vector(unsigned(zext_ln911_fu_375_p1) + unsigned(m_1_fu_369_p3));
    m_6_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_reg_604_pp0_iter8_reg),64));
    or_ln899_fu_327_p2 <= (and_ln899_fu_321_p2 or a_fu_291_p2);
    or_ln924_fu_466_p2 <= (icmp_ln924_reg_635_pp0_iter11_reg or icmp_ln924_1_reg_625_pp0_iter11_reg);
    or_ln_fu_333_p3 <= (ap_const_lv31_0 & or_ln899_fu_327_p2);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_predicate_op30_write_state3, ap_predicate_op32_write_state3, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_predicate_op30_write_state3 = ap_const_boolean_1)))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_V_V_din_assign_proc : process(ap_predicate_op30_write_state3, ap_predicate_op32_write_state3, ap_enable_reg_pp0_iter13, tmp_V_132_reg_476_pp0_iter12_reg, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then
            if ((ap_predicate_op32_write_state3 = ap_const_boolean_1)) then 
                out_V_V_din <= tmp_V_132_reg_476_pp0_iter12_reg;
            elsif ((ap_predicate_op30_write_state3 = ap_const_boolean_1)) then 
                out_V_V_din <= ap_const_lv16_0;
            else 
                out_V_V_din <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            out_V_V_din <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_V_V_write_assign_proc : process(ap_predicate_op30_write_state3, ap_predicate_op32_write_state3, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_predicate_op32_write_state3 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_predicate_op30_write_state3 = ap_const_boolean_1)))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_3_fu_314_p3 <= tmp_V_133_reg_508_pp0_iter4_reg(to_integer(unsigned(add_ln899_fu_309_p2)) downto to_integer(unsigned(add_ln899_fu_309_p2))) when (to_integer(unsigned(add_ln899_fu_309_p2))>= 0 and to_integer(unsigned(add_ln899_fu_309_p2))<=15) else "-";
    p_Result_4_fu_265_p2 <= (tmp_V_133_reg_508_pp0_iter3_reg and lshr_ln897_fu_259_p2);
    p_Result_6_fu_179_p3 <= tmp_V_132_reg_476_pp0_iter1_reg(15 downto 15);
    p_Result_7_fu_202_p3 <= (ap_const_lv16_FFFF & p_Result_s_fu_192_p4);
    p_Result_8_fu_444_p5 <= (tmp_2_fu_438_p3 & m_6_fu_435_p1(51 downto 0));
    
    p_Result_s_fu_192_p4_proc : process(tmp_V_133_fu_186_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable p_Result_s_fu_192_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_F(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_133_fu_186_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv32_F(4-1 downto 0)));
            for p_Result_s_fu_192_p4_i in 0 to 16-1 loop
                v0_cpy(p_Result_s_fu_192_p4_i) := tmp_V_133_fu_186_p3(16-1-p_Result_s_fu_192_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_192_p4 <= resvalue(16-1 downto 0);
    end process;

    pixel_index_fu_155_p2 <= std_logic_vector(unsigned(ap_phi_mux_pixel_index_01_phi_fu_140_p6) + unsigned(ap_const_lv10_1));
    select_ln915_fu_402_p3 <= 
        ap_const_lv11_3FF when (tmp_12_fu_394_p3(0) = '1') else 
        ap_const_lv11_3FE;
    sub_ln894_fu_222_p2 <= std_logic_vector(unsigned(ap_const_lv32_10) - unsigned(l_reg_516));
    sub_ln897_fu_235_p2 <= std_logic_vector(unsigned(ap_const_lv5_6) - unsigned(trunc_ln897_fu_231_p1));
    sub_ln908_fu_281_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_526));
    sub_ln915_fu_420_p2 <= std_logic_vector(unsigned(ap_const_lv11_8) - unsigned(trunc_ln893_reg_521_pp0_iter7_reg));
    tmp_11_fu_296_p3 <= lsb_index_reg_543(31 downto 31);
    tmp_12_fu_394_p3 <= m_2_fu_378_p2(54 downto 54);
    tmp_2_fu_438_p3 <= (p_Result_6_reg_503_pp0_iter8_reg & add_ln915_reg_619);
    tmp_V_133_fu_186_p3 <= 
        tmp_V_reg_498 when (p_Result_6_fu_179_p3(0) = '1') else 
        tmp_V_132_reg_476_pp0_iter1_reg;
    tmp_V_fu_174_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(tmp_V_132_reg_476));
    trunc_ln893_fu_218_p1 <= l_fu_210_p3(11 - 1 downto 0);
    trunc_ln894_fu_227_p1 <= sub_ln894_fu_222_p2(16 - 1 downto 0);
    trunc_ln897_fu_231_p1 <= sub_ln894_fu_222_p2(5 - 1 downto 0);
    xor_ln899_fu_303_p2 <= (tmp_11_fu_296_p3 xor ap_const_lv1_1);
    zext_ln897_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_reg_538),16));
    zext_ln908_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_reg_594),64));
    zext_ln911_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_569_pp0_iter6_reg),64));
end behav;
