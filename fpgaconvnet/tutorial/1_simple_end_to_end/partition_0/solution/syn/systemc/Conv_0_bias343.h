// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Conv_0_bias343_HH_
#define _Conv_0_bias343_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "bias511.h"

namespace ap_rtl {

struct Conv_0_bias343 : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > in_V_V6_dout;
    sc_in< sc_logic > in_V_V6_empty_n;
    sc_out< sc_logic > in_V_V6_read;
    sc_out< sc_lv<16> > out_V_V9_din;
    sc_in< sc_logic > out_V_V9_full_n;
    sc_out< sc_logic > out_V_V9_write;


    // Module declarations
    Conv_0_bias343(sc_module_name name);
    SC_HAS_PROCESS(Conv_0_bias343);

    ~Conv_0_bias343();

    sc_trace_file* mVcdFile;

    bias511* grp_bias511_fu_28;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > grp_bias511_fu_28_ap_start;
    sc_signal< sc_logic > grp_bias511_fu_28_ap_done;
    sc_signal< sc_logic > grp_bias511_fu_28_ap_idle;
    sc_signal< sc_logic > grp_bias511_fu_28_ap_ready;
    sc_signal< sc_logic > grp_bias511_fu_28_in_V_V_read;
    sc_signal< sc_lv<16> > grp_bias511_fu_28_out_V_V_din;
    sc_signal< sc_logic > grp_bias511_fu_28_out_V_V_write;
    sc_signal< sc_logic > grp_bias511_fu_28_ap_start_reg;
    sc_signal< bool > ap_block_state1_ignore_call3;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< bool > ap_block_state1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state1_ignore_call3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_bias511_fu_28_ap_start();
    void thread_in_V_V6_read();
    void thread_out_V_V9_din();
    void thread_out_V_V9_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
