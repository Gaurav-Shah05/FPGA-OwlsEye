// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "bias.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic bias::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic bias::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> bias::ap_ST_fsm_state1 = "1";
const sc_lv<2> bias::ap_ST_fsm_pp0_stage0 = "10";
const bool bias::ap_const_boolean_1 = true;
const sc_lv<32> bias::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> bias::ap_const_lv1_1 = "1";
const sc_lv<32> bias::ap_const_lv32_1 = "1";
const bool bias::ap_const_boolean_0 = false;
const sc_lv<1> bias::ap_const_lv1_0 = "0";
const sc_lv<12> bias::ap_const_lv12_0 = "000000000000";
const sc_lv<2> bias::ap_const_lv2_0 = "00";
const sc_lv<12> bias::ap_const_lv12_1 = "1";
const sc_lv<2> bias::ap_const_lv2_1 = "1";
const sc_lv<12> bias::ap_const_lv12_8FF = "100011111111";
const sc_lv<32> bias::ap_const_lv32_10 = "10000";
const sc_lv<17> bias::ap_const_lv17_0 = "00000000000000000";
const sc_lv<32> bias::ap_const_lv32_11 = "10001";
const sc_lv<32> bias::ap_const_lv32_20 = "100000";

bias::bias(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Conv_0_biases_V_0_U = new bias_Conv_0_biasebkl("Conv_0_biases_V_0_U");
    Conv_0_biases_V_0_U->clk(ap_clk);
    Conv_0_biases_V_0_U->reset(ap_rst);
    Conv_0_biases_V_0_U->address0(Conv_0_biases_V_0_address0);
    Conv_0_biases_V_0_U->ce0(Conv_0_biases_V_0_ce0);
    Conv_0_biases_V_0_U->q0(Conv_0_biases_V_0_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Conv_0_biases_V_0_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln61_fu_148_p1 );

    SC_METHOD(thread_Conv_0_biases_V_0_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_add_ln321_fu_159_p2);
    sensitive << ( ap_phi_mux_loops_0_05_phi_fu_138_p6 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter3);
    sensitive << ( out_V_V_full_n );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( in_V_V_empty_n );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_72);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( icmp_ln58_reg_231_pp0_iter2_reg );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_idle_pp0_0to2);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_phi_mux_i_06_phi_fu_124_p6);
    sensitive << ( i_06_reg_120 );
    sensitive << ( i_reg_221 );
    sensitive << ( icmp_ln58_reg_231 );
    sensitive << ( ap_condition_72 );

    SC_METHOD(thread_ap_phi_mux_loops_0_05_phi_fu_138_p6);
    sensitive << ( loops_0_05_reg_134 );
    sensitive << ( add_ln321_reg_226 );
    sensitive << ( icmp_ln58_reg_231 );
    sensitive << ( ap_condition_72 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( icmp_ln58_fu_165_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to2 );

    SC_METHOD(thread_i_fu_153_p2);
    sensitive << ( ap_phi_mux_i_06_phi_fu_124_p6 );

    SC_METHOD(thread_icmp_ln58_fu_165_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_06_phi_fu_124_p6 );

    SC_METHOD(thread_in_V_V_blk_n);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( in_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_in_V_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_lhs_V_fu_190_p3);
    sensitive << ( tmp_V_754_reg_235 );

    SC_METHOD(thread_out_V_V_blk_n);
    sensitive << ( out_V_V_full_n );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_out_V_V_din);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( p_Val2_129_reg_250 );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( zext_ln415_fu_171_p1 );

    SC_METHOD(thread_out_V_V_write);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ret_V_fu_200_p2);
    sensitive << ( sext_ln703_fu_197_p1 );
    sensitive << ( lhs_V_fu_190_p3 );

    SC_METHOD(thread_sext_ln703_fu_197_p1);
    sensitive << ( p_Val2_127_reg_240 );

    SC_METHOD(thread_tmp_402_fu_182_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( Conv_0_biases_V_0_q0 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_zext_ln415_fu_171_p1);
    sensitive << ( tmp_402_reg_245_pp0_iter2_reg );

    SC_METHOD(thread_zext_ln61_fu_148_p1);
    sensitive << ( ap_phi_mux_loops_0_05_phi_fu_138_p6 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "01";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "bias_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_V_V_dout, "(port)in_V_V_dout");
    sc_trace(mVcdFile, in_V_V_empty_n, "(port)in_V_V_empty_n");
    sc_trace(mVcdFile, in_V_V_read, "(port)in_V_V_read");
    sc_trace(mVcdFile, out_V_V_din, "(port)out_V_V_din");
    sc_trace(mVcdFile, out_V_V_full_n, "(port)out_V_V_full_n");
    sc_trace(mVcdFile, out_V_V_write, "(port)out_V_V_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, icmp_ln58_fu_165_p2, "icmp_ln58_fu_165_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter3, "ap_block_state3_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, Conv_0_biases_V_0_address0, "Conv_0_biases_V_0_address0");
    sc_trace(mVcdFile, Conv_0_biases_V_0_ce0, "Conv_0_biases_V_0_ce0");
    sc_trace(mVcdFile, Conv_0_biases_V_0_q0, "Conv_0_biases_V_0_q0");
    sc_trace(mVcdFile, in_V_V_blk_n, "in_V_V_blk_n");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, out_V_V_blk_n, "out_V_V_blk_n");
    sc_trace(mVcdFile, i_06_reg_120, "i_06_reg_120");
    sc_trace(mVcdFile, loops_0_05_reg_134, "loops_0_05_reg_134");
    sc_trace(mVcdFile, i_fu_153_p2, "i_fu_153_p2");
    sc_trace(mVcdFile, i_reg_221, "i_reg_221");
    sc_trace(mVcdFile, add_ln321_fu_159_p2, "add_ln321_fu_159_p2");
    sc_trace(mVcdFile, add_ln321_reg_226, "add_ln321_reg_226");
    sc_trace(mVcdFile, icmp_ln58_reg_231, "icmp_ln58_reg_231");
    sc_trace(mVcdFile, icmp_ln58_reg_231_pp0_iter1_reg, "icmp_ln58_reg_231_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln58_reg_231_pp0_iter2_reg, "icmp_ln58_reg_231_pp0_iter2_reg");
    sc_trace(mVcdFile, tmp_V_754_reg_235, "tmp_V_754_reg_235");
    sc_trace(mVcdFile, p_Val2_127_reg_240, "p_Val2_127_reg_240");
    sc_trace(mVcdFile, tmp_402_reg_245, "tmp_402_reg_245");
    sc_trace(mVcdFile, tmp_402_reg_245_pp0_iter2_reg, "tmp_402_reg_245_pp0_iter2_reg");
    sc_trace(mVcdFile, p_Val2_129_reg_250, "p_Val2_129_reg_250");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_phi_mux_i_06_phi_fu_124_p6, "ap_phi_mux_i_06_phi_fu_124_p6");
    sc_trace(mVcdFile, ap_phi_mux_loops_0_05_phi_fu_138_p6, "ap_phi_mux_loops_0_05_phi_fu_138_p6");
    sc_trace(mVcdFile, zext_ln61_fu_148_p1, "zext_ln61_fu_148_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, zext_ln415_fu_171_p1, "zext_ln415_fu_171_p1");
    sc_trace(mVcdFile, tmp_402_fu_182_p1, "tmp_402_fu_182_p1");
    sc_trace(mVcdFile, sext_ln703_fu_197_p1, "sext_ln703_fu_197_p1");
    sc_trace(mVcdFile, lhs_V_fu_190_p3, "lhs_V_fu_190_p3");
    sc_trace(mVcdFile, ret_V_fu_200_p2, "ret_V_fu_200_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to2, "ap_idle_pp0_0to2");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_72, "ap_condition_72");
#endif

    }
}

bias::~bias() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete Conv_0_biases_V_0_U;
}

void bias::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter3 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln58_reg_231.read(), ap_const_lv1_0))) {
        i_06_reg_120 = i_reg_221.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_reg_231.read())))) {
        i_06_reg_120 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(icmp_ln58_reg_231.read(), ap_const_lv1_0))) {
        loops_0_05_reg_134 = add_ln321_reg_226.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_reg_231.read())))) {
        loops_0_05_reg_134 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        add_ln321_reg_226 = add_ln321_fu_159_p2.read();
        i_reg_221 = i_fu_153_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln58_reg_231 = icmp_ln58_fu_165_p2.read();
        icmp_ln58_reg_231_pp0_iter1_reg = icmp_ln58_reg_231.read();
        p_Val2_127_reg_240 = Conv_0_biases_V_0_q0.read();
        tmp_402_reg_245 = tmp_402_fu_182_p1.read().range(16, 16);
        tmp_V_754_reg_235 = in_V_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln58_reg_231_pp0_iter2_reg = icmp_ln58_reg_231_pp0_iter1_reg.read();
        p_Val2_129_reg_250 = ret_V_fu_200_p2.read().range(32, 17);
        tmp_402_reg_245_pp0_iter2_reg = tmp_402_reg_245.read();
    }
}

void bias::thread_Conv_0_biases_V_0_address0() {
    Conv_0_biases_V_0_address0 =  (sc_lv<2>) (zext_ln61_fu_148_p1.read());
}

void bias::thread_Conv_0_biases_V_0_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        Conv_0_biases_V_0_ce0 = ap_const_logic_1;
    } else {
        Conv_0_biases_V_0_ce0 = ap_const_logic_0;
    }
}

void bias::thread_add_ln321_fu_159_p2() {
    add_ln321_fu_159_p2 = (!ap_phi_mux_loops_0_05_phi_fu_138_p6.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ap_phi_mux_loops_0_05_phi_fu_138_p6.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void bias::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void bias::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void bias::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void bias::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read())));
}

void bias::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read())));
}

void bias::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || (esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read())));
}

void bias::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void bias::thread_ap_block_state3_pp0_stage0_iter3() {
    ap_block_state3_pp0_stage0_iter3 = esl_seteq<1,1,1>(ap_const_logic_0, out_V_V_full_n.read());
}

void bias::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = esl_seteq<1,1,1>(ap_const_logic_0, in_V_V_empty_n.read());
}

void bias::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void bias::thread_ap_condition_72() {
    ap_condition_72 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0));
}

void bias::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_reg_231_pp0_iter2_reg.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void bias::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void bias::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void bias::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void bias::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void bias::thread_ap_idle_pp0_0to2() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0_0to2 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to2 = ap_const_logic_0;
    }
}

void bias::thread_ap_phi_mux_i_06_phi_fu_124_p6() {
    if (esl_seteq<1,1,1>(ap_condition_72.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_reg_231.read())) {
            ap_phi_mux_i_06_phi_fu_124_p6 = ap_const_lv12_0;
        } else if (esl_seteq<1,1,1>(icmp_ln58_reg_231.read(), ap_const_lv1_0)) {
            ap_phi_mux_i_06_phi_fu_124_p6 = i_reg_221.read();
        } else {
            ap_phi_mux_i_06_phi_fu_124_p6 = i_06_reg_120.read();
        }
    } else {
        ap_phi_mux_i_06_phi_fu_124_p6 = i_06_reg_120.read();
    }
}

void bias::thread_ap_phi_mux_loops_0_05_phi_fu_138_p6() {
    if (esl_seteq<1,1,1>(ap_condition_72.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln58_reg_231.read())) {
            ap_phi_mux_loops_0_05_phi_fu_138_p6 = ap_const_lv2_0;
        } else if (esl_seteq<1,1,1>(icmp_ln58_reg_231.read(), ap_const_lv1_0)) {
            ap_phi_mux_loops_0_05_phi_fu_138_p6 = add_ln321_reg_226.read();
        } else {
            ap_phi_mux_loops_0_05_phi_fu_138_p6 = loops_0_05_reg_134.read();
        }
    } else {
        ap_phi_mux_loops_0_05_phi_fu_138_p6 = loops_0_05_reg_134.read();
    }
}

void bias::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(icmp_ln58_fu_165_p2.read(), ap_const_lv1_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void bias::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to2.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void bias::thread_i_fu_153_p2() {
    i_fu_153_p2 = (!ap_phi_mux_i_06_phi_fu_124_p6.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(ap_phi_mux_i_06_phi_fu_124_p6.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void bias::thread_icmp_ln58_fu_165_p2() {
    icmp_ln58_fu_165_p2 = (!ap_phi_mux_i_06_phi_fu_124_p6.read().is_01() || !ap_const_lv12_8FF.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_06_phi_fu_124_p6.read() == ap_const_lv12_8FF);
}

void bias::thread_in_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        in_V_V_blk_n = in_V_V_empty_n.read();
    } else {
        in_V_V_blk_n = ap_const_logic_1;
    }
}

void bias::thread_in_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        in_V_V_read = ap_const_logic_1;
    } else {
        in_V_V_read = ap_const_logic_0;
    }
}

void bias::thread_lhs_V_fu_190_p3() {
    lhs_V_fu_190_p3 = esl_concat<16,17>(tmp_V_754_reg_235.read(), ap_const_lv17_0);
}

void bias::thread_out_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        out_V_V_blk_n = out_V_V_full_n.read();
    } else {
        out_V_V_blk_n = ap_const_logic_1;
    }
}

void bias::thread_out_V_V_din() {
    out_V_V_din = (!zext_ln415_fu_171_p1.read().is_01() || !p_Val2_129_reg_250.read().is_01())? sc_lv<16>(): (sc_biguint<16>(zext_ln415_fu_171_p1.read()) + sc_biguint<16>(p_Val2_129_reg_250.read()));
}

void bias::thread_out_V_V_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_V_V_write = ap_const_logic_1;
    } else {
        out_V_V_write = ap_const_logic_0;
    }
}

void bias::thread_ret_V_fu_200_p2() {
    ret_V_fu_200_p2 = (!sext_ln703_fu_197_p1.read().is_01() || !lhs_V_fu_190_p3.read().is_01())? sc_lv<33>(): (sc_bigint<33>(sext_ln703_fu_197_p1.read()) + sc_biguint<33>(lhs_V_fu_190_p3.read()));
}

void bias::thread_sext_ln703_fu_197_p1() {
    sext_ln703_fu_197_p1 = esl_sext<33,24>(p_Val2_127_reg_240.read());
}

void bias::thread_tmp_402_fu_182_p1() {
    tmp_402_fu_182_p1 = Conv_0_biases_V_0_q0.read();
}

void bias::thread_zext_ln415_fu_171_p1() {
    zext_ln415_fu_171_p1 = esl_zext<16,1>(tmp_402_reg_245_pp0_iter2_reg.read());
}

void bias::thread_zext_ln61_fu_148_p1() {
    zext_ln61_fu_148_p1 = esl_zext<64,2>(ap_phi_mux_loops_0_05_phi_fu_138_p6.read());
}

void bias::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (esl_seteq<1,1,1>(ap_reset_idle_pp0.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_reset_idle_pp0.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

