// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _bias512_HH_
#define _bias512_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "bias512_Conv_0_bibml.h"

namespace ap_rtl {

struct bias512 : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > in_V_V_dout;
    sc_in< sc_logic > in_V_V_empty_n;
    sc_out< sc_logic > in_V_V_read;
    sc_out< sc_lv<16> > out_V_V_din;
    sc_in< sc_logic > out_V_V_full_n;
    sc_out< sc_logic > out_V_V_write;


    // Module declarations
    bias512(sc_module_name name);
    SC_HAS_PROCESS(bias512);

    ~bias512();

    sc_trace_file* mVcdFile;

    bias512_Conv_0_bibml* Conv_0_biases_V_2_U;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln58_fu_165_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > Conv_0_biases_V_2_address0;
    sc_signal< sc_logic > Conv_0_biases_V_2_ce0;
    sc_signal< sc_lv<24> > Conv_0_biases_V_2_q0;
    sc_signal< sc_logic > in_V_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > out_V_V_blk_n;
    sc_signal< sc_lv<12> > i_06_reg_120;
    sc_signal< sc_lv<2> > loops_0_05_reg_134;
    sc_signal< sc_lv<12> > i_fu_153_p2;
    sc_signal< sc_lv<12> > i_reg_221;
    sc_signal< sc_lv<2> > add_ln321_fu_159_p2;
    sc_signal< sc_lv<2> > add_ln321_reg_226;
    sc_signal< sc_lv<1> > icmp_ln58_reg_231;
    sc_signal< sc_lv<1> > icmp_ln58_reg_231_pp0_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln58_reg_231_pp0_iter2_reg;
    sc_signal< sc_lv<16> > tmp_V_752_reg_235;
    sc_signal< sc_lv<24> > p_Val2_119_reg_240;
    sc_signal< sc_lv<1> > tmp_400_reg_245;
    sc_signal< sc_lv<1> > tmp_400_reg_245_pp0_iter2_reg;
    sc_signal< sc_lv<16> > p_Val2_121_reg_250;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<12> > ap_phi_mux_i_06_phi_fu_124_p6;
    sc_signal< sc_lv<2> > ap_phi_mux_loops_0_05_phi_fu_138_p6;
    sc_signal< sc_lv<64> > zext_ln61_fu_148_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<16> > zext_ln415_fu_171_p1;
    sc_signal< sc_lv<24> > tmp_400_fu_182_p1;
    sc_signal< sc_lv<33> > sext_ln703_fu_197_p1;
    sc_signal< sc_lv<33> > lhs_V_fu_190_p3;
    sc_signal< sc_lv<33> > ret_V_fu_200_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to2;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_72;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<12> ap_const_lv12_8FF;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<17> ap_const_lv17_0;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_20;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Conv_0_biases_V_2_address0();
    void thread_Conv_0_biases_V_2_ce0();
    void thread_add_ln321_fu_159_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter3();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_condition_72();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to2();
    void thread_ap_phi_mux_i_06_phi_fu_124_p6();
    void thread_ap_phi_mux_loops_0_05_phi_fu_138_p6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_i_fu_153_p2();
    void thread_icmp_ln58_fu_165_p2();
    void thread_in_V_V_blk_n();
    void thread_in_V_V_read();
    void thread_lhs_V_fu_190_p3();
    void thread_out_V_V_blk_n();
    void thread_out_V_V_din();
    void thread_out_V_V_write();
    void thread_ret_V_fu_200_p2();
    void thread_sext_ln703_fu_197_p1();
    void thread_tmp_400_fu_182_p1();
    void thread_zext_ln415_fu_171_p1();
    void thread_zext_ln61_fu_148_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
