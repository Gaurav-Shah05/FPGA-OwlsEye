// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _glue_HH_
#define _glue_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct glue : public sc_module {
    // Port declarations 30
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<30> > in_0_V_V_dout;
    sc_in< sc_logic > in_0_V_V_empty_n;
    sc_out< sc_logic > in_0_V_V_read;
    sc_in< sc_lv<30> > in_1_V_V_dout;
    sc_in< sc_logic > in_1_V_V_empty_n;
    sc_out< sc_logic > in_1_V_V_read;
    sc_in< sc_lv<30> > in_2_V_V_dout;
    sc_in< sc_logic > in_2_V_V_empty_n;
    sc_out< sc_logic > in_2_V_V_read;
    sc_in< sc_lv<30> > in_3_V_V_dout;
    sc_in< sc_logic > in_3_V_V_empty_n;
    sc_out< sc_logic > in_3_V_V_read;
    sc_out< sc_lv<16> > out_0_V_V_din;
    sc_in< sc_logic > out_0_V_V_full_n;
    sc_out< sc_logic > out_0_V_V_write;
    sc_out< sc_lv<16> > out_1_V_V_din;
    sc_in< sc_logic > out_1_V_V_full_n;
    sc_out< sc_logic > out_1_V_V_write;
    sc_out< sc_lv<16> > out_2_V_V_din;
    sc_in< sc_logic > out_2_V_V_full_n;
    sc_out< sc_logic > out_2_V_V_write;
    sc_out< sc_lv<16> > out_3_V_V_din;
    sc_in< sc_logic > out_3_V_V_full_n;
    sc_out< sc_logic > out_3_V_V_write;


    // Module declarations
    glue(sc_module_name name);
    SC_HAS_PROCESS(glue);

    ~glue();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<1> > icmp_ln64_fu_230_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > in_0_V_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > in_1_V_V_blk_n;
    sc_signal< sc_logic > in_2_V_V_blk_n;
    sc_signal< sc_logic > in_3_V_V_blk_n;
    sc_signal< sc_logic > out_0_V_V_blk_n;
    sc_signal< sc_logic > out_1_V_V_blk_n;
    sc_signal< sc_logic > out_2_V_V_blk_n;
    sc_signal< sc_logic > out_3_V_V_blk_n;
    sc_signal< sc_lv<12> > pixel_index_01_reg_138;
    sc_signal< sc_lv<13> > trunc_ln_reg_306;
    sc_signal< sc_lv<1> > tmp_51_reg_311;
    sc_signal< sc_lv<13> > trunc_ln708_1_reg_316;
    sc_signal< sc_lv<1> > tmp_52_reg_321;
    sc_signal< sc_lv<13> > trunc_ln708_2_reg_326;
    sc_signal< sc_lv<1> > tmp_53_reg_331;
    sc_signal< sc_lv<13> > trunc_ln708_3_reg_336;
    sc_signal< sc_lv<1> > tmp_54_reg_341;
    sc_signal< sc_lv<12> > pixel_index_fu_224_p2;
    sc_signal< sc_lv<12> > pixel_index_reg_346;
    sc_signal< sc_lv<1> > icmp_ln64_reg_351;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<12> > ap_phi_mux_pixel_index_01_phi_fu_142_p6;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<14> > zext_ln415_fu_239_p1;
    sc_signal< sc_lv<14> > sext_ln415_fu_236_p1;
    sc_signal< sc_lv<14> > tmp_V_144_fu_242_p2;
    sc_signal< sc_lv<14> > zext_ln415_1_fu_256_p1;
    sc_signal< sc_lv<14> > sext_ln415_2_fu_253_p1;
    sc_signal< sc_lv<14> > tmp_V_147_fu_259_p2;
    sc_signal< sc_lv<14> > zext_ln415_2_fu_273_p1;
    sc_signal< sc_lv<14> > sext_ln415_4_fu_270_p1;
    sc_signal< sc_lv<14> > tmp_V_150_fu_276_p2;
    sc_signal< sc_lv<14> > zext_ln415_3_fu_290_p1;
    sc_signal< sc_lv<14> > sext_ln415_6_fu_287_p1;
    sc_signal< sc_lv<14> > tmp_V_153_fu_293_p2;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_102;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_1D;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<12> ap_const_lv12_8FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_102();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_phi_mux_pixel_index_01_phi_fu_142_p6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_icmp_ln64_fu_230_p2();
    void thread_in_0_V_V_blk_n();
    void thread_in_0_V_V_read();
    void thread_in_1_V_V_blk_n();
    void thread_in_1_V_V_read();
    void thread_in_2_V_V_blk_n();
    void thread_in_2_V_V_read();
    void thread_in_3_V_V_blk_n();
    void thread_in_3_V_V_read();
    void thread_out_0_V_V_blk_n();
    void thread_out_0_V_V_din();
    void thread_out_0_V_V_write();
    void thread_out_1_V_V_blk_n();
    void thread_out_1_V_V_din();
    void thread_out_1_V_V_write();
    void thread_out_2_V_V_blk_n();
    void thread_out_2_V_V_din();
    void thread_out_2_V_V_write();
    void thread_out_3_V_V_blk_n();
    void thread_out_3_V_V_din();
    void thread_out_3_V_V_write();
    void thread_pixel_index_fu_224_p2();
    void thread_sext_ln415_2_fu_253_p1();
    void thread_sext_ln415_4_fu_270_p1();
    void thread_sext_ln415_6_fu_287_p1();
    void thread_sext_ln415_fu_236_p1();
    void thread_tmp_V_144_fu_242_p2();
    void thread_tmp_V_147_fu_259_p2();
    void thread_tmp_V_150_fu_276_p2();
    void thread_tmp_V_153_fu_293_p2();
    void thread_zext_ln415_1_fu_256_p1();
    void thread_zext_ln415_2_fu_273_p1();
    void thread_zext_ln415_3_fu_290_p1();
    void thread_zext_ln415_fu_239_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
