// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mem_read_HH_
#define _mem_read_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mem_read : public sc_module {
    // Port declarations 59
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_out< sc_logic > m_axi_wr_hw_V_AWVALID;
    sc_in< sc_logic > m_axi_wr_hw_V_AWREADY;
    sc_out< sc_lv<32> > m_axi_wr_hw_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_wr_hw_V_AWID;
    sc_out< sc_lv<32> > m_axi_wr_hw_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_wr_hw_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_wr_hw_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_wr_hw_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_wr_hw_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_wr_hw_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_wr_hw_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_wr_hw_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_wr_hw_V_AWUSER;
    sc_out< sc_logic > m_axi_wr_hw_V_WVALID;
    sc_in< sc_logic > m_axi_wr_hw_V_WREADY;
    sc_out< sc_lv<64> > m_axi_wr_hw_V_WDATA;
    sc_out< sc_lv<8> > m_axi_wr_hw_V_WSTRB;
    sc_out< sc_logic > m_axi_wr_hw_V_WLAST;
    sc_out< sc_lv<1> > m_axi_wr_hw_V_WID;
    sc_out< sc_lv<1> > m_axi_wr_hw_V_WUSER;
    sc_out< sc_logic > m_axi_wr_hw_V_ARVALID;
    sc_in< sc_logic > m_axi_wr_hw_V_ARREADY;
    sc_out< sc_lv<32> > m_axi_wr_hw_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_wr_hw_V_ARID;
    sc_out< sc_lv<32> > m_axi_wr_hw_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_wr_hw_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_wr_hw_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_wr_hw_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_wr_hw_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_wr_hw_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_wr_hw_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_wr_hw_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_wr_hw_V_ARUSER;
    sc_in< sc_logic > m_axi_wr_hw_V_RVALID;
    sc_out< sc_logic > m_axi_wr_hw_V_RREADY;
    sc_in< sc_lv<64> > m_axi_wr_hw_V_RDATA;
    sc_in< sc_logic > m_axi_wr_hw_V_RLAST;
    sc_in< sc_lv<1> > m_axi_wr_hw_V_RID;
    sc_in< sc_lv<1> > m_axi_wr_hw_V_RUSER;
    sc_in< sc_lv<2> > m_axi_wr_hw_V_RRESP;
    sc_in< sc_logic > m_axi_wr_hw_V_BVALID;
    sc_out< sc_logic > m_axi_wr_hw_V_BREADY;
    sc_in< sc_lv<2> > m_axi_wr_hw_V_BRESP;
    sc_in< sc_lv<1> > m_axi_wr_hw_V_BID;
    sc_in< sc_lv<1> > m_axi_wr_hw_V_BUSER;
    sc_in< sc_lv<29> > wr_hw_V_offset;
    sc_out< sc_lv<16> > wr_0_V_V_din;
    sc_in< sc_logic > wr_0_V_V_full_n;
    sc_out< sc_logic > wr_0_V_V_write;


    // Module declarations
    mem_read(sc_module_name name);
    SC_HAS_PROCESS(mem_read);

    ~mem_read();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<9> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > wr_hw_V_blk_n_AR;
    sc_signal< sc_logic > wr_hw_V_blk_n_R;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln59_reg_135;
    sc_signal< sc_logic > wr_0_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<1> > icmp_ln59_reg_135_pp0_iter1_reg;
    sc_signal< sc_lv<9> > size_index_0_i_reg_91;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln59_fu_113_p2;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<9> > size_index_fu_119_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<16> > p_Result_s_fu_125_p1;
    sc_signal< sc_lv<16> > p_Result_s_reg_144;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state8;
    sc_signal< sc_lv<64> > zext_ln327_fu_102_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<9> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<9> ap_ST_fsm_state1;
    static const sc_lv<9> ap_ST_fsm_state2;
    static const sc_lv<9> ap_ST_fsm_state3;
    static const sc_lv<9> ap_ST_fsm_state4;
    static const sc_lv<9> ap_ST_fsm_state5;
    static const sc_lv<9> ap_ST_fsm_state6;
    static const sc_lv<9> ap_ST_fsm_state7;
    static const sc_lv<9> ap_ST_fsm_pp0_stage0;
    static const sc_lv<9> ap_ST_fsm_state11;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_190;
    static const sc_lv<9> ap_const_lv9_190;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_8;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter2();
    void thread_ap_block_state8_pp0_stage0_iter0();
    void thread_ap_block_state9_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state8();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_icmp_ln59_fu_113_p2();
    void thread_internal_ap_ready();
    void thread_m_axi_wr_hw_V_ARADDR();
    void thread_m_axi_wr_hw_V_ARBURST();
    void thread_m_axi_wr_hw_V_ARCACHE();
    void thread_m_axi_wr_hw_V_ARID();
    void thread_m_axi_wr_hw_V_ARLEN();
    void thread_m_axi_wr_hw_V_ARLOCK();
    void thread_m_axi_wr_hw_V_ARPROT();
    void thread_m_axi_wr_hw_V_ARQOS();
    void thread_m_axi_wr_hw_V_ARREGION();
    void thread_m_axi_wr_hw_V_ARSIZE();
    void thread_m_axi_wr_hw_V_ARUSER();
    void thread_m_axi_wr_hw_V_ARVALID();
    void thread_m_axi_wr_hw_V_AWADDR();
    void thread_m_axi_wr_hw_V_AWBURST();
    void thread_m_axi_wr_hw_V_AWCACHE();
    void thread_m_axi_wr_hw_V_AWID();
    void thread_m_axi_wr_hw_V_AWLEN();
    void thread_m_axi_wr_hw_V_AWLOCK();
    void thread_m_axi_wr_hw_V_AWPROT();
    void thread_m_axi_wr_hw_V_AWQOS();
    void thread_m_axi_wr_hw_V_AWREGION();
    void thread_m_axi_wr_hw_V_AWSIZE();
    void thread_m_axi_wr_hw_V_AWUSER();
    void thread_m_axi_wr_hw_V_AWVALID();
    void thread_m_axi_wr_hw_V_BREADY();
    void thread_m_axi_wr_hw_V_RREADY();
    void thread_m_axi_wr_hw_V_WDATA();
    void thread_m_axi_wr_hw_V_WID();
    void thread_m_axi_wr_hw_V_WLAST();
    void thread_m_axi_wr_hw_V_WSTRB();
    void thread_m_axi_wr_hw_V_WUSER();
    void thread_m_axi_wr_hw_V_WVALID();
    void thread_p_Result_s_fu_125_p1();
    void thread_real_start();
    void thread_size_index_fu_119_p2();
    void thread_start_out();
    void thread_start_write();
    void thread_wr_0_V_V_blk_n();
    void thread_wr_0_V_V_din();
    void thread_wr_0_V_V_write();
    void thread_wr_hw_V_blk_n_AR();
    void thread_wr_hw_V_blk_n_R();
    void thread_zext_ln327_fu_102_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
