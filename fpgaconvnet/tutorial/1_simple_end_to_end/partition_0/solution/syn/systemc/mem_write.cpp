// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mem_write.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mem_write::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mem_write::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> mem_write::ap_ST_fsm_state1 = "1";
const sc_lv<3> mem_write::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> mem_write::ap_ST_fsm_state11 = "100";
const sc_lv<32> mem_write::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool mem_write::ap_const_boolean_1 = true;
const sc_lv<1> mem_write::ap_const_lv1_0 = "0";
const sc_lv<3> mem_write::ap_const_lv3_0 = "000";
const sc_lv<2> mem_write::ap_const_lv2_0 = "00";
const sc_lv<4> mem_write::ap_const_lv4_0 = "0000";
const bool mem_write::ap_const_boolean_0 = false;
const sc_lv<32> mem_write::ap_const_lv32_1 = "1";
const sc_lv<1> mem_write::ap_const_lv1_1 = "1";
const sc_lv<10> mem_write::ap_const_lv10_0 = "0000000000";
const sc_lv<12> mem_write::ap_const_lv12_0 = "000000000000";
const sc_lv<8> mem_write::ap_const_lv8_FF = "11111111";
const sc_lv<12> mem_write::ap_const_lv12_900 = "100100000000";
const sc_lv<2> mem_write::ap_const_lv2_1 = "1";
const sc_lv<12> mem_write::ap_const_lv12_1 = "1";
const sc_lv<2> mem_write::ap_const_lv2_3 = "11";
const sc_lv<10> mem_write::ap_const_lv10_23E = "1000111110";
const sc_lv<10> mem_write::ap_const_lv10_1 = "1";
const sc_lv<32> mem_write::ap_const_lv32_2 = "10";

mem_write::mem_write(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln332_fu_267_p2);
    sensitive << ( zext_ln68_reg_306 );
    sensitive << ( sext_ln87_fu_264_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( out_0_V_V_empty_n );
    sensitive << ( out_1_V_V_empty_n );
    sensitive << ( out_2_V_V_empty_n );
    sensitive << ( out_3_V_V_empty_n );
    sensitive << ( m_axi_out_hw_V_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter7_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( out_0_V_V_empty_n );
    sensitive << ( out_1_V_V_empty_n );
    sensitive << ( out_2_V_V_empty_n );
    sensitive << ( out_3_V_V_empty_n );
    sensitive << ( m_axi_out_hw_V_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter7_reg );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( out_0_V_V_empty_n );
    sensitive << ( out_1_V_V_empty_n );
    sensitive << ( out_2_V_V_empty_n );
    sensitive << ( out_3_V_V_empty_n );
    sensitive << ( m_axi_out_hw_V_BVALID );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter7_reg );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( weights_reloading_in_3_empty_n );
    sensitive << ( out_hw_V_offset_empty_n );

    SC_METHOD(thread_ap_block_state10_pp0_stage0_iter8);
    sensitive << ( m_axi_out_hw_V_BVALID );
    sensitive << ( icmp_ln68_reg_311_pp0_iter7_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( m_axi_out_hw_V_AWREADY );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);
    sensitive << ( out_0_V_V_empty_n );
    sensitive << ( out_1_V_V_empty_n );
    sensitive << ( out_2_V_V_empty_n );
    sensitive << ( out_3_V_V_empty_n );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( m_axi_out_hw_V_WREADY );
    sensitive << ( icmp_ln68_reg_311_pp0_iter2_reg );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);

    SC_METHOD(thread_ap_block_state8_pp0_stage0_iter6);

    SC_METHOD(thread_ap_block_state9_pp0_stage0_iter7);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln68_fu_195_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter6 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_empty_221_fu_207_p1);
    sensitive << ( loops_1_0_i_i_i_reg_154 );

    SC_METHOD(thread_empty_fu_187_p1);
    sensitive << ( weights_reloading_in_3_dout );

    SC_METHOD(thread_i_fu_224_p2);
    sensitive << ( i_0_i_i_i_reg_176 );

    SC_METHOD(thread_icmp_ln68_fu_195_p2);
    sensitive << ( i_0_i_i_i_reg_176 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln891_4_fu_236_p2);
    sensitive << ( loops_1_0_i_i_i_reg_154 );
    sensitive << ( icmp_ln68_fu_195_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_icmp_ln891_fu_230_p2);
    sensitive << ( loops_0_0_i_i_i_reg_165 );
    sensitive << ( icmp_ln68_fu_195_p2 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_loops_impl_i_V_fu_242_p2);
    sensitive << ( loops_1_0_i_i_i_reg_154 );

    SC_METHOD(thread_loops_impl_next_i_s_fu_201_p2);
    sensitive << ( loops_0_0_i_i_i_reg_165 );

    SC_METHOD(thread_m_axi_out_hw_V_ARADDR);

    SC_METHOD(thread_m_axi_out_hw_V_ARBURST);

    SC_METHOD(thread_m_axi_out_hw_V_ARCACHE);

    SC_METHOD(thread_m_axi_out_hw_V_ARID);

    SC_METHOD(thread_m_axi_out_hw_V_ARLEN);

    SC_METHOD(thread_m_axi_out_hw_V_ARLOCK);

    SC_METHOD(thread_m_axi_out_hw_V_ARPROT);

    SC_METHOD(thread_m_axi_out_hw_V_ARQOS);

    SC_METHOD(thread_m_axi_out_hw_V_ARREGION);

    SC_METHOD(thread_m_axi_out_hw_V_ARSIZE);

    SC_METHOD(thread_m_axi_out_hw_V_ARUSER);

    SC_METHOD(thread_m_axi_out_hw_V_ARVALID);

    SC_METHOD(thread_m_axi_out_hw_V_AWADDR);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( sext_ln332_fu_272_p1 );

    SC_METHOD(thread_m_axi_out_hw_V_AWBURST);

    SC_METHOD(thread_m_axi_out_hw_V_AWCACHE);

    SC_METHOD(thread_m_axi_out_hw_V_AWID);

    SC_METHOD(thread_m_axi_out_hw_V_AWLEN);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_out_hw_V_AWLOCK);

    SC_METHOD(thread_m_axi_out_hw_V_AWPROT);

    SC_METHOD(thread_m_axi_out_hw_V_AWQOS);

    SC_METHOD(thread_m_axi_out_hw_V_AWREGION);

    SC_METHOD(thread_m_axi_out_hw_V_AWSIZE);

    SC_METHOD(thread_m_axi_out_hw_V_AWUSER);

    SC_METHOD(thread_m_axi_out_hw_V_AWVALID);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_out_hw_V_BREADY);
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter7_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_m_axi_out_hw_V_RREADY);

    SC_METHOD(thread_m_axi_out_hw_V_WDATA);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter2_reg );
    sensitive << ( tmp_V_reg_340 );
    sensitive << ( tmp_V_141_reg_345 );
    sensitive << ( tmp_V_142_reg_350 );
    sensitive << ( tmp_V_143_reg_355 );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_out_hw_V_WID);

    SC_METHOD(thread_m_axi_out_hw_V_WLAST);

    SC_METHOD(thread_m_axi_out_hw_V_WSTRB);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_out_hw_V_WUSER);

    SC_METHOD(thread_m_axi_out_hw_V_WVALID);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter2_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_0_V_V_blk_n);
    sensitive << ( out_0_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_out_0_V_V_read);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_1_V_V_blk_n);
    sensitive << ( out_1_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_out_1_V_V_read);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_2_V_V_blk_n);
    sensitive << ( out_2_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_out_2_V_V_read);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_3_V_V_blk_n);
    sensitive << ( out_3_V_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_out_3_V_V_read);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_out_hw_V_blk_n_AW);
    sensitive << ( m_axi_out_hw_V_AWREADY );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter1_reg );

    SC_METHOD(thread_out_hw_V_blk_n_B);
    sensitive << ( m_axi_out_hw_V_BVALID );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter7_reg );

    SC_METHOD(thread_out_hw_V_blk_n_W);
    sensitive << ( m_axi_out_hw_V_WREADY );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( icmp_ln68_reg_311_pp0_iter2_reg );

    SC_METHOD(thread_out_hw_V_offset_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( out_hw_V_offset_empty_n );

    SC_METHOD(thread_out_hw_V_offset_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( weights_reloading_in_3_empty_n );
    sensitive << ( out_hw_V_offset_empty_n );

    SC_METHOD(thread_out_index_fu_216_p3);
    sensitive << ( loops_0_0_i_i_i_reg_165 );
    sensitive << ( tmp4_i_i_i_fu_211_p2 );

    SC_METHOD(thread_select_ln206_fu_248_p3);
    sensitive << ( icmp_ln891_4_fu_236_p2 );
    sensitive << ( loops_impl_i_V_fu_242_p2 );

    SC_METHOD(thread_select_ln891_fu_256_p3);
    sensitive << ( loops_1_0_i_i_i_reg_154 );
    sensitive << ( icmp_ln891_fu_230_p2 );
    sensitive << ( select_ln206_fu_248_p3 );

    SC_METHOD(thread_sext_ln332_fu_272_p1);
    sensitive << ( add_ln332_reg_335 );

    SC_METHOD(thread_sext_ln87_fu_264_p1);
    sensitive << ( out_index_reg_320 );

    SC_METHOD(thread_tmp4_i_i_i_fu_211_p2);
    sensitive << ( empty_reg_301 );
    sensitive << ( empty_221_fu_207_p1 );

    SC_METHOD(thread_weights_reloading_in_3_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( weights_reloading_in_3_empty_n );

    SC_METHOD(thread_weights_reloading_in_3_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( weights_reloading_in_3_empty_n );
    sensitive << ( out_hw_V_offset_empty_n );

    SC_METHOD(thread_zext_ln68_fu_191_p1);
    sensitive << ( out_hw_V_offset_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( weights_reloading_in_3_empty_n );
    sensitive << ( out_hw_V_offset_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter8 );
    sensitive << ( icmp_ln68_fu_195_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter7 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter8 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter6 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter7 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mem_write_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, weights_reloading_in_3_dout, "(port)weights_reloading_in_3_dout");
    sc_trace(mVcdFile, weights_reloading_in_3_empty_n, "(port)weights_reloading_in_3_empty_n");
    sc_trace(mVcdFile, weights_reloading_in_3_read, "(port)weights_reloading_in_3_read");
    sc_trace(mVcdFile, out_0_V_V_dout, "(port)out_0_V_V_dout");
    sc_trace(mVcdFile, out_0_V_V_empty_n, "(port)out_0_V_V_empty_n");
    sc_trace(mVcdFile, out_0_V_V_read, "(port)out_0_V_V_read");
    sc_trace(mVcdFile, out_1_V_V_dout, "(port)out_1_V_V_dout");
    sc_trace(mVcdFile, out_1_V_V_empty_n, "(port)out_1_V_V_empty_n");
    sc_trace(mVcdFile, out_1_V_V_read, "(port)out_1_V_V_read");
    sc_trace(mVcdFile, out_2_V_V_dout, "(port)out_2_V_V_dout");
    sc_trace(mVcdFile, out_2_V_V_empty_n, "(port)out_2_V_V_empty_n");
    sc_trace(mVcdFile, out_2_V_V_read, "(port)out_2_V_V_read");
    sc_trace(mVcdFile, out_3_V_V_dout, "(port)out_3_V_V_dout");
    sc_trace(mVcdFile, out_3_V_V_empty_n, "(port)out_3_V_V_empty_n");
    sc_trace(mVcdFile, out_3_V_V_read, "(port)out_3_V_V_read");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWVALID, "(port)m_axi_out_hw_V_AWVALID");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWREADY, "(port)m_axi_out_hw_V_AWREADY");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWADDR, "(port)m_axi_out_hw_V_AWADDR");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWID, "(port)m_axi_out_hw_V_AWID");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWLEN, "(port)m_axi_out_hw_V_AWLEN");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWSIZE, "(port)m_axi_out_hw_V_AWSIZE");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWBURST, "(port)m_axi_out_hw_V_AWBURST");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWLOCK, "(port)m_axi_out_hw_V_AWLOCK");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWCACHE, "(port)m_axi_out_hw_V_AWCACHE");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWPROT, "(port)m_axi_out_hw_V_AWPROT");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWQOS, "(port)m_axi_out_hw_V_AWQOS");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWREGION, "(port)m_axi_out_hw_V_AWREGION");
    sc_trace(mVcdFile, m_axi_out_hw_V_AWUSER, "(port)m_axi_out_hw_V_AWUSER");
    sc_trace(mVcdFile, m_axi_out_hw_V_WVALID, "(port)m_axi_out_hw_V_WVALID");
    sc_trace(mVcdFile, m_axi_out_hw_V_WREADY, "(port)m_axi_out_hw_V_WREADY");
    sc_trace(mVcdFile, m_axi_out_hw_V_WDATA, "(port)m_axi_out_hw_V_WDATA");
    sc_trace(mVcdFile, m_axi_out_hw_V_WSTRB, "(port)m_axi_out_hw_V_WSTRB");
    sc_trace(mVcdFile, m_axi_out_hw_V_WLAST, "(port)m_axi_out_hw_V_WLAST");
    sc_trace(mVcdFile, m_axi_out_hw_V_WID, "(port)m_axi_out_hw_V_WID");
    sc_trace(mVcdFile, m_axi_out_hw_V_WUSER, "(port)m_axi_out_hw_V_WUSER");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARVALID, "(port)m_axi_out_hw_V_ARVALID");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARREADY, "(port)m_axi_out_hw_V_ARREADY");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARADDR, "(port)m_axi_out_hw_V_ARADDR");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARID, "(port)m_axi_out_hw_V_ARID");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARLEN, "(port)m_axi_out_hw_V_ARLEN");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARSIZE, "(port)m_axi_out_hw_V_ARSIZE");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARBURST, "(port)m_axi_out_hw_V_ARBURST");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARLOCK, "(port)m_axi_out_hw_V_ARLOCK");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARCACHE, "(port)m_axi_out_hw_V_ARCACHE");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARPROT, "(port)m_axi_out_hw_V_ARPROT");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARQOS, "(port)m_axi_out_hw_V_ARQOS");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARREGION, "(port)m_axi_out_hw_V_ARREGION");
    sc_trace(mVcdFile, m_axi_out_hw_V_ARUSER, "(port)m_axi_out_hw_V_ARUSER");
    sc_trace(mVcdFile, m_axi_out_hw_V_RVALID, "(port)m_axi_out_hw_V_RVALID");
    sc_trace(mVcdFile, m_axi_out_hw_V_RREADY, "(port)m_axi_out_hw_V_RREADY");
    sc_trace(mVcdFile, m_axi_out_hw_V_RDATA, "(port)m_axi_out_hw_V_RDATA");
    sc_trace(mVcdFile, m_axi_out_hw_V_RLAST, "(port)m_axi_out_hw_V_RLAST");
    sc_trace(mVcdFile, m_axi_out_hw_V_RID, "(port)m_axi_out_hw_V_RID");
    sc_trace(mVcdFile, m_axi_out_hw_V_RUSER, "(port)m_axi_out_hw_V_RUSER");
    sc_trace(mVcdFile, m_axi_out_hw_V_RRESP, "(port)m_axi_out_hw_V_RRESP");
    sc_trace(mVcdFile, m_axi_out_hw_V_BVALID, "(port)m_axi_out_hw_V_BVALID");
    sc_trace(mVcdFile, m_axi_out_hw_V_BREADY, "(port)m_axi_out_hw_V_BREADY");
    sc_trace(mVcdFile, m_axi_out_hw_V_BRESP, "(port)m_axi_out_hw_V_BRESP");
    sc_trace(mVcdFile, m_axi_out_hw_V_BID, "(port)m_axi_out_hw_V_BID");
    sc_trace(mVcdFile, m_axi_out_hw_V_BUSER, "(port)m_axi_out_hw_V_BUSER");
    sc_trace(mVcdFile, out_hw_V_offset_dout, "(port)out_hw_V_offset_dout");
    sc_trace(mVcdFile, out_hw_V_offset_empty_n, "(port)out_hw_V_offset_empty_n");
    sc_trace(mVcdFile, out_hw_V_offset_read, "(port)out_hw_V_offset_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, weights_reloading_in_3_blk_n, "weights_reloading_in_3_blk_n");
    sc_trace(mVcdFile, out_0_V_V_blk_n, "out_0_V_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, icmp_ln68_reg_311, "icmp_ln68_reg_311");
    sc_trace(mVcdFile, icmp_ln68_reg_311_pp0_iter1_reg, "icmp_ln68_reg_311_pp0_iter1_reg");
    sc_trace(mVcdFile, out_1_V_V_blk_n, "out_1_V_V_blk_n");
    sc_trace(mVcdFile, out_2_V_V_blk_n, "out_2_V_V_blk_n");
    sc_trace(mVcdFile, out_3_V_V_blk_n, "out_3_V_V_blk_n");
    sc_trace(mVcdFile, out_hw_V_blk_n_AW, "out_hw_V_blk_n_AW");
    sc_trace(mVcdFile, out_hw_V_blk_n_W, "out_hw_V_blk_n_W");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, icmp_ln68_reg_311_pp0_iter2_reg, "icmp_ln68_reg_311_pp0_iter2_reg");
    sc_trace(mVcdFile, out_hw_V_blk_n_B, "out_hw_V_blk_n_B");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter8, "ap_enable_reg_pp0_iter8");
    sc_trace(mVcdFile, icmp_ln68_reg_311_pp0_iter7_reg, "icmp_ln68_reg_311_pp0_iter7_reg");
    sc_trace(mVcdFile, out_hw_V_offset_blk_n, "out_hw_V_offset_blk_n");
    sc_trace(mVcdFile, loops_1_0_i_i_i_reg_154, "loops_1_0_i_i_i_reg_154");
    sc_trace(mVcdFile, loops_0_0_i_i_i_reg_165, "loops_0_0_i_i_i_reg_165");
    sc_trace(mVcdFile, i_0_i_i_i_reg_176, "i_0_i_i_i_reg_176");
    sc_trace(mVcdFile, empty_fu_187_p1, "empty_fu_187_p1");
    sc_trace(mVcdFile, empty_reg_301, "empty_reg_301");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, zext_ln68_fu_191_p1, "zext_ln68_fu_191_p1");
    sc_trace(mVcdFile, zext_ln68_reg_306, "zext_ln68_reg_306");
    sc_trace(mVcdFile, icmp_ln68_fu_195_p2, "icmp_ln68_fu_195_p2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage0_iter6, "ap_block_state8_pp0_stage0_iter6");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage0_iter7, "ap_block_state9_pp0_stage0_iter7");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage0_iter8, "ap_block_state10_pp0_stage0_iter8");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln68_reg_311_pp0_iter3_reg, "icmp_ln68_reg_311_pp0_iter3_reg");
    sc_trace(mVcdFile, icmp_ln68_reg_311_pp0_iter4_reg, "icmp_ln68_reg_311_pp0_iter4_reg");
    sc_trace(mVcdFile, icmp_ln68_reg_311_pp0_iter5_reg, "icmp_ln68_reg_311_pp0_iter5_reg");
    sc_trace(mVcdFile, icmp_ln68_reg_311_pp0_iter6_reg, "icmp_ln68_reg_311_pp0_iter6_reg");
    sc_trace(mVcdFile, loops_impl_next_i_s_fu_201_p2, "loops_impl_next_i_s_fu_201_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, out_index_fu_216_p3, "out_index_fu_216_p3");
    sc_trace(mVcdFile, out_index_reg_320, "out_index_reg_320");
    sc_trace(mVcdFile, i_fu_224_p2, "i_fu_224_p2");
    sc_trace(mVcdFile, select_ln891_fu_256_p3, "select_ln891_fu_256_p3");
    sc_trace(mVcdFile, add_ln332_fu_267_p2, "add_ln332_fu_267_p2");
    sc_trace(mVcdFile, add_ln332_reg_335, "add_ln332_reg_335");
    sc_trace(mVcdFile, tmp_V_reg_340, "tmp_V_reg_340");
    sc_trace(mVcdFile, tmp_V_141_reg_345, "tmp_V_141_reg_345");
    sc_trace(mVcdFile, tmp_V_142_reg_350, "tmp_V_142_reg_350");
    sc_trace(mVcdFile, tmp_V_143_reg_355, "tmp_V_143_reg_355");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter6, "ap_enable_reg_pp0_iter6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter7, "ap_enable_reg_pp0_iter7");
    sc_trace(mVcdFile, sext_ln332_fu_272_p1, "sext_ln332_fu_272_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, empty_221_fu_207_p1, "empty_221_fu_207_p1");
    sc_trace(mVcdFile, tmp4_i_i_i_fu_211_p2, "tmp4_i_i_i_fu_211_p2");
    sc_trace(mVcdFile, icmp_ln891_4_fu_236_p2, "icmp_ln891_4_fu_236_p2");
    sc_trace(mVcdFile, loops_impl_i_V_fu_242_p2, "loops_impl_i_V_fu_242_p2");
    sc_trace(mVcdFile, icmp_ln891_fu_230_p2, "icmp_ln891_fu_230_p2");
    sc_trace(mVcdFile, select_ln206_fu_248_p3, "select_ln206_fu_248_p3");
    sc_trace(mVcdFile, sext_ln87_fu_264_p1, "sext_ln87_fu_264_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

mem_write::~mem_write() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void mem_write::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter6 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter6 = ap_enable_reg_pp0_iter5.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter7 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter7 = ap_enable_reg_pp0_iter6.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter8 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter8 = ap_enable_reg_pp0_iter7.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
            ap_enable_reg_pp0_iter8 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_195_p2.read()))) {
        i_0_i_i_i_reg_176 = i_fu_224_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
        i_0_i_i_i_reg_176 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_195_p2.read()))) {
        loops_0_0_i_i_i_reg_165 = loops_impl_next_i_s_fu_201_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
        loops_0_0_i_i_i_reg_165 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_195_p2.read()))) {
        loops_1_0_i_i_i_reg_154 = select_ln891_fu_256_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
        loops_1_0_i_i_i_reg_154 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311.read()))) {
        add_ln332_reg_335 = add_ln332_fu_267_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
        empty_reg_301 = empty_fu_187_p1.read();
        zext_ln68_reg_306 = zext_ln68_fu_191_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln68_reg_311 = icmp_ln68_fu_195_p2.read();
        icmp_ln68_reg_311_pp0_iter1_reg = icmp_ln68_reg_311.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln68_reg_311_pp0_iter2_reg = icmp_ln68_reg_311_pp0_iter1_reg.read();
        icmp_ln68_reg_311_pp0_iter3_reg = icmp_ln68_reg_311_pp0_iter2_reg.read();
        icmp_ln68_reg_311_pp0_iter4_reg = icmp_ln68_reg_311_pp0_iter3_reg.read();
        icmp_ln68_reg_311_pp0_iter5_reg = icmp_ln68_reg_311_pp0_iter4_reg.read();
        icmp_ln68_reg_311_pp0_iter6_reg = icmp_ln68_reg_311_pp0_iter5_reg.read();
        icmp_ln68_reg_311_pp0_iter7_reg = icmp_ln68_reg_311_pp0_iter6_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_195_p2.read()))) {
        out_index_reg_320 = out_index_fu_216_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_V_141_reg_345 = out_1_V_V_dout.read();
        tmp_V_142_reg_350 = out_2_V_V_dout.read();
        tmp_V_143_reg_355 = out_3_V_V_dout.read();
        tmp_V_reg_340 = out_0_V_V_dout.read();
    }
}

void mem_write::thread_add_ln332_fu_267_p2() {
    add_ln332_fu_267_p2 = (!zext_ln68_reg_306.read().is_01() || !sext_ln87_fu_264_p1.read().is_01())? sc_lv<33>(): (sc_biguint<33>(zext_ln68_reg_306.read()) + sc_bigint<33>(sext_ln87_fu_264_p1.read()));
}

void mem_write::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void mem_write::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void mem_write::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[2];
}

void mem_write::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter7_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_hw_V_BVALID.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_2_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_3_V_V_empty_n.read())))));
}

void mem_write::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_2_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_3_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter7_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_hw_V_BVALID.read())));
}

void mem_write::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_2_V_V_empty_n.read())) || 
   (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, out_3_V_V_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter7_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_hw_V_BVALID.read())));
}

void mem_write::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read()));
}

void mem_write::thread_ap_block_state10_pp0_stage0_iter8() {
    ap_block_state10_pp0_stage0_iter8 = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter7_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_hw_V_BVALID.read()));
}

void mem_write::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_hw_V_AWREADY.read()));
}

void mem_write::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = ((esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_0_V_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_1_V_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_2_V_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_3_V_V_empty_n.read())));
}

void mem_write::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter2_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, m_axi_out_hw_V_WREADY.read()));
}

void mem_write::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state8_pp0_stage0_iter6() {
    ap_block_state8_pp0_stage0_iter6 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_block_state9_pp0_stage0_iter7() {
    ap_block_state9_pp0_stage0_iter7 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void mem_write::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln68_fu_195_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void mem_write::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void mem_write::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void mem_write::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void mem_write::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter6.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter7.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter8.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void mem_write::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void mem_write::thread_empty_221_fu_207_p1() {
    empty_221_fu_207_p1 = esl_zext<30,10>(loops_1_0_i_i_i_reg_154.read());
}

void mem_write::thread_empty_fu_187_p1() {
    empty_fu_187_p1 = weights_reloading_in_3_dout.read().range(30-1, 0);
}

void mem_write::thread_i_fu_224_p2() {
    i_fu_224_p2 = (!i_0_i_i_i_reg_176.read().is_01() || !ap_const_lv12_1.is_01())? sc_lv<12>(): (sc_biguint<12>(i_0_i_i_i_reg_176.read()) + sc_biguint<12>(ap_const_lv12_1));
}

void mem_write::thread_icmp_ln68_fu_195_p2() {
    icmp_ln68_fu_195_p2 = (!i_0_i_i_i_reg_176.read().is_01() || !ap_const_lv12_900.is_01())? sc_lv<1>(): sc_lv<1>(i_0_i_i_i_reg_176.read() == ap_const_lv12_900);
}

void mem_write::thread_icmp_ln891_4_fu_236_p2() {
    icmp_ln891_4_fu_236_p2 = (!loops_1_0_i_i_i_reg_154.read().is_01() || !ap_const_lv10_23E.is_01())? sc_lv<1>(): (sc_biguint<10>(loops_1_0_i_i_i_reg_154.read()) > sc_biguint<10>(ap_const_lv10_23E));
}

void mem_write::thread_icmp_ln891_fu_230_p2() {
    icmp_ln891_fu_230_p2 = (!loops_0_0_i_i_i_reg_165.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(loops_0_0_i_i_i_reg_165.read() == ap_const_lv2_3);
}

void mem_write::thread_loops_impl_i_V_fu_242_p2() {
    loops_impl_i_V_fu_242_p2 = (!loops_1_0_i_i_i_reg_154.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(loops_1_0_i_i_i_reg_154.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void mem_write::thread_loops_impl_next_i_s_fu_201_p2() {
    loops_impl_next_i_s_fu_201_p2 = (!loops_0_0_i_i_i_reg_165.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(loops_0_0_i_i_i_reg_165.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void mem_write::thread_m_axi_out_hw_V_ARADDR() {
    m_axi_out_hw_V_ARADDR = ap_const_lv32_0;
}

void mem_write::thread_m_axi_out_hw_V_ARBURST() {
    m_axi_out_hw_V_ARBURST = ap_const_lv2_0;
}

void mem_write::thread_m_axi_out_hw_V_ARCACHE() {
    m_axi_out_hw_V_ARCACHE = ap_const_lv4_0;
}

void mem_write::thread_m_axi_out_hw_V_ARID() {
    m_axi_out_hw_V_ARID = ap_const_lv1_0;
}

void mem_write::thread_m_axi_out_hw_V_ARLEN() {
    m_axi_out_hw_V_ARLEN = ap_const_lv32_0;
}

void mem_write::thread_m_axi_out_hw_V_ARLOCK() {
    m_axi_out_hw_V_ARLOCK = ap_const_lv2_0;
}

void mem_write::thread_m_axi_out_hw_V_ARPROT() {
    m_axi_out_hw_V_ARPROT = ap_const_lv3_0;
}

void mem_write::thread_m_axi_out_hw_V_ARQOS() {
    m_axi_out_hw_V_ARQOS = ap_const_lv4_0;
}

void mem_write::thread_m_axi_out_hw_V_ARREGION() {
    m_axi_out_hw_V_ARREGION = ap_const_lv4_0;
}

void mem_write::thread_m_axi_out_hw_V_ARSIZE() {
    m_axi_out_hw_V_ARSIZE = ap_const_lv3_0;
}

void mem_write::thread_m_axi_out_hw_V_ARUSER() {
    m_axi_out_hw_V_ARUSER = ap_const_lv1_0;
}

void mem_write::thread_m_axi_out_hw_V_ARVALID() {
    m_axi_out_hw_V_ARVALID = ap_const_logic_0;
}

void mem_write::thread_m_axi_out_hw_V_AWADDR() {
    m_axi_out_hw_V_AWADDR =  (sc_lv<32>) (sext_ln332_fu_272_p1.read());
}

void mem_write::thread_m_axi_out_hw_V_AWBURST() {
    m_axi_out_hw_V_AWBURST = ap_const_lv2_0;
}

void mem_write::thread_m_axi_out_hw_V_AWCACHE() {
    m_axi_out_hw_V_AWCACHE = ap_const_lv4_0;
}

void mem_write::thread_m_axi_out_hw_V_AWID() {
    m_axi_out_hw_V_AWID = ap_const_lv1_0;
}

void mem_write::thread_m_axi_out_hw_V_AWLEN() {
    m_axi_out_hw_V_AWLEN = ap_const_lv32_1;
}

void mem_write::thread_m_axi_out_hw_V_AWLOCK() {
    m_axi_out_hw_V_AWLOCK = ap_const_lv2_0;
}

void mem_write::thread_m_axi_out_hw_V_AWPROT() {
    m_axi_out_hw_V_AWPROT = ap_const_lv3_0;
}

void mem_write::thread_m_axi_out_hw_V_AWQOS() {
    m_axi_out_hw_V_AWQOS = ap_const_lv4_0;
}

void mem_write::thread_m_axi_out_hw_V_AWREGION() {
    m_axi_out_hw_V_AWREGION = ap_const_lv4_0;
}

void mem_write::thread_m_axi_out_hw_V_AWSIZE() {
    m_axi_out_hw_V_AWSIZE = ap_const_lv3_0;
}

void mem_write::thread_m_axi_out_hw_V_AWUSER() {
    m_axi_out_hw_V_AWUSER = ap_const_lv1_0;
}

void mem_write::thread_m_axi_out_hw_V_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_out_hw_V_AWVALID = ap_const_logic_1;
    } else {
        m_axi_out_hw_V_AWVALID = ap_const_logic_0;
    }
}

void mem_write::thread_m_axi_out_hw_V_BREADY() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter7_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_out_hw_V_BREADY = ap_const_logic_1;
    } else {
        m_axi_out_hw_V_BREADY = ap_const_logic_0;
    }
}

void mem_write::thread_m_axi_out_hw_V_RREADY() {
    m_axi_out_hw_V_RREADY = ap_const_logic_0;
}

void mem_write::thread_m_axi_out_hw_V_WDATA() {
    m_axi_out_hw_V_WDATA = esl_concat<48,16>(esl_concat<32,16>(esl_concat<16,16>(tmp_V_143_reg_355.read(), tmp_V_142_reg_350.read()), tmp_V_141_reg_345.read()), tmp_V_reg_340.read());
}

void mem_write::thread_m_axi_out_hw_V_WID() {
    m_axi_out_hw_V_WID = ap_const_lv1_0;
}

void mem_write::thread_m_axi_out_hw_V_WLAST() {
    m_axi_out_hw_V_WLAST = ap_const_logic_0;
}

void mem_write::thread_m_axi_out_hw_V_WSTRB() {
    m_axi_out_hw_V_WSTRB = ap_const_lv8_FF;
}

void mem_write::thread_m_axi_out_hw_V_WUSER() {
    m_axi_out_hw_V_WUSER = ap_const_lv1_0;
}

void mem_write::thread_m_axi_out_hw_V_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter2_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        m_axi_out_hw_V_WVALID = ap_const_logic_1;
    } else {
        m_axi_out_hw_V_WVALID = ap_const_logic_0;
    }
}

void mem_write::thread_out_0_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()))) {
        out_0_V_V_blk_n = out_0_V_V_empty_n.read();
    } else {
        out_0_V_V_blk_n = ap_const_logic_1;
    }
}

void mem_write::thread_out_0_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_0_V_V_read = ap_const_logic_1;
    } else {
        out_0_V_V_read = ap_const_logic_0;
    }
}

void mem_write::thread_out_1_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()))) {
        out_1_V_V_blk_n = out_1_V_V_empty_n.read();
    } else {
        out_1_V_V_blk_n = ap_const_logic_1;
    }
}

void mem_write::thread_out_1_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_1_V_V_read = ap_const_logic_1;
    } else {
        out_1_V_V_read = ap_const_logic_0;
    }
}

void mem_write::thread_out_2_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()))) {
        out_2_V_V_blk_n = out_2_V_V_empty_n.read();
    } else {
        out_2_V_V_blk_n = ap_const_logic_1;
    }
}

void mem_write::thread_out_2_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_2_V_V_read = ap_const_logic_1;
    } else {
        out_2_V_V_read = ap_const_logic_0;
    }
}

void mem_write::thread_out_3_V_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()))) {
        out_3_V_V_blk_n = out_3_V_V_empty_n.read();
    } else {
        out_3_V_V_blk_n = ap_const_logic_1;
    }
}

void mem_write::thread_out_3_V_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_3_V_V_read = ap_const_logic_1;
    } else {
        out_3_V_V_read = ap_const_logic_0;
    }
}

void mem_write::thread_out_hw_V_blk_n_AW() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter1_reg.read()))) {
        out_hw_V_blk_n_AW = m_axi_out_hw_V_AWREADY.read();
    } else {
        out_hw_V_blk_n_AW = ap_const_logic_1;
    }
}

void mem_write::thread_out_hw_V_blk_n_B() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter7_reg.read()))) {
        out_hw_V_blk_n_B = m_axi_out_hw_V_BVALID.read();
    } else {
        out_hw_V_blk_n_B = ap_const_logic_1;
    }
}

void mem_write::thread_out_hw_V_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_reg_311_pp0_iter2_reg.read()))) {
        out_hw_V_blk_n_W = m_axi_out_hw_V_WREADY.read();
    } else {
        out_hw_V_blk_n_W = ap_const_logic_1;
    }
}

void mem_write::thread_out_hw_V_offset_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        out_hw_V_offset_blk_n = out_hw_V_offset_empty_n.read();
    } else {
        out_hw_V_offset_blk_n = ap_const_logic_1;
    }
}

void mem_write::thread_out_hw_V_offset_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
        out_hw_V_offset_read = ap_const_logic_1;
    } else {
        out_hw_V_offset_read = ap_const_logic_0;
    }
}

void mem_write::thread_out_index_fu_216_p3() {
    out_index_fu_216_p3 = esl_concat<30,2>(tmp4_i_i_i_fu_211_p2.read(), loops_0_0_i_i_i_reg_165.read());
}

void mem_write::thread_select_ln206_fu_248_p3() {
    select_ln206_fu_248_p3 = (!icmp_ln891_4_fu_236_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln891_4_fu_236_p2.read()[0].to_bool())? ap_const_lv10_0: loops_impl_i_V_fu_242_p2.read());
}

void mem_write::thread_select_ln891_fu_256_p3() {
    select_ln891_fu_256_p3 = (!icmp_ln891_fu_230_p2.read()[0].is_01())? sc_lv<10>(): ((icmp_ln891_fu_230_p2.read()[0].to_bool())? select_ln206_fu_248_p3.read(): loops_1_0_i_i_i_reg_154.read());
}

void mem_write::thread_sext_ln332_fu_272_p1() {
    sext_ln332_fu_272_p1 = esl_sext<64,33>(add_ln332_reg_335.read());
}

void mem_write::thread_sext_ln87_fu_264_p1() {
    sext_ln87_fu_264_p1 = esl_sext<33,32>(out_index_reg_320.read());
}

void mem_write::thread_tmp4_i_i_i_fu_211_p2() {
    tmp4_i_i_i_fu_211_p2 = (!empty_221_fu_207_p1.read().is_01() || !empty_reg_301.read().is_01())? sc_lv<30>(): (sc_biguint<30>(empty_221_fu_207_p1.read()) + sc_biguint<30>(empty_reg_301.read()));
}

void mem_write::thread_weights_reloading_in_3_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        weights_reloading_in_3_blk_n = weights_reloading_in_3_empty_n.read();
    } else {
        weights_reloading_in_3_blk_n = ap_const_logic_1;
    }
}

void mem_write::thread_weights_reloading_in_3_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
        weights_reloading_in_3_read = ap_const_logic_1;
    } else {
        weights_reloading_in_3_read = ap_const_logic_0;
    }
}

void mem_write::thread_zext_ln68_fu_191_p1() {
    zext_ln68_fu_191_p1 = esl_zext<33,29>(out_hw_V_offset_dout.read());
}

void mem_write::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, out_hw_V_offset_empty_n.read()) || esl_seteq<1,1,1>(ap_const_logic_0, weights_reloading_in_3_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln68_fu_195_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter8.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter7.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln68_fu_195_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

