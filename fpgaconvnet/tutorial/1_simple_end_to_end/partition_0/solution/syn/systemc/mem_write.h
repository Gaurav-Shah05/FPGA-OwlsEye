// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mem_write_HH_
#define _mem_write_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct mem_write : public sc_module {
    // Port declarations 70
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > weights_reloading_in_3_dout;
    sc_in< sc_logic > weights_reloading_in_3_empty_n;
    sc_out< sc_logic > weights_reloading_in_3_read;
    sc_in< sc_lv<16> > out_0_V_V_dout;
    sc_in< sc_logic > out_0_V_V_empty_n;
    sc_out< sc_logic > out_0_V_V_read;
    sc_in< sc_lv<16> > out_1_V_V_dout;
    sc_in< sc_logic > out_1_V_V_empty_n;
    sc_out< sc_logic > out_1_V_V_read;
    sc_in< sc_lv<16> > out_2_V_V_dout;
    sc_in< sc_logic > out_2_V_V_empty_n;
    sc_out< sc_logic > out_2_V_V_read;
    sc_in< sc_lv<16> > out_3_V_V_dout;
    sc_in< sc_logic > out_3_V_V_empty_n;
    sc_out< sc_logic > out_3_V_V_read;
    sc_out< sc_logic > m_axi_out_hw_V_AWVALID;
    sc_in< sc_logic > m_axi_out_hw_V_AWREADY;
    sc_out< sc_lv<32> > m_axi_out_hw_V_AWADDR;
    sc_out< sc_lv<1> > m_axi_out_hw_V_AWID;
    sc_out< sc_lv<32> > m_axi_out_hw_V_AWLEN;
    sc_out< sc_lv<3> > m_axi_out_hw_V_AWSIZE;
    sc_out< sc_lv<2> > m_axi_out_hw_V_AWBURST;
    sc_out< sc_lv<2> > m_axi_out_hw_V_AWLOCK;
    sc_out< sc_lv<4> > m_axi_out_hw_V_AWCACHE;
    sc_out< sc_lv<3> > m_axi_out_hw_V_AWPROT;
    sc_out< sc_lv<4> > m_axi_out_hw_V_AWQOS;
    sc_out< sc_lv<4> > m_axi_out_hw_V_AWREGION;
    sc_out< sc_lv<1> > m_axi_out_hw_V_AWUSER;
    sc_out< sc_logic > m_axi_out_hw_V_WVALID;
    sc_in< sc_logic > m_axi_out_hw_V_WREADY;
    sc_out< sc_lv<64> > m_axi_out_hw_V_WDATA;
    sc_out< sc_lv<8> > m_axi_out_hw_V_WSTRB;
    sc_out< sc_logic > m_axi_out_hw_V_WLAST;
    sc_out< sc_lv<1> > m_axi_out_hw_V_WID;
    sc_out< sc_lv<1> > m_axi_out_hw_V_WUSER;
    sc_out< sc_logic > m_axi_out_hw_V_ARVALID;
    sc_in< sc_logic > m_axi_out_hw_V_ARREADY;
    sc_out< sc_lv<32> > m_axi_out_hw_V_ARADDR;
    sc_out< sc_lv<1> > m_axi_out_hw_V_ARID;
    sc_out< sc_lv<32> > m_axi_out_hw_V_ARLEN;
    sc_out< sc_lv<3> > m_axi_out_hw_V_ARSIZE;
    sc_out< sc_lv<2> > m_axi_out_hw_V_ARBURST;
    sc_out< sc_lv<2> > m_axi_out_hw_V_ARLOCK;
    sc_out< sc_lv<4> > m_axi_out_hw_V_ARCACHE;
    sc_out< sc_lv<3> > m_axi_out_hw_V_ARPROT;
    sc_out< sc_lv<4> > m_axi_out_hw_V_ARQOS;
    sc_out< sc_lv<4> > m_axi_out_hw_V_ARREGION;
    sc_out< sc_lv<1> > m_axi_out_hw_V_ARUSER;
    sc_in< sc_logic > m_axi_out_hw_V_RVALID;
    sc_out< sc_logic > m_axi_out_hw_V_RREADY;
    sc_in< sc_lv<64> > m_axi_out_hw_V_RDATA;
    sc_in< sc_logic > m_axi_out_hw_V_RLAST;
    sc_in< sc_lv<1> > m_axi_out_hw_V_RID;
    sc_in< sc_lv<1> > m_axi_out_hw_V_RUSER;
    sc_in< sc_lv<2> > m_axi_out_hw_V_RRESP;
    sc_in< sc_logic > m_axi_out_hw_V_BVALID;
    sc_out< sc_logic > m_axi_out_hw_V_BREADY;
    sc_in< sc_lv<2> > m_axi_out_hw_V_BRESP;
    sc_in< sc_lv<1> > m_axi_out_hw_V_BID;
    sc_in< sc_lv<1> > m_axi_out_hw_V_BUSER;
    sc_in< sc_lv<29> > out_hw_V_offset_dout;
    sc_in< sc_logic > out_hw_V_offset_empty_n;
    sc_out< sc_logic > out_hw_V_offset_read;


    // Module declarations
    mem_write(sc_module_name name);
    SC_HAS_PROCESS(mem_write);

    ~mem_write();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > weights_reloading_in_3_blk_n;
    sc_signal< sc_logic > out_0_V_V_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > icmp_ln68_reg_311;
    sc_signal< sc_lv<1> > icmp_ln68_reg_311_pp0_iter1_reg;
    sc_signal< sc_logic > out_1_V_V_blk_n;
    sc_signal< sc_logic > out_2_V_V_blk_n;
    sc_signal< sc_logic > out_3_V_V_blk_n;
    sc_signal< sc_logic > out_hw_V_blk_n_AW;
    sc_signal< sc_logic > out_hw_V_blk_n_W;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > icmp_ln68_reg_311_pp0_iter2_reg;
    sc_signal< sc_logic > out_hw_V_blk_n_B;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_lv<1> > icmp_ln68_reg_311_pp0_iter7_reg;
    sc_signal< sc_logic > out_hw_V_offset_blk_n;
    sc_signal< sc_lv<10> > loops_1_0_i_i_i_reg_154;
    sc_signal< sc_lv<2> > loops_0_0_i_i_i_reg_165;
    sc_signal< sc_lv<12> > i_0_i_i_i_reg_176;
    sc_signal< sc_lv<30> > empty_fu_187_p1;
    sc_signal< sc_lv<30> > empty_reg_301;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<33> > zext_ln68_fu_191_p1;
    sc_signal< sc_lv<33> > zext_ln68_reg_306;
    sc_signal< sc_lv<1> > icmp_ln68_fu_195_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_io;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln68_reg_311_pp0_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln68_reg_311_pp0_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln68_reg_311_pp0_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln68_reg_311_pp0_iter6_reg;
    sc_signal< sc_lv<2> > loops_impl_next_i_s_fu_201_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > out_index_fu_216_p3;
    sc_signal< sc_lv<32> > out_index_reg_320;
    sc_signal< sc_lv<12> > i_fu_224_p2;
    sc_signal< sc_lv<10> > select_ln891_fu_256_p3;
    sc_signal< sc_lv<33> > add_ln332_fu_267_p2;
    sc_signal< sc_lv<33> > add_ln332_reg_335;
    sc_signal< sc_lv<16> > tmp_V_reg_340;
    sc_signal< sc_lv<16> > tmp_V_141_reg_345;
    sc_signal< sc_lv<16> > tmp_V_142_reg_350;
    sc_signal< sc_lv<16> > tmp_V_143_reg_355;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_lv<64> > sext_ln332_fu_272_p1;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<30> > empty_221_fu_207_p1;
    sc_signal< sc_lv<30> > tmp4_i_i_i_fu_211_p2;
    sc_signal< sc_lv<1> > icmp_ln891_4_fu_236_p2;
    sc_signal< sc_lv<10> > loops_impl_i_V_fu_242_p2;
    sc_signal< sc_lv<1> > icmp_ln891_fu_230_p2;
    sc_signal< sc_lv<10> > select_ln206_fu_248_p3;
    sc_signal< sc_lv<33> > sext_ln87_fu_264_p1;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state11;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<12> ap_const_lv12_900;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<10> ap_const_lv10_23E;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln332_fu_267_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_io();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_empty_221_fu_207_p1();
    void thread_empty_fu_187_p1();
    void thread_i_fu_224_p2();
    void thread_icmp_ln68_fu_195_p2();
    void thread_icmp_ln891_4_fu_236_p2();
    void thread_icmp_ln891_fu_230_p2();
    void thread_loops_impl_i_V_fu_242_p2();
    void thread_loops_impl_next_i_s_fu_201_p2();
    void thread_m_axi_out_hw_V_ARADDR();
    void thread_m_axi_out_hw_V_ARBURST();
    void thread_m_axi_out_hw_V_ARCACHE();
    void thread_m_axi_out_hw_V_ARID();
    void thread_m_axi_out_hw_V_ARLEN();
    void thread_m_axi_out_hw_V_ARLOCK();
    void thread_m_axi_out_hw_V_ARPROT();
    void thread_m_axi_out_hw_V_ARQOS();
    void thread_m_axi_out_hw_V_ARREGION();
    void thread_m_axi_out_hw_V_ARSIZE();
    void thread_m_axi_out_hw_V_ARUSER();
    void thread_m_axi_out_hw_V_ARVALID();
    void thread_m_axi_out_hw_V_AWADDR();
    void thread_m_axi_out_hw_V_AWBURST();
    void thread_m_axi_out_hw_V_AWCACHE();
    void thread_m_axi_out_hw_V_AWID();
    void thread_m_axi_out_hw_V_AWLEN();
    void thread_m_axi_out_hw_V_AWLOCK();
    void thread_m_axi_out_hw_V_AWPROT();
    void thread_m_axi_out_hw_V_AWQOS();
    void thread_m_axi_out_hw_V_AWREGION();
    void thread_m_axi_out_hw_V_AWSIZE();
    void thread_m_axi_out_hw_V_AWUSER();
    void thread_m_axi_out_hw_V_AWVALID();
    void thread_m_axi_out_hw_V_BREADY();
    void thread_m_axi_out_hw_V_RREADY();
    void thread_m_axi_out_hw_V_WDATA();
    void thread_m_axi_out_hw_V_WID();
    void thread_m_axi_out_hw_V_WLAST();
    void thread_m_axi_out_hw_V_WSTRB();
    void thread_m_axi_out_hw_V_WUSER();
    void thread_m_axi_out_hw_V_WVALID();
    void thread_out_0_V_V_blk_n();
    void thread_out_0_V_V_read();
    void thread_out_1_V_V_blk_n();
    void thread_out_1_V_V_read();
    void thread_out_2_V_V_blk_n();
    void thread_out_2_V_V_read();
    void thread_out_3_V_V_blk_n();
    void thread_out_3_V_V_read();
    void thread_out_hw_V_blk_n_AW();
    void thread_out_hw_V_blk_n_B();
    void thread_out_hw_V_blk_n_W();
    void thread_out_hw_V_offset_blk_n();
    void thread_out_hw_V_offset_read();
    void thread_out_index_fu_216_p3();
    void thread_select_ln206_fu_248_p3();
    void thread_select_ln891_fu_256_p3();
    void thread_sext_ln332_fu_272_p1();
    void thread_sext_ln87_fu_264_p1();
    void thread_tmp4_i_i_i_fu_211_p2();
    void thread_weights_reloading_in_3_blk_n();
    void thread_weights_reloading_in_3_read();
    void thread_zext_ln68_fu_191_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
