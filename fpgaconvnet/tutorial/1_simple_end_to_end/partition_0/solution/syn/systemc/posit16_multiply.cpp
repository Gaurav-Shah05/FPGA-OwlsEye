// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "posit16_multiply.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic posit16_multiply::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic posit16_multiply::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> posit16_multiply::ap_ST_fsm_state1 = "1";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state2 = "10";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state3 = "100";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state4 = "1000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state5 = "10000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state6 = "100000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> posit16_multiply::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> posit16_multiply::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> posit16_multiply::ap_const_lv32_1 = "1";
const bool posit16_multiply::ap_const_boolean_0 = false;
const sc_lv<32> posit16_multiply::ap_const_lv32_B = "1011";
const sc_lv<32> posit16_multiply::ap_const_lv32_C = "1100";
const sc_lv<32> posit16_multiply::ap_const_lv32_D = "1101";
const sc_lv<32> posit16_multiply::ap_const_lv32_2 = "10";
const sc_lv<16> posit16_multiply::ap_const_lv16_0 = "0000000000000000";
const bool posit16_multiply::ap_const_boolean_1 = true;

posit16_multiply::posit16_multiply(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_posit16_to_double_fu_56 = new posit16_to_double("grp_posit16_to_double_fu_56");
    grp_posit16_to_double_fu_56->ap_clk(ap_clk);
    grp_posit16_to_double_fu_56->ap_rst(ap_rst);
    grp_posit16_to_double_fu_56->ap_start(grp_posit16_to_double_fu_56_ap_start);
    grp_posit16_to_double_fu_56->ap_done(grp_posit16_to_double_fu_56_ap_done);
    grp_posit16_to_double_fu_56->ap_idle(grp_posit16_to_double_fu_56_ap_idle);
    grp_posit16_to_double_fu_56->ap_ready(grp_posit16_to_double_fu_56_ap_ready);
    grp_posit16_to_double_fu_56->ui(a_ui);
    grp_posit16_to_double_fu_56->ap_return(grp_posit16_to_double_fu_56_ap_return);
    grp_posit16_to_double_fu_86 = new posit16_to_double("grp_posit16_to_double_fu_86");
    grp_posit16_to_double_fu_86->ap_clk(ap_clk);
    grp_posit16_to_double_fu_86->ap_rst(ap_rst);
    grp_posit16_to_double_fu_86->ap_start(grp_posit16_to_double_fu_86_ap_start);
    grp_posit16_to_double_fu_86->ap_done(grp_posit16_to_double_fu_86_ap_done);
    grp_posit16_to_double_fu_86->ap_idle(grp_posit16_to_double_fu_86_ap_idle);
    grp_posit16_to_double_fu_86->ap_ready(grp_posit16_to_double_fu_86_ap_ready);
    grp_posit16_to_double_fu_86->ui(b_ui);
    grp_posit16_to_double_fu_86->ap_return(grp_posit16_to_double_fu_86_ap_return);
    grp_double_to_posit16_fu_116 = new double_to_posit16("grp_double_to_posit16_fu_116");
    grp_double_to_posit16_fu_116->ap_clk(ap_clk);
    grp_double_to_posit16_fu_116->ap_rst(ap_rst);
    grp_double_to_posit16_fu_116->ap_start(grp_double_to_posit16_fu_116_ap_start);
    grp_double_to_posit16_fu_116->ap_done(grp_double_to_posit16_fu_116_ap_done);
    grp_double_to_posit16_fu_116->ap_idle(grp_double_to_posit16_fu_116_ap_idle);
    grp_double_to_posit16_fu_116->ap_ready(grp_double_to_posit16_fu_116_ap_ready);
    grp_double_to_posit16_fu_116->f(prod_reg_145);
    grp_double_to_posit16_fu_116->ap_return(grp_double_to_posit16_fu_116_ap_return);
    fpgaconvnet_ip_dmeOg_U858 = new fpgaconvnet_ip_dmeOg<1,10,64,64,64>("fpgaconvnet_ip_dmeOg_U858");
    fpgaconvnet_ip_dmeOg_U858->clk(ap_clk);
    fpgaconvnet_ip_dmeOg_U858->reset(ap_rst);
    fpgaconvnet_ip_dmeOg_U858->din0(da_reg_135);
    fpgaconvnet_ip_dmeOg_U858->din1(db_reg_140);
    fpgaconvnet_ip_dmeOg_U858->ce(ap_var_for_const0);
    fpgaconvnet_ip_dmeOg_U858->dout(grp_fu_121_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state2_on_subcall_done);
    sensitive << ( grp_posit16_to_double_fu_56_ap_done );
    sensitive << ( grp_posit16_to_double_fu_86_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_double_to_posit16_fu_116_ap_done );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_double_to_posit16_fu_116_ap_done );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_ap_return);
    sensitive << ( grp_double_to_posit16_fu_116_ap_done );
    sensitive << ( grp_double_to_posit16_fu_116_ap_return );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_grp_double_to_posit16_fu_116_ap_start);
    sensitive << ( grp_double_to_posit16_fu_116_ap_start_reg );

    SC_METHOD(thread_grp_posit16_to_double_fu_56_ap_start);
    sensitive << ( grp_posit16_to_double_fu_56_ap_start_reg );

    SC_METHOD(thread_grp_posit16_to_double_fu_86_ap_start);
    sensitive << ( grp_posit16_to_double_fu_86_ap_start_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_state2_on_subcall_done );
    sensitive << ( grp_double_to_posit16_fu_116_ap_done );
    sensitive << ( ap_CS_fsm_state14 );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000001";
    grp_posit16_to_double_fu_56_ap_start_reg = SC_LOGIC_0;
    grp_posit16_to_double_fu_86_ap_start_reg = SC_LOGIC_0;
    grp_double_to_posit16_fu_116_ap_start_reg = SC_LOGIC_0;
    ap_return_preg = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "posit16_multiply_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_ui, "(port)a_ui");
    sc_trace(mVcdFile, b_ui, "(port)b_ui");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_56_ap_return, "grp_posit16_to_double_fu_56_ap_return");
    sc_trace(mVcdFile, da_reg_135, "da_reg_135");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_56_ap_ready, "grp_posit16_to_double_fu_56_ap_ready");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_56_ap_done, "grp_posit16_to_double_fu_56_ap_done");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_86_ap_ready, "grp_posit16_to_double_fu_86_ap_ready");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_86_ap_done, "grp_posit16_to_double_fu_86_ap_done");
    sc_trace(mVcdFile, ap_block_state2_on_subcall_done, "ap_block_state2_on_subcall_done");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_86_ap_return, "grp_posit16_to_double_fu_86_ap_return");
    sc_trace(mVcdFile, db_reg_140, "db_reg_140");
    sc_trace(mVcdFile, grp_fu_121_p2, "grp_fu_121_p2");
    sc_trace(mVcdFile, prod_reg_145, "prod_reg_145");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_56_ap_start, "grp_posit16_to_double_fu_56_ap_start");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_56_ap_idle, "grp_posit16_to_double_fu_56_ap_idle");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_86_ap_start, "grp_posit16_to_double_fu_86_ap_start");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_86_ap_idle, "grp_posit16_to_double_fu_86_ap_idle");
    sc_trace(mVcdFile, grp_double_to_posit16_fu_116_ap_start, "grp_double_to_posit16_fu_116_ap_start");
    sc_trace(mVcdFile, grp_double_to_posit16_fu_116_ap_done, "grp_double_to_posit16_fu_116_ap_done");
    sc_trace(mVcdFile, grp_double_to_posit16_fu_116_ap_idle, "grp_double_to_posit16_fu_116_ap_idle");
    sc_trace(mVcdFile, grp_double_to_posit16_fu_116_ap_ready, "grp_double_to_posit16_fu_116_ap_ready");
    sc_trace(mVcdFile, grp_double_to_posit16_fu_116_ap_return, "grp_double_to_posit16_fu_116_ap_return");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_56_ap_start_reg, "grp_posit16_to_double_fu_56_ap_start_reg");
    sc_trace(mVcdFile, grp_posit16_to_double_fu_86_ap_start_reg, "grp_posit16_to_double_fu_86_ap_start_reg");
    sc_trace(mVcdFile, grp_double_to_posit16_fu_116_ap_start_reg, "grp_double_to_posit16_fu_116_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

posit16_multiply::~posit16_multiply() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_posit16_to_double_fu_56;
    delete grp_posit16_to_double_fu_86;
    delete grp_double_to_posit16_fu_116;
    delete fpgaconvnet_ip_dmeOg_U858;
}

void posit16_multiply::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void posit16_multiply::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
             esl_seteq<1,1,1>(grp_double_to_posit16_fu_116_ap_done.read(), ap_const_logic_1))) {
            ap_return_preg = grp_double_to_posit16_fu_116_ap_return.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_double_to_posit16_fu_116_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
            grp_double_to_posit16_fu_116_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_double_to_posit16_fu_116_ap_ready.read())) {
            grp_double_to_posit16_fu_116_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_posit16_to_double_fu_56_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_posit16_to_double_fu_56_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_posit16_to_double_fu_56_ap_ready.read())) {
            grp_posit16_to_double_fu_56_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_posit16_to_double_fu_86_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_posit16_to_double_fu_86_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_posit16_to_double_fu_86_ap_ready.read())) {
            grp_posit16_to_double_fu_86_ap_start_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
        da_reg_135 = grp_posit16_to_double_fu_56_ap_return.read();
        db_reg_140 = grp_posit16_to_double_fu_86_ap_return.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        prod_reg_145 = grp_fu_121_p2.read();
    }
}

void posit16_multiply::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void posit16_multiply::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void posit16_multiply::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void posit16_multiply::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void posit16_multiply::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void posit16_multiply::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void posit16_multiply::thread_ap_block_state2_on_subcall_done() {
    ap_block_state2_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_posit16_to_double_fu_56_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_posit16_to_double_fu_86_ap_done.read()));
}

void posit16_multiply::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
          esl_seteq<1,1,1>(grp_double_to_posit16_fu_116_ap_done.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void posit16_multiply::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void posit16_multiply::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(grp_double_to_posit16_fu_116_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void posit16_multiply::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(grp_double_to_posit16_fu_116_ap_done.read(), ap_const_logic_1))) {
        ap_return = grp_double_to_posit16_fu_116_ap_return.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void posit16_multiply::thread_grp_double_to_posit16_fu_116_ap_start() {
    grp_double_to_posit16_fu_116_ap_start = grp_double_to_posit16_fu_116_ap_start_reg.read();
}

void posit16_multiply::thread_grp_posit16_to_double_fu_56_ap_start() {
    grp_posit16_to_double_fu_56_ap_start = grp_posit16_to_double_fu_56_ap_start_reg.read();
}

void posit16_multiply::thread_grp_posit16_to_double_fu_86_ap_start() {
    grp_posit16_to_double_fu_86_ap_start = grp_posit16_to_double_fu_86_ap_start_reg.read();
}

void posit16_multiply::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_block_state2_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(grp_double_to_posit16_fu_116_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state14;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
            break;
    }
}

}

