// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _posit16_multiply_HH_
#define _posit16_multiply_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "posit16_to_double.h"
#include "double_to_posit16.h"
#include "fpgaconvnet_ip_dmeOg.h"

namespace ap_rtl {

struct posit16_multiply : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > a_ui;
    sc_in< sc_lv<16> > b_ui;
    sc_out< sc_lv<16> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    posit16_multiply(sc_module_name name);
    SC_HAS_PROCESS(posit16_multiply);

    ~posit16_multiply();

    sc_trace_file* mVcdFile;

    posit16_to_double* grp_posit16_to_double_fu_56;
    posit16_to_double* grp_posit16_to_double_fu_86;
    double_to_posit16* grp_double_to_posit16_fu_116;
    fpgaconvnet_ip_dmeOg<1,10,64,64,64>* fpgaconvnet_ip_dmeOg_U858;
    sc_signal< sc_lv<14> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > grp_posit16_to_double_fu_56_ap_return;
    sc_signal< sc_lv<64> > da_reg_135;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_posit16_to_double_fu_56_ap_ready;
    sc_signal< sc_logic > grp_posit16_to_double_fu_56_ap_done;
    sc_signal< sc_logic > grp_posit16_to_double_fu_86_ap_ready;
    sc_signal< sc_logic > grp_posit16_to_double_fu_86_ap_done;
    sc_signal< bool > ap_block_state2_on_subcall_done;
    sc_signal< sc_lv<64> > grp_posit16_to_double_fu_86_ap_return;
    sc_signal< sc_lv<64> > db_reg_140;
    sc_signal< sc_lv<64> > grp_fu_121_p2;
    sc_signal< sc_lv<64> > prod_reg_145;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_logic > grp_posit16_to_double_fu_56_ap_start;
    sc_signal< sc_logic > grp_posit16_to_double_fu_56_ap_idle;
    sc_signal< sc_logic > grp_posit16_to_double_fu_86_ap_start;
    sc_signal< sc_logic > grp_posit16_to_double_fu_86_ap_idle;
    sc_signal< sc_logic > grp_double_to_posit16_fu_116_ap_start;
    sc_signal< sc_logic > grp_double_to_posit16_fu_116_ap_done;
    sc_signal< sc_logic > grp_double_to_posit16_fu_116_ap_idle;
    sc_signal< sc_logic > grp_double_to_posit16_fu_116_ap_ready;
    sc_signal< sc_lv<16> > grp_double_to_posit16_fu_116_ap_return;
    sc_signal< sc_logic > grp_posit16_to_double_fu_56_ap_start_reg;
    sc_signal< sc_logic > grp_posit16_to_double_fu_86_ap_start_reg;
    sc_signal< sc_logic > grp_double_to_posit16_fu_116_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<16> > ap_return_preg;
    sc_signal< sc_lv<14> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<14> ap_ST_fsm_state1;
    static const sc_lv<14> ap_ST_fsm_state2;
    static const sc_lv<14> ap_ST_fsm_state3;
    static const sc_lv<14> ap_ST_fsm_state4;
    static const sc_lv<14> ap_ST_fsm_state5;
    static const sc_lv<14> ap_ST_fsm_state6;
    static const sc_lv<14> ap_ST_fsm_state7;
    static const sc_lv<14> ap_ST_fsm_state8;
    static const sc_lv<14> ap_ST_fsm_state9;
    static const sc_lv<14> ap_ST_fsm_state10;
    static const sc_lv<14> ap_ST_fsm_state11;
    static const sc_lv<14> ap_ST_fsm_state12;
    static const sc_lv<14> ap_ST_fsm_state13;
    static const sc_lv<14> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<16> ap_const_lv16_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state2_on_subcall_done();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_double_to_posit16_fu_116_ap_start();
    void thread_grp_posit16_to_double_fu_56_ap_start();
    void thread_grp_posit16_to_double_fu_86_ap_start();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
