// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _squeeze_1_HH_
#define _squeeze_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "squeeze_in_1.h"
#include "squeeze_out.h"
#include "fifo_w16_d2_A_x5.h"
#include "start_for_squeezebzo.h"

namespace ap_rtl {

struct squeeze_1 : public sc_module {
    // Port declarations 67
    sc_in< sc_lv<16> > in_0_V_V_dout;
    sc_in< sc_logic > in_0_V_V_empty_n;
    sc_out< sc_logic > in_0_V_V_read;
    sc_in< sc_lv<16> > in_1_V_V_dout;
    sc_in< sc_logic > in_1_V_V_empty_n;
    sc_out< sc_logic > in_1_V_V_read;
    sc_in< sc_lv<16> > in_2_V_V_dout;
    sc_in< sc_logic > in_2_V_V_empty_n;
    sc_out< sc_logic > in_2_V_V_read;
    sc_in< sc_lv<16> > in_3_V_V_dout;
    sc_in< sc_logic > in_3_V_V_empty_n;
    sc_out< sc_logic > in_3_V_V_read;
    sc_in< sc_lv<16> > in_4_V_V_dout;
    sc_in< sc_logic > in_4_V_V_empty_n;
    sc_out< sc_logic > in_4_V_V_read;
    sc_in< sc_lv<16> > in_5_V_V_dout;
    sc_in< sc_logic > in_5_V_V_empty_n;
    sc_out< sc_logic > in_5_V_V_read;
    sc_in< sc_lv<16> > in_6_V_V_dout;
    sc_in< sc_logic > in_6_V_V_empty_n;
    sc_out< sc_logic > in_6_V_V_read;
    sc_in< sc_lv<16> > in_7_V_V_dout;
    sc_in< sc_logic > in_7_V_V_empty_n;
    sc_out< sc_logic > in_7_V_V_read;
    sc_in< sc_lv<16> > in_8_V_V_dout;
    sc_in< sc_logic > in_8_V_V_empty_n;
    sc_out< sc_logic > in_8_V_V_read;
    sc_in< sc_lv<16> > in_9_V_V_dout;
    sc_in< sc_logic > in_9_V_V_empty_n;
    sc_out< sc_logic > in_9_V_V_read;
    sc_in< sc_lv<16> > in_10_V_V_dout;
    sc_in< sc_logic > in_10_V_V_empty_n;
    sc_out< sc_logic > in_10_V_V_read;
    sc_in< sc_lv<16> > in_11_V_V_dout;
    sc_in< sc_logic > in_11_V_V_empty_n;
    sc_out< sc_logic > in_11_V_V_read;
    sc_in< sc_lv<16> > in_12_V_V_dout;
    sc_in< sc_logic > in_12_V_V_empty_n;
    sc_out< sc_logic > in_12_V_V_read;
    sc_in< sc_lv<16> > in_13_V_V_dout;
    sc_in< sc_logic > in_13_V_V_empty_n;
    sc_out< sc_logic > in_13_V_V_read;
    sc_in< sc_lv<16> > in_14_V_V_dout;
    sc_in< sc_logic > in_14_V_V_empty_n;
    sc_out< sc_logic > in_14_V_V_read;
    sc_in< sc_lv<16> > in_15_V_V_dout;
    sc_in< sc_logic > in_15_V_V_empty_n;
    sc_out< sc_logic > in_15_V_V_read;
    sc_out< sc_lv<16> > out_0_V_V_din;
    sc_in< sc_logic > out_0_V_V_full_n;
    sc_out< sc_logic > out_0_V_V_write;
    sc_out< sc_lv<16> > out_1_V_V_din;
    sc_in< sc_logic > out_1_V_V_full_n;
    sc_out< sc_logic > out_1_V_V_write;
    sc_out< sc_lv<16> > out_2_V_V_din;
    sc_in< sc_logic > out_2_V_V_full_n;
    sc_out< sc_logic > out_2_V_V_write;
    sc_out< sc_lv<16> > out_3_V_V_din;
    sc_in< sc_logic > out_3_V_V_full_n;
    sc_out< sc_logic > out_3_V_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    squeeze_1(sc_module_name name);
    SC_HAS_PROCESS(squeeze_1);

    ~squeeze_1();

    sc_trace_file* mVcdFile;

    squeeze_in_1* squeeze_in_1_U0;
    squeeze_out* squeeze_out_U0;
    fifo_w16_d2_A_x5* cache_0_U;
    fifo_w16_d2_A_x5* cache_1_U;
    fifo_w16_d2_A_x5* cache_2_U;
    fifo_w16_d2_A_x5* cache_3_U;
    fifo_w16_d2_A_x5* cache_4_U;
    fifo_w16_d2_A_x5* cache_5_U;
    fifo_w16_d2_A_x5* cache_6_U;
    fifo_w16_d2_A_x5* cache_7_U;
    fifo_w16_d2_A_x5* cache_8_U;
    fifo_w16_d2_A_x5* cache_9_U;
    fifo_w16_d2_A_x5* cache_10_U;
    fifo_w16_d2_A_x5* cache_11_U;
    fifo_w16_d2_A_x5* cache_12_U;
    fifo_w16_d2_A_x5* cache_13_U;
    fifo_w16_d2_A_x5* cache_14_U;
    fifo_w16_d2_A_x5* cache_15_U;
    start_for_squeezebzo* start_for_squeezebzo_U;
    sc_signal< sc_logic > squeeze_in_1_U0_ap_start;
    sc_signal< sc_logic > squeeze_in_1_U0_ap_done;
    sc_signal< sc_logic > squeeze_in_1_U0_ap_continue;
    sc_signal< sc_logic > squeeze_in_1_U0_ap_idle;
    sc_signal< sc_logic > squeeze_in_1_U0_ap_ready;
    sc_signal< sc_logic > squeeze_in_1_U0_start_out;
    sc_signal< sc_logic > squeeze_in_1_U0_start_write;
    sc_signal< sc_logic > squeeze_in_1_U0_in_0_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_1_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_2_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_3_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_4_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_5_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_6_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_7_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_8_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_9_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_10_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_11_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_12_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_13_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_14_V_V_read;
    sc_signal< sc_logic > squeeze_in_1_U0_in_15_V_V_read;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_0_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_0_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_1_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_1_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_2_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_2_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_3_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_3_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_4_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_4_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_5_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_5_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_6_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_6_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_7_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_7_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_8_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_8_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_9_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_9_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_10_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_10_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_11_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_11_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_12_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_12_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_13_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_13_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_14_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_14_V_V_write;
    sc_signal< sc_lv<16> > squeeze_in_1_U0_out_15_V_V_din;
    sc_signal< sc_logic > squeeze_in_1_U0_out_15_V_V_write;
    sc_signal< sc_logic > squeeze_out_U0_ap_start;
    sc_signal< sc_logic > squeeze_out_U0_ap_done;
    sc_signal< sc_logic > squeeze_out_U0_ap_continue;
    sc_signal< sc_logic > squeeze_out_U0_ap_idle;
    sc_signal< sc_logic > squeeze_out_U0_ap_ready;
    sc_signal< sc_logic > squeeze_out_U0_in_9_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_13_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_5_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_1_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_15_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_0_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_2_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_3_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_4_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_6_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_7_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_8_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_10_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_11_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_12_V_V_read;
    sc_signal< sc_logic > squeeze_out_U0_in_14_V_V_read;
    sc_signal< sc_lv<16> > squeeze_out_U0_out_0_V_V_din;
    sc_signal< sc_logic > squeeze_out_U0_out_0_V_V_write;
    sc_signal< sc_lv<16> > squeeze_out_U0_out_1_V_V_din;
    sc_signal< sc_logic > squeeze_out_U0_out_1_V_V_write;
    sc_signal< sc_lv<16> > squeeze_out_U0_out_2_V_V_din;
    sc_signal< sc_logic > squeeze_out_U0_out_2_V_V_write;
    sc_signal< sc_lv<16> > squeeze_out_U0_out_3_V_V_din;
    sc_signal< sc_logic > squeeze_out_U0_out_3_V_V_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > cache_0_full_n;
    sc_signal< sc_lv<16> > cache_0_dout;
    sc_signal< sc_logic > cache_0_empty_n;
    sc_signal< sc_logic > cache_1_full_n;
    sc_signal< sc_lv<16> > cache_1_dout;
    sc_signal< sc_logic > cache_1_empty_n;
    sc_signal< sc_logic > cache_2_full_n;
    sc_signal< sc_lv<16> > cache_2_dout;
    sc_signal< sc_logic > cache_2_empty_n;
    sc_signal< sc_logic > cache_3_full_n;
    sc_signal< sc_lv<16> > cache_3_dout;
    sc_signal< sc_logic > cache_3_empty_n;
    sc_signal< sc_logic > cache_4_full_n;
    sc_signal< sc_lv<16> > cache_4_dout;
    sc_signal< sc_logic > cache_4_empty_n;
    sc_signal< sc_logic > cache_5_full_n;
    sc_signal< sc_lv<16> > cache_5_dout;
    sc_signal< sc_logic > cache_5_empty_n;
    sc_signal< sc_logic > cache_6_full_n;
    sc_signal< sc_lv<16> > cache_6_dout;
    sc_signal< sc_logic > cache_6_empty_n;
    sc_signal< sc_logic > cache_7_full_n;
    sc_signal< sc_lv<16> > cache_7_dout;
    sc_signal< sc_logic > cache_7_empty_n;
    sc_signal< sc_logic > cache_8_full_n;
    sc_signal< sc_lv<16> > cache_8_dout;
    sc_signal< sc_logic > cache_8_empty_n;
    sc_signal< sc_logic > cache_9_full_n;
    sc_signal< sc_lv<16> > cache_9_dout;
    sc_signal< sc_logic > cache_9_empty_n;
    sc_signal< sc_logic > cache_10_full_n;
    sc_signal< sc_lv<16> > cache_10_dout;
    sc_signal< sc_logic > cache_10_empty_n;
    sc_signal< sc_logic > cache_11_full_n;
    sc_signal< sc_lv<16> > cache_11_dout;
    sc_signal< sc_logic > cache_11_empty_n;
    sc_signal< sc_logic > cache_12_full_n;
    sc_signal< sc_lv<16> > cache_12_dout;
    sc_signal< sc_logic > cache_12_empty_n;
    sc_signal< sc_logic > cache_13_full_n;
    sc_signal< sc_lv<16> > cache_13_dout;
    sc_signal< sc_logic > cache_13_empty_n;
    sc_signal< sc_logic > cache_14_full_n;
    sc_signal< sc_lv<16> > cache_14_dout;
    sc_signal< sc_logic > cache_14_empty_n;
    sc_signal< sc_logic > cache_15_full_n;
    sc_signal< sc_lv<16> > cache_15_dout;
    sc_signal< sc_logic > cache_15_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_squeeze_out_U0_din;
    sc_signal< sc_logic > start_for_squeeze_out_U0_full_n;
    sc_signal< sc_lv<1> > start_for_squeeze_out_U0_dout;
    sc_signal< sc_logic > start_for_squeeze_out_U0_empty_n;
    sc_signal< sc_logic > squeeze_out_U0_start_full_n;
    sc_signal< sc_logic > squeeze_out_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_in_0_V_V_read();
    void thread_in_10_V_V_read();
    void thread_in_11_V_V_read();
    void thread_in_12_V_V_read();
    void thread_in_13_V_V_read();
    void thread_in_14_V_V_read();
    void thread_in_15_V_V_read();
    void thread_in_1_V_V_read();
    void thread_in_2_V_V_read();
    void thread_in_3_V_V_read();
    void thread_in_4_V_V_read();
    void thread_in_5_V_V_read();
    void thread_in_6_V_V_read();
    void thread_in_7_V_V_read();
    void thread_in_8_V_V_read();
    void thread_in_9_V_V_read();
    void thread_out_0_V_V_din();
    void thread_out_0_V_V_write();
    void thread_out_1_V_V_din();
    void thread_out_1_V_V_write();
    void thread_out_2_V_V_din();
    void thread_out_2_V_V_write();
    void thread_out_3_V_V_din();
    void thread_out_3_V_V_write();
    void thread_squeeze_in_1_U0_ap_continue();
    void thread_squeeze_in_1_U0_ap_start();
    void thread_squeeze_out_U0_ap_continue();
    void thread_squeeze_out_U0_ap_start();
    void thread_squeeze_out_U0_start_full_n();
    void thread_squeeze_out_U0_start_write();
    void thread_start_for_squeeze_out_U0_din();
};

}

using namespace ap_rtl;

#endif
