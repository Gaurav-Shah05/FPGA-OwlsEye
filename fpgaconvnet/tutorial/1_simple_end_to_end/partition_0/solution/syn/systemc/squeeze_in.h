// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _squeeze_in_HH_
#define _squeeze_in_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct squeeze_in : public sc_module {
    // Port declarations 70
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<16> > in_2_V_V_dout;
    sc_in< sc_logic > in_2_V_V_empty_n;
    sc_out< sc_logic > in_2_V_V_read;
    sc_out< sc_lv<16> > out_10_V_V_din;
    sc_in< sc_logic > out_10_V_V_full_n;
    sc_out< sc_logic > out_10_V_V_write;
    sc_out< sc_lv<16> > out_6_V_V_din;
    sc_in< sc_logic > out_6_V_V_full_n;
    sc_out< sc_logic > out_6_V_V_write;
    sc_out< sc_lv<16> > out_14_V_V_din;
    sc_in< sc_logic > out_14_V_V_full_n;
    sc_out< sc_logic > out_14_V_V_write;
    sc_out< sc_lv<16> > out_2_V_V_din;
    sc_in< sc_logic > out_2_V_V_full_n;
    sc_out< sc_logic > out_2_V_V_write;
    sc_out< sc_lv<16> > out_15_V_V_din;
    sc_in< sc_logic > out_15_V_V_full_n;
    sc_out< sc_logic > out_15_V_V_write;
    sc_in< sc_lv<16> > in_3_V_V_dout;
    sc_in< sc_logic > in_3_V_V_empty_n;
    sc_out< sc_logic > in_3_V_V_read;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<16> > in_0_V_V_dout;
    sc_in< sc_logic > in_0_V_V_empty_n;
    sc_out< sc_logic > in_0_V_V_read;
    sc_in< sc_lv<16> > in_1_V_V_dout;
    sc_in< sc_logic > in_1_V_V_empty_n;
    sc_out< sc_logic > in_1_V_V_read;
    sc_out< sc_lv<16> > out_0_V_V_din;
    sc_in< sc_logic > out_0_V_V_full_n;
    sc_out< sc_logic > out_0_V_V_write;
    sc_out< sc_lv<16> > out_1_V_V_din;
    sc_in< sc_logic > out_1_V_V_full_n;
    sc_out< sc_logic > out_1_V_V_write;
    sc_out< sc_lv<16> > out_3_V_V_din;
    sc_in< sc_logic > out_3_V_V_full_n;
    sc_out< sc_logic > out_3_V_V_write;
    sc_out< sc_lv<16> > out_4_V_V_din;
    sc_in< sc_logic > out_4_V_V_full_n;
    sc_out< sc_logic > out_4_V_V_write;
    sc_out< sc_lv<16> > out_5_V_V_din;
    sc_in< sc_logic > out_5_V_V_full_n;
    sc_out< sc_logic > out_5_V_V_write;
    sc_out< sc_lv<16> > out_7_V_V_din;
    sc_in< sc_logic > out_7_V_V_full_n;
    sc_out< sc_logic > out_7_V_V_write;
    sc_out< sc_lv<16> > out_8_V_V_din;
    sc_in< sc_logic > out_8_V_V_full_n;
    sc_out< sc_logic > out_8_V_V_write;
    sc_out< sc_lv<16> > out_9_V_V_din;
    sc_in< sc_logic > out_9_V_V_full_n;
    sc_out< sc_logic > out_9_V_V_write;
    sc_out< sc_lv<16> > out_11_V_V_din;
    sc_in< sc_logic > out_11_V_V_full_n;
    sc_out< sc_logic > out_11_V_V_write;
    sc_out< sc_lv<16> > out_12_V_V_din;
    sc_in< sc_logic > out_12_V_V_full_n;
    sc_out< sc_logic > out_12_V_V_write;
    sc_out< sc_lv<16> > out_13_V_V_din;
    sc_in< sc_logic > out_13_V_V_full_n;
    sc_out< sc_logic > out_13_V_V_write;


    // Module declarations
    squeeze_in(sc_module_name name);
    SC_HAS_PROCESS(squeeze_in);

    ~squeeze_in();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_lv<1> > icmp_ln64_fu_301_p2;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<4> > cache_index_01_reg_243;
    sc_signal< bool > ap_predicate_op67_write_state5;
    sc_signal< bool > ap_block_state5_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_logic > in_0_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > in_1_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< sc_logic > in_2_V_V_blk_n;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< sc_logic > in_3_V_V_blk_n;
    sc_signal< sc_logic > out_0_V_V_blk_n;
    sc_signal< sc_logic > out_1_V_V_blk_n;
    sc_signal< sc_logic > out_2_V_V_blk_n;
    sc_signal< sc_logic > out_3_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > out_4_V_V_blk_n;
    sc_signal< sc_logic > out_5_V_V_blk_n;
    sc_signal< sc_logic > out_6_V_V_blk_n;
    sc_signal< sc_logic > out_7_V_V_blk_n;
    sc_signal< sc_logic > out_8_V_V_blk_n;
    sc_signal< sc_logic > out_9_V_V_blk_n;
    sc_signal< sc_logic > out_10_V_V_blk_n;
    sc_signal< sc_logic > out_11_V_V_blk_n;
    sc_signal< sc_logic > out_12_V_V_blk_n;
    sc_signal< sc_logic > out_13_V_V_blk_n;
    sc_signal< sc_logic > out_14_V_V_blk_n;
    sc_signal< sc_logic > out_15_V_V_blk_n;
    sc_signal< sc_lv<12> > i_02_reg_275;
    sc_signal< sc_lv<12> > i_fu_289_p2;
    sc_signal< sc_lv<12> > i_reg_309;
    sc_signal< sc_lv<16> > tmp_V_55_reg_314;
    sc_signal< sc_lv<4> > cache_index_fu_295_p2;
    sc_signal< sc_lv<4> > cache_index_reg_322;
    sc_signal< sc_lv<1> > icmp_ln64_reg_327;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_predicate_op84_write_state6;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< bool > ap_predicate_op38_write_state3;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< bool > ap_block_pp0_stage1_01001;
    sc_signal< bool > ap_predicate_op49_write_state4;
    sc_signal< bool > ap_block_state4_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_01001;
    sc_signal< bool > ap_block_pp0_stage3_01001;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_pp0_stage1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage2;
    static const sc_lv<5> ap_ST_fsm_pp0_stage3;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_8;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_C;
    static const sc_lv<4> ap_const_lv4_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<12> ap_const_lv12_8FF;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_01001();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_01001();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_01001();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage2_iter0();
    void thread_ap_block_state5_pp0_stage3_iter0();
    void thread_ap_block_state6_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_predicate_op38_write_state3();
    void thread_ap_predicate_op49_write_state4();
    void thread_ap_predicate_op67_write_state5();
    void thread_ap_predicate_op84_write_state6();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_cache_index_fu_295_p2();
    void thread_i_fu_289_p2();
    void thread_icmp_ln64_fu_301_p2();
    void thread_in_0_V_V_blk_n();
    void thread_in_0_V_V_read();
    void thread_in_1_V_V_blk_n();
    void thread_in_1_V_V_read();
    void thread_in_2_V_V_blk_n();
    void thread_in_2_V_V_read();
    void thread_in_3_V_V_blk_n();
    void thread_in_3_V_V_read();
    void thread_internal_ap_ready();
    void thread_out_0_V_V_blk_n();
    void thread_out_0_V_V_din();
    void thread_out_0_V_V_write();
    void thread_out_10_V_V_blk_n();
    void thread_out_10_V_V_din();
    void thread_out_10_V_V_write();
    void thread_out_11_V_V_blk_n();
    void thread_out_11_V_V_din();
    void thread_out_11_V_V_write();
    void thread_out_12_V_V_blk_n();
    void thread_out_12_V_V_din();
    void thread_out_12_V_V_write();
    void thread_out_13_V_V_blk_n();
    void thread_out_13_V_V_din();
    void thread_out_13_V_V_write();
    void thread_out_14_V_V_blk_n();
    void thread_out_14_V_V_din();
    void thread_out_14_V_V_write();
    void thread_out_15_V_V_blk_n();
    void thread_out_15_V_V_din();
    void thread_out_15_V_V_write();
    void thread_out_1_V_V_blk_n();
    void thread_out_1_V_V_din();
    void thread_out_1_V_V_write();
    void thread_out_2_V_V_blk_n();
    void thread_out_2_V_V_din();
    void thread_out_2_V_V_write();
    void thread_out_3_V_V_blk_n();
    void thread_out_3_V_V_din();
    void thread_out_3_V_V_write();
    void thread_out_4_V_V_blk_n();
    void thread_out_4_V_V_din();
    void thread_out_4_V_V_write();
    void thread_out_5_V_V_blk_n();
    void thread_out_5_V_V_din();
    void thread_out_5_V_V_write();
    void thread_out_6_V_V_blk_n();
    void thread_out_6_V_V_din();
    void thread_out_6_V_V_write();
    void thread_out_7_V_V_blk_n();
    void thread_out_7_V_V_din();
    void thread_out_7_V_V_write();
    void thread_out_8_V_V_blk_n();
    void thread_out_8_V_V_din();
    void thread_out_8_V_V_write();
    void thread_out_9_V_V_blk_n();
    void thread_out_9_V_V_din();
    void thread_out_9_V_V_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
