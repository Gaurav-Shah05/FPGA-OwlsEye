// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _squeeze_in_1_HH_
#define _squeeze_in_1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct squeeze_in_1 : public sc_module {
    // Port declarations 106
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<16> > in_0_V_V_dout;
    sc_in< sc_logic > in_0_V_V_empty_n;
    sc_out< sc_logic > in_0_V_V_read;
    sc_in< sc_lv<16> > in_1_V_V_dout;
    sc_in< sc_logic > in_1_V_V_empty_n;
    sc_out< sc_logic > in_1_V_V_read;
    sc_in< sc_lv<16> > in_2_V_V_dout;
    sc_in< sc_logic > in_2_V_V_empty_n;
    sc_out< sc_logic > in_2_V_V_read;
    sc_in< sc_lv<16> > in_3_V_V_dout;
    sc_in< sc_logic > in_3_V_V_empty_n;
    sc_out< sc_logic > in_3_V_V_read;
    sc_in< sc_lv<16> > in_4_V_V_dout;
    sc_in< sc_logic > in_4_V_V_empty_n;
    sc_out< sc_logic > in_4_V_V_read;
    sc_in< sc_lv<16> > in_5_V_V_dout;
    sc_in< sc_logic > in_5_V_V_empty_n;
    sc_out< sc_logic > in_5_V_V_read;
    sc_in< sc_lv<16> > in_6_V_V_dout;
    sc_in< sc_logic > in_6_V_V_empty_n;
    sc_out< sc_logic > in_6_V_V_read;
    sc_in< sc_lv<16> > in_7_V_V_dout;
    sc_in< sc_logic > in_7_V_V_empty_n;
    sc_out< sc_logic > in_7_V_V_read;
    sc_in< sc_lv<16> > in_8_V_V_dout;
    sc_in< sc_logic > in_8_V_V_empty_n;
    sc_out< sc_logic > in_8_V_V_read;
    sc_in< sc_lv<16> > in_9_V_V_dout;
    sc_in< sc_logic > in_9_V_V_empty_n;
    sc_out< sc_logic > in_9_V_V_read;
    sc_in< sc_lv<16> > in_10_V_V_dout;
    sc_in< sc_logic > in_10_V_V_empty_n;
    sc_out< sc_logic > in_10_V_V_read;
    sc_in< sc_lv<16> > in_11_V_V_dout;
    sc_in< sc_logic > in_11_V_V_empty_n;
    sc_out< sc_logic > in_11_V_V_read;
    sc_in< sc_lv<16> > in_12_V_V_dout;
    sc_in< sc_logic > in_12_V_V_empty_n;
    sc_out< sc_logic > in_12_V_V_read;
    sc_in< sc_lv<16> > in_13_V_V_dout;
    sc_in< sc_logic > in_13_V_V_empty_n;
    sc_out< sc_logic > in_13_V_V_read;
    sc_in< sc_lv<16> > in_14_V_V_dout;
    sc_in< sc_logic > in_14_V_V_empty_n;
    sc_out< sc_logic > in_14_V_V_read;
    sc_in< sc_lv<16> > in_15_V_V_dout;
    sc_in< sc_logic > in_15_V_V_empty_n;
    sc_out< sc_logic > in_15_V_V_read;
    sc_out< sc_lv<16> > out_0_V_V_din;
    sc_in< sc_logic > out_0_V_V_full_n;
    sc_out< sc_logic > out_0_V_V_write;
    sc_out< sc_lv<16> > out_1_V_V_din;
    sc_in< sc_logic > out_1_V_V_full_n;
    sc_out< sc_logic > out_1_V_V_write;
    sc_out< sc_lv<16> > out_2_V_V_din;
    sc_in< sc_logic > out_2_V_V_full_n;
    sc_out< sc_logic > out_2_V_V_write;
    sc_out< sc_lv<16> > out_3_V_V_din;
    sc_in< sc_logic > out_3_V_V_full_n;
    sc_out< sc_logic > out_3_V_V_write;
    sc_out< sc_lv<16> > out_4_V_V_din;
    sc_in< sc_logic > out_4_V_V_full_n;
    sc_out< sc_logic > out_4_V_V_write;
    sc_out< sc_lv<16> > out_5_V_V_din;
    sc_in< sc_logic > out_5_V_V_full_n;
    sc_out< sc_logic > out_5_V_V_write;
    sc_out< sc_lv<16> > out_6_V_V_din;
    sc_in< sc_logic > out_6_V_V_full_n;
    sc_out< sc_logic > out_6_V_V_write;
    sc_out< sc_lv<16> > out_7_V_V_din;
    sc_in< sc_logic > out_7_V_V_full_n;
    sc_out< sc_logic > out_7_V_V_write;
    sc_out< sc_lv<16> > out_8_V_V_din;
    sc_in< sc_logic > out_8_V_V_full_n;
    sc_out< sc_logic > out_8_V_V_write;
    sc_out< sc_lv<16> > out_9_V_V_din;
    sc_in< sc_logic > out_9_V_V_full_n;
    sc_out< sc_logic > out_9_V_V_write;
    sc_out< sc_lv<16> > out_10_V_V_din;
    sc_in< sc_logic > out_10_V_V_full_n;
    sc_out< sc_logic > out_10_V_V_write;
    sc_out< sc_lv<16> > out_11_V_V_din;
    sc_in< sc_logic > out_11_V_V_full_n;
    sc_out< sc_logic > out_11_V_V_write;
    sc_out< sc_lv<16> > out_12_V_V_din;
    sc_in< sc_logic > out_12_V_V_full_n;
    sc_out< sc_logic > out_12_V_V_write;
    sc_out< sc_lv<16> > out_13_V_V_din;
    sc_in< sc_logic > out_13_V_V_full_n;
    sc_out< sc_logic > out_13_V_V_write;
    sc_out< sc_lv<16> > out_14_V_V_din;
    sc_in< sc_logic > out_14_V_V_full_n;
    sc_out< sc_logic > out_14_V_V_write;
    sc_out< sc_lv<16> > out_15_V_V_din;
    sc_in< sc_logic > out_15_V_V_full_n;
    sc_out< sc_logic > out_15_V_V_write;


    // Module declarations
    squeeze_in_1(sc_module_name name);
    SC_HAS_PROCESS(squeeze_in_1);

    ~squeeze_in_1();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > in_0_V_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > in_1_V_V_blk_n;
    sc_signal< sc_logic > in_2_V_V_blk_n;
    sc_signal< sc_logic > in_3_V_V_blk_n;
    sc_signal< sc_logic > in_4_V_V_blk_n;
    sc_signal< sc_logic > in_5_V_V_blk_n;
    sc_signal< sc_logic > in_6_V_V_blk_n;
    sc_signal< sc_logic > in_7_V_V_blk_n;
    sc_signal< sc_logic > in_8_V_V_blk_n;
    sc_signal< sc_logic > in_9_V_V_blk_n;
    sc_signal< sc_logic > in_10_V_V_blk_n;
    sc_signal< sc_logic > in_11_V_V_blk_n;
    sc_signal< sc_logic > in_12_V_V_blk_n;
    sc_signal< sc_logic > in_13_V_V_blk_n;
    sc_signal< sc_logic > in_14_V_V_blk_n;
    sc_signal< sc_logic > in_15_V_V_blk_n;
    sc_signal< sc_logic > out_0_V_V_blk_n;
    sc_signal< sc_logic > out_1_V_V_blk_n;
    sc_signal< sc_logic > out_2_V_V_blk_n;
    sc_signal< sc_logic > out_3_V_V_blk_n;
    sc_signal< sc_logic > out_4_V_V_blk_n;
    sc_signal< sc_logic > out_5_V_V_blk_n;
    sc_signal< sc_logic > out_6_V_V_blk_n;
    sc_signal< sc_logic > out_7_V_V_blk_n;
    sc_signal< sc_logic > out_8_V_V_blk_n;
    sc_signal< sc_logic > out_9_V_V_blk_n;
    sc_signal< sc_logic > out_10_V_V_blk_n;
    sc_signal< sc_logic > out_11_V_V_blk_n;
    sc_signal< sc_logic > out_12_V_V_blk_n;
    sc_signal< sc_logic > out_13_V_V_blk_n;
    sc_signal< sc_logic > out_14_V_V_blk_n;
    sc_signal< sc_logic > out_15_V_V_blk_n;
    sc_signal< sc_lv<10> > i_fu_361_p2;
    sc_signal< bool > ap_block_state2;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<1> > icmp_ln64_fu_367_p2;
    sc_signal< sc_lv<10> > i_01_reg_347;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<10> ap_const_lv10_23F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_i_fu_361_p2();
    void thread_icmp_ln64_fu_367_p2();
    void thread_in_0_V_V_blk_n();
    void thread_in_0_V_V_read();
    void thread_in_10_V_V_blk_n();
    void thread_in_10_V_V_read();
    void thread_in_11_V_V_blk_n();
    void thread_in_11_V_V_read();
    void thread_in_12_V_V_blk_n();
    void thread_in_12_V_V_read();
    void thread_in_13_V_V_blk_n();
    void thread_in_13_V_V_read();
    void thread_in_14_V_V_blk_n();
    void thread_in_14_V_V_read();
    void thread_in_15_V_V_blk_n();
    void thread_in_15_V_V_read();
    void thread_in_1_V_V_blk_n();
    void thread_in_1_V_V_read();
    void thread_in_2_V_V_blk_n();
    void thread_in_2_V_V_read();
    void thread_in_3_V_V_blk_n();
    void thread_in_3_V_V_read();
    void thread_in_4_V_V_blk_n();
    void thread_in_4_V_V_read();
    void thread_in_5_V_V_blk_n();
    void thread_in_5_V_V_read();
    void thread_in_6_V_V_blk_n();
    void thread_in_6_V_V_read();
    void thread_in_7_V_V_blk_n();
    void thread_in_7_V_V_read();
    void thread_in_8_V_V_blk_n();
    void thread_in_8_V_V_read();
    void thread_in_9_V_V_blk_n();
    void thread_in_9_V_V_read();
    void thread_internal_ap_ready();
    void thread_out_0_V_V_blk_n();
    void thread_out_0_V_V_din();
    void thread_out_0_V_V_write();
    void thread_out_10_V_V_blk_n();
    void thread_out_10_V_V_din();
    void thread_out_10_V_V_write();
    void thread_out_11_V_V_blk_n();
    void thread_out_11_V_V_din();
    void thread_out_11_V_V_write();
    void thread_out_12_V_V_blk_n();
    void thread_out_12_V_V_din();
    void thread_out_12_V_V_write();
    void thread_out_13_V_V_blk_n();
    void thread_out_13_V_V_din();
    void thread_out_13_V_V_write();
    void thread_out_14_V_V_blk_n();
    void thread_out_14_V_V_din();
    void thread_out_14_V_V_write();
    void thread_out_15_V_V_blk_n();
    void thread_out_15_V_V_din();
    void thread_out_15_V_V_write();
    void thread_out_1_V_V_blk_n();
    void thread_out_1_V_V_din();
    void thread_out_1_V_V_write();
    void thread_out_2_V_V_blk_n();
    void thread_out_2_V_V_din();
    void thread_out_2_V_V_write();
    void thread_out_3_V_V_blk_n();
    void thread_out_3_V_V_din();
    void thread_out_3_V_V_write();
    void thread_out_4_V_V_blk_n();
    void thread_out_4_V_V_din();
    void thread_out_4_V_V_write();
    void thread_out_5_V_V_blk_n();
    void thread_out_5_V_V_din();
    void thread_out_5_V_V_write();
    void thread_out_6_V_V_blk_n();
    void thread_out_6_V_V_din();
    void thread_out_6_V_V_write();
    void thread_out_7_V_V_blk_n();
    void thread_out_7_V_V_din();
    void thread_out_7_V_V_write();
    void thread_out_8_V_V_blk_n();
    void thread_out_8_V_V_din();
    void thread_out_8_V_V_write();
    void thread_out_9_V_V_blk_n();
    void thread_out_9_V_V_din();
    void thread_out_9_V_V_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
