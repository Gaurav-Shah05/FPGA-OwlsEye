// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module posit16_multiply (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_ui,
        b_ui,
        ap_return
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] a_ui;
input  [15:0] b_ui;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] grp_posit16_to_double_fu_56_ap_return;
reg   [63:0] da_reg_135;
wire    ap_CS_fsm_state2;
wire    grp_posit16_to_double_fu_56_ap_ready;
wire    grp_posit16_to_double_fu_56_ap_done;
wire    grp_posit16_to_double_fu_86_ap_ready;
wire    grp_posit16_to_double_fu_86_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [63:0] grp_posit16_to_double_fu_86_ap_return;
reg   [63:0] db_reg_140;
wire   [63:0] grp_fu_121_p2;
reg   [63:0] prod_reg_145;
wire    ap_CS_fsm_state12;
wire    grp_posit16_to_double_fu_56_ap_start;
wire    grp_posit16_to_double_fu_56_ap_idle;
wire    grp_posit16_to_double_fu_86_ap_start;
wire    grp_posit16_to_double_fu_86_ap_idle;
wire    grp_double_to_posit16_fu_116_ap_start;
wire    grp_double_to_posit16_fu_116_ap_done;
wire    grp_double_to_posit16_fu_116_ap_idle;
wire    grp_double_to_posit16_fu_116_ap_ready;
wire   [15:0] grp_double_to_posit16_fu_116_ap_return;
reg    grp_posit16_to_double_fu_56_ap_start_reg;
reg    grp_posit16_to_double_fu_86_ap_start_reg;
reg    grp_double_to_posit16_fu_116_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state3;
reg   [15:0] ap_return_preg;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 grp_posit16_to_double_fu_56_ap_start_reg = 1'b0;
#0 grp_posit16_to_double_fu_86_ap_start_reg = 1'b0;
#0 grp_double_to_posit16_fu_116_ap_start_reg = 1'b0;
#0 ap_return_preg = 16'd0;
end

posit16_to_double grp_posit16_to_double_fu_56(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_posit16_to_double_fu_56_ap_start),
    .ap_done(grp_posit16_to_double_fu_56_ap_done),
    .ap_idle(grp_posit16_to_double_fu_56_ap_idle),
    .ap_ready(grp_posit16_to_double_fu_56_ap_ready),
    .ui(a_ui),
    .ap_return(grp_posit16_to_double_fu_56_ap_return)
);

posit16_to_double grp_posit16_to_double_fu_86(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_posit16_to_double_fu_86_ap_start),
    .ap_done(grp_posit16_to_double_fu_86_ap_done),
    .ap_idle(grp_posit16_to_double_fu_86_ap_idle),
    .ap_ready(grp_posit16_to_double_fu_86_ap_ready),
    .ui(b_ui),
    .ap_return(grp_posit16_to_double_fu_86_ap_return)
);

double_to_posit16 grp_double_to_posit16_fu_116(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_double_to_posit16_fu_116_ap_start),
    .ap_done(grp_double_to_posit16_fu_116_ap_done),
    .ap_idle(grp_double_to_posit16_fu_116_ap_idle),
    .ap_ready(grp_double_to_posit16_fu_116_ap_ready),
    .f(prod_reg_145),
    .ap_return(grp_double_to_posit16_fu_116_ap_return)
);

fpgaconvnet_ip_dmeOg #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
fpgaconvnet_ip_dmeOg_U858(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(da_reg_135),
    .din1(db_reg_140),
    .ce(1'b1),
    .dout(grp_fu_121_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 16'd0;
    end else begin
        if (((grp_double_to_posit16_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
            ap_return_preg <= grp_double_to_posit16_fu_116_ap_return;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_double_to_posit16_fu_116_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_double_to_posit16_fu_116_ap_start_reg <= 1'b1;
        end else if ((grp_double_to_posit16_fu_116_ap_ready == 1'b1)) begin
            grp_double_to_posit16_fu_116_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_posit16_to_double_fu_56_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_posit16_to_double_fu_56_ap_start_reg <= 1'b1;
        end else if ((grp_posit16_to_double_fu_56_ap_ready == 1'b1)) begin
            grp_posit16_to_double_fu_56_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_posit16_to_double_fu_86_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_posit16_to_double_fu_86_ap_start_reg <= 1'b1;
        end else if ((grp_posit16_to_double_fu_86_ap_ready == 1'b1)) begin
            grp_posit16_to_double_fu_86_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        da_reg_135 <= grp_posit16_to_double_fu_56_ap_return;
        db_reg_140 <= grp_posit16_to_double_fu_86_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        prod_reg_145 <= grp_fu_121_p2;
    end
end

always @ (*) begin
    if ((((grp_double_to_posit16_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_double_to_posit16_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_double_to_posit16_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        ap_return = grp_double_to_posit16_fu_116_ap_return;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_double_to_posit16_fu_116_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_posit16_to_double_fu_86_ap_done == 1'b0) | (grp_posit16_to_double_fu_56_ap_done == 1'b0));
end

assign grp_double_to_posit16_fu_116_ap_start = grp_double_to_posit16_fu_116_ap_start_reg;

assign grp_posit16_to_double_fu_56_ap_start = grp_posit16_to_double_fu_56_ap_start_reg;

assign grp_posit16_to_double_fu_86_ap_start = grp_posit16_to_double_fu_86_ap_start_reg;

endmodule //posit16_multiply
