-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bias513 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    in_V_V_empty_n : IN STD_LOGIC;
    in_V_V_read : OUT STD_LOGIC;
    out_V_V_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_V_V_full_n : IN STD_LOGIC;
    out_V_V_write : OUT STD_LOGIC );
end;


architecture behav of bias513 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv12_8FF : STD_LOGIC_VECTOR (11 downto 0) := "100011111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln58_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter3 : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal Conv_0_biases_V_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal Conv_0_biases_V_1_ce0 : STD_LOGIC;
    signal Conv_0_biases_V_1_q0 : STD_LOGIC_VECTOR (23 downto 0);
    signal in_V_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal out_V_V_blk_n : STD_LOGIC;
    signal i_06_reg_120 : STD_LOGIC_VECTOR (11 downto 0);
    signal loops_0_05_reg_134 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_153_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_reg_221 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln321_fu_159_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln321_reg_226 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln58_reg_231 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_231_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_231_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_751_reg_235 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_115_reg_240 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_399_reg_245 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_399_reg_245_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_117_reg_250 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_06_phi_fu_124_p6 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_loops_0_05_phi_fu_138_p6 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln61_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln415_fu_171_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_399_fu_182_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln703_fu_197_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal lhs_V_fu_190_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal ret_V_fu_200_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_72 : BOOLEAN;

    component bias513_Conv_0_bibll IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;



begin
    Conv_0_biases_V_1_U : component bias513_Conv_0_bibll
    generic map (
        DataWidth => 24,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Conv_0_biases_V_1_address0,
        ce0 => Conv_0_biases_V_1_ce0,
        q0 => Conv_0_biases_V_1_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_06_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_reg_231 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_06_reg_120 <= i_reg_221;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_231 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                i_06_reg_120 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    loops_0_05_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_reg_231 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                loops_0_05_reg_134 <= add_ln321_reg_226;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_231 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                loops_0_05_reg_134 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln321_reg_226 <= add_ln321_fu_159_p2;
                i_reg_221 <= i_fu_153_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln58_reg_231 <= icmp_ln58_fu_165_p2;
                icmp_ln58_reg_231_pp0_iter1_reg <= icmp_ln58_reg_231;
                p_Val2_115_reg_240 <= Conv_0_biases_V_1_q0;
                tmp_399_reg_245 <= tmp_399_fu_182_p1(16 downto 16);
                tmp_V_751_reg_235 <= in_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln58_reg_231_pp0_iter2_reg <= icmp_ln58_reg_231_pp0_iter1_reg;
                p_Val2_117_reg_250 <= ret_V_fu_200_p2(32 downto 17);
                tmp_399_reg_245_pp0_iter2_reg <= tmp_399_reg_245;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    Conv_0_biases_V_1_address0 <= zext_ln61_fu_148_p1(2 - 1 downto 0);

    Conv_0_biases_V_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Conv_0_biases_V_1_ce0 <= ap_const_logic_1;
        else 
            Conv_0_biases_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln321_fu_159_p2 <= std_logic_vector(unsigned(ap_phi_mux_loops_0_05_phi_fu_138_p6) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, out_V_V_full_n, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_01001 <= (((out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, out_V_V_full_n, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_11001 <= (((out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(in_V_V_empty_n, ap_enable_reg_pp0_iter1, out_V_V_full_n, ap_enable_reg_pp0_iter3)
    begin
                ap_block_pp0_stage0_subdone <= (((out_V_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((in_V_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter3_assign_proc : process(out_V_V_full_n)
    begin
                ap_block_state3_pp0_stage0_iter3 <= (out_V_V_full_n = ap_const_logic_0);
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(in_V_V_empty_n)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (in_V_V_empty_n = ap_const_logic_0);
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_72_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_72 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, icmp_ln58_reg_231_pp0_iter2_reg)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_231_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_06_phi_fu_124_p6_assign_proc : process(i_06_reg_120, i_reg_221, icmp_ln58_reg_231, ap_condition_72)
    begin
        if ((ap_const_boolean_1 = ap_condition_72)) then
            if ((icmp_ln58_reg_231 = ap_const_lv1_1)) then 
                ap_phi_mux_i_06_phi_fu_124_p6 <= ap_const_lv12_0;
            elsif ((icmp_ln58_reg_231 = ap_const_lv1_0)) then 
                ap_phi_mux_i_06_phi_fu_124_p6 <= i_reg_221;
            else 
                ap_phi_mux_i_06_phi_fu_124_p6 <= i_06_reg_120;
            end if;
        else 
            ap_phi_mux_i_06_phi_fu_124_p6 <= i_06_reg_120;
        end if; 
    end process;


    ap_phi_mux_loops_0_05_phi_fu_138_p6_assign_proc : process(loops_0_05_reg_134, add_ln321_reg_226, icmp_ln58_reg_231, ap_condition_72)
    begin
        if ((ap_const_boolean_1 = ap_condition_72)) then
            if ((icmp_ln58_reg_231 = ap_const_lv1_1)) then 
                ap_phi_mux_loops_0_05_phi_fu_138_p6 <= ap_const_lv2_0;
            elsif ((icmp_ln58_reg_231 = ap_const_lv1_0)) then 
                ap_phi_mux_loops_0_05_phi_fu_138_p6 <= add_ln321_reg_226;
            else 
                ap_phi_mux_loops_0_05_phi_fu_138_p6 <= loops_0_05_reg_134;
            end if;
        else 
            ap_phi_mux_loops_0_05_phi_fu_138_p6 <= loops_0_05_reg_134;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln58_fu_165_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_fu_165_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_153_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_06_phi_fu_124_p6) + unsigned(ap_const_lv12_1));
    icmp_ln58_fu_165_p2 <= "1" when (ap_phi_mux_i_06_phi_fu_124_p6 = ap_const_lv12_8FF) else "0";

    in_V_V_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, in_V_V_empty_n, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_blk_n <= in_V_V_empty_n;
        else 
            in_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_V_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_V_V_read <= ap_const_logic_1;
        else 
            in_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_fu_190_p3 <= (tmp_V_751_reg_235 & ap_const_lv17_0);

    out_V_V_blk_n_assign_proc : process(out_V_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_blk_n <= out_V_V_full_n;
        else 
            out_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_V_V_din <= std_logic_vector(unsigned(zext_ln415_fu_171_p1) + unsigned(p_Val2_117_reg_250));

    out_V_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_V_V_write <= ap_const_logic_1;
        else 
            out_V_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ret_V_fu_200_p2 <= std_logic_vector(signed(sext_ln703_fu_197_p1) + signed(lhs_V_fu_190_p3));
        sext_ln703_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_115_reg_240),33));

    tmp_399_fu_182_p1 <= Conv_0_biases_V_1_q0;
    zext_ln415_fu_171_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_399_reg_245_pp0_iter2_reg),16));
    zext_ln61_fu_148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_loops_0_05_phi_fu_138_p6),64));
end behav;
