-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mem_write is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    weights_reloading_in_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_reloading_in_3_empty_n : IN STD_LOGIC;
    weights_reloading_in_3_read : OUT STD_LOGIC;
    out_0_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    out_0_V_V_empty_n : IN STD_LOGIC;
    out_0_V_V_read : OUT STD_LOGIC;
    out_1_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    out_1_V_V_empty_n : IN STD_LOGIC;
    out_1_V_V_read : OUT STD_LOGIC;
    out_2_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    out_2_V_V_empty_n : IN STD_LOGIC;
    out_2_V_V_read : OUT STD_LOGIC;
    out_3_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    out_3_V_V_empty_n : IN STD_LOGIC;
    out_3_V_V_read : OUT STD_LOGIC;
    m_axi_out_hw_V_AWVALID : OUT STD_LOGIC;
    m_axi_out_hw_V_AWREADY : IN STD_LOGIC;
    m_axi_out_hw_V_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_hw_V_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_hw_V_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_hw_V_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_hw_V_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_hw_V_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_hw_V_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_hw_V_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_hw_V_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_hw_V_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_WVALID : OUT STD_LOGIC;
    m_axi_out_hw_V_WREADY : IN STD_LOGIC;
    m_axi_out_hw_V_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_hw_V_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_out_hw_V_WLAST : OUT STD_LOGIC;
    m_axi_out_hw_V_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_ARVALID : OUT STD_LOGIC;
    m_axi_out_hw_V_ARREADY : IN STD_LOGIC;
    m_axi_out_hw_V_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_hw_V_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_out_hw_V_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_hw_V_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_hw_V_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_hw_V_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_hw_V_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_out_hw_V_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_hw_V_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_out_hw_V_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_RVALID : IN STD_LOGIC;
    m_axi_out_hw_V_RREADY : OUT STD_LOGIC;
    m_axi_out_hw_V_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_out_hw_V_RLAST : IN STD_LOGIC;
    m_axi_out_hw_V_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_hw_V_BVALID : IN STD_LOGIC;
    m_axi_out_hw_V_BREADY : OUT STD_LOGIC;
    m_axi_out_hw_V_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_out_hw_V_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_out_hw_V_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_hw_V_offset_dout : IN STD_LOGIC_VECTOR (28 downto 0);
    out_hw_V_offset_empty_n : IN STD_LOGIC;
    out_hw_V_offset_read : OUT STD_LOGIC );
end;


architecture behav of mem_write is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv12_900 : STD_LOGIC_VECTOR (11 downto 0) := "100100000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv10_23E : STD_LOGIC_VECTOR (9 downto 0) := "1000111110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal weights_reloading_in_3_blk_n : STD_LOGIC;
    signal out_0_V_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln68_reg_311 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_311_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_1_V_V_blk_n : STD_LOGIC;
    signal out_2_V_V_blk_n : STD_LOGIC;
    signal out_3_V_V_blk_n : STD_LOGIC;
    signal out_hw_V_blk_n_AW : STD_LOGIC;
    signal out_hw_V_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln68_reg_311_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_hw_V_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln68_reg_311_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_hw_V_offset_blk_n : STD_LOGIC;
    signal loops_1_0_i_i_i_reg_154 : STD_LOGIC_VECTOR (9 downto 0);
    signal loops_0_0_i_i_i_reg_165 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_0_i_i_i_reg_176 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_187_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_reg_301 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal zext_ln68_fu_191_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln68_reg_306 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln68_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln68_reg_311_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_311_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_311_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_311_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal loops_impl_next_i_s_fu_201_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal out_index_fu_216_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_index_reg_320 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_224_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln891_fu_256_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln332_fu_267_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln332_reg_335 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_V_reg_340 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_141_reg_345 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_142_reg_350 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_143_reg_355 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal sext_ln332_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal empty_221_fu_207_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp4_i_i_i_fu_211_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal icmp_ln891_4_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal loops_impl_i_V_fu_242_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln891_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln206_fu_248_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln87_fu_264_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_i_i_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_195_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_i_i_i_reg_176 <= i_fu_224_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_i_i_reg_176 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    loops_0_0_i_i_i_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_195_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                loops_0_0_i_i_i_reg_165 <= loops_impl_next_i_s_fu_201_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loops_0_0_i_i_i_reg_165 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    loops_1_0_i_i_i_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_195_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                loops_1_0_i_i_i_reg_154 <= select_ln891_fu_256_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                loops_1_0_i_i_i_reg_154 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_311 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln332_reg_335 <= add_ln332_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                empty_reg_301 <= empty_fu_187_p1;
                    zext_ln68_reg_306(28 downto 0) <= zext_ln68_fu_191_p1(28 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln68_reg_311 <= icmp_ln68_fu_195_p2;
                icmp_ln68_reg_311_pp0_iter1_reg <= icmp_ln68_reg_311;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln68_reg_311_pp0_iter2_reg <= icmp_ln68_reg_311_pp0_iter1_reg;
                icmp_ln68_reg_311_pp0_iter3_reg <= icmp_ln68_reg_311_pp0_iter2_reg;
                icmp_ln68_reg_311_pp0_iter4_reg <= icmp_ln68_reg_311_pp0_iter3_reg;
                icmp_ln68_reg_311_pp0_iter5_reg <= icmp_ln68_reg_311_pp0_iter4_reg;
                icmp_ln68_reg_311_pp0_iter6_reg <= icmp_ln68_reg_311_pp0_iter5_reg;
                icmp_ln68_reg_311_pp0_iter7_reg <= icmp_ln68_reg_311_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_195_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                out_index_reg_320 <= out_index_fu_216_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_141_reg_345 <= out_1_V_V_dout;
                tmp_V_142_reg_350 <= out_2_V_V_dout;
                tmp_V_143_reg_355 <= out_3_V_V_dout;
                tmp_V_reg_340 <= out_0_V_V_dout;
            end if;
        end if;
    end process;
    zext_ln68_reg_306(32 downto 29) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, weights_reloading_in_3_empty_n, out_hw_V_offset_empty_n, ap_enable_reg_pp0_iter8, icmp_ln68_fu_195_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln68_fu_195_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln68_fu_195_p2 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln332_fu_267_p2 <= std_logic_vector(unsigned(zext_ln68_reg_306) + unsigned(sext_ln87_fu_264_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_0_V_V_empty_n, out_1_V_V_empty_n, out_2_V_V_empty_n, out_3_V_V_empty_n, m_axi_out_hw_V_BVALID, ap_enable_reg_pp0_iter2, icmp_ln68_reg_311_pp0_iter1_reg, ap_enable_reg_pp0_iter8, icmp_ln68_reg_311_pp0_iter7_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((icmp_ln68_reg_311_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_out_hw_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_3_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_2_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_0_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_0_V_V_empty_n, out_1_V_V_empty_n, out_2_V_V_empty_n, out_3_V_V_empty_n, m_axi_out_hw_V_BVALID, ap_enable_reg_pp0_iter2, icmp_ln68_reg_311_pp0_iter1_reg, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, icmp_ln68_reg_311_pp0_iter7_reg, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((icmp_ln68_reg_311_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_out_hw_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_3_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_2_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_0_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_0_V_V_empty_n, out_1_V_V_empty_n, out_2_V_V_empty_n, out_3_V_V_empty_n, m_axi_out_hw_V_BVALID, ap_enable_reg_pp0_iter2, icmp_ln68_reg_311_pp0_iter1_reg, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, icmp_ln68_reg_311_pp0_iter7_reg, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((icmp_ln68_reg_311_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_out_hw_V_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_3_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_2_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_0_V_V_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, weights_reloading_in_3_empty_n, out_hw_V_offset_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter8_assign_proc : process(m_axi_out_hw_V_BVALID, icmp_ln68_reg_311_pp0_iter7_reg)
    begin
                ap_block_state10_pp0_stage0_iter8 <= ((icmp_ln68_reg_311_pp0_iter7_reg = ap_const_lv1_0) and (m_axi_out_hw_V_BVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_out_hw_V_AWREADY, icmp_ln68_reg_311_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_out_hw_V_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter2_assign_proc : process(out_0_V_V_empty_n, out_1_V_V_empty_n, out_2_V_V_empty_n, out_3_V_V_empty_n, icmp_ln68_reg_311_pp0_iter1_reg)
    begin
                ap_block_state4_pp0_stage0_iter2 <= (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_3_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_2_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_1_V_V_empty_n = ap_const_logic_0)) or ((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (out_0_V_V_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_io_assign_proc : process(m_axi_out_hw_V_WREADY, icmp_ln68_reg_311_pp0_iter2_reg)
    begin
                ap_block_state5_io <= ((icmp_ln68_reg_311_pp0_iter2_reg = ap_const_lv1_0) and (m_axi_out_hw_V_WREADY = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln68_fu_195_p2)
    begin
        if ((icmp_ln68_fu_195_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_221_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loops_1_0_i_i_i_reg_154),30));
    empty_fu_187_p1 <= weights_reloading_in_3_dout(30 - 1 downto 0);
    i_fu_224_p2 <= std_logic_vector(unsigned(i_0_i_i_i_reg_176) + unsigned(ap_const_lv12_1));
    icmp_ln68_fu_195_p2 <= "1" when (i_0_i_i_i_reg_176 = ap_const_lv12_900) else "0";
    icmp_ln891_4_fu_236_p2 <= "1" when (unsigned(loops_1_0_i_i_i_reg_154) > unsigned(ap_const_lv10_23E)) else "0";
    icmp_ln891_fu_230_p2 <= "1" when (loops_0_0_i_i_i_reg_165 = ap_const_lv2_3) else "0";
    loops_impl_i_V_fu_242_p2 <= std_logic_vector(unsigned(loops_1_0_i_i_i_reg_154) + unsigned(ap_const_lv10_1));
    loops_impl_next_i_s_fu_201_p2 <= std_logic_vector(unsigned(loops_0_0_i_i_i_reg_165) + unsigned(ap_const_lv2_1));
    m_axi_out_hw_V_ARADDR <= ap_const_lv32_0;
    m_axi_out_hw_V_ARBURST <= ap_const_lv2_0;
    m_axi_out_hw_V_ARCACHE <= ap_const_lv4_0;
    m_axi_out_hw_V_ARID <= ap_const_lv1_0;
    m_axi_out_hw_V_ARLEN <= ap_const_lv32_0;
    m_axi_out_hw_V_ARLOCK <= ap_const_lv2_0;
    m_axi_out_hw_V_ARPROT <= ap_const_lv3_0;
    m_axi_out_hw_V_ARQOS <= ap_const_lv4_0;
    m_axi_out_hw_V_ARREGION <= ap_const_lv4_0;
    m_axi_out_hw_V_ARSIZE <= ap_const_lv3_0;
    m_axi_out_hw_V_ARUSER <= ap_const_lv1_0;
    m_axi_out_hw_V_ARVALID <= ap_const_logic_0;
    m_axi_out_hw_V_AWADDR <= sext_ln332_fu_272_p1(32 - 1 downto 0);
    m_axi_out_hw_V_AWBURST <= ap_const_lv2_0;
    m_axi_out_hw_V_AWCACHE <= ap_const_lv4_0;
    m_axi_out_hw_V_AWID <= ap_const_lv1_0;
    m_axi_out_hw_V_AWLEN <= ap_const_lv32_1;
    m_axi_out_hw_V_AWLOCK <= ap_const_lv2_0;
    m_axi_out_hw_V_AWPROT <= ap_const_lv3_0;
    m_axi_out_hw_V_AWQOS <= ap_const_lv4_0;
    m_axi_out_hw_V_AWREGION <= ap_const_lv4_0;
    m_axi_out_hw_V_AWSIZE <= ap_const_lv3_0;
    m_axi_out_hw_V_AWUSER <= ap_const_lv1_0;

    m_axi_out_hw_V_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln68_reg_311_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_out_hw_V_AWVALID <= ap_const_logic_1;
        else 
            m_axi_out_hw_V_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_out_hw_V_BREADY_assign_proc : process(ap_enable_reg_pp0_iter8, icmp_ln68_reg_311_pp0_iter7_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_311_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_out_hw_V_BREADY <= ap_const_logic_1;
        else 
            m_axi_out_hw_V_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_out_hw_V_RREADY <= ap_const_logic_0;
    m_axi_out_hw_V_WDATA <= (((tmp_V_143_reg_355 & tmp_V_142_reg_350) & tmp_V_141_reg_345) & tmp_V_reg_340);
    m_axi_out_hw_V_WID <= ap_const_lv1_0;
    m_axi_out_hw_V_WLAST <= ap_const_logic_0;
    m_axi_out_hw_V_WSTRB <= ap_const_lv8_FF;
    m_axi_out_hw_V_WUSER <= ap_const_lv1_0;

    m_axi_out_hw_V_WVALID_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln68_reg_311_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_311_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_out_hw_V_WVALID <= ap_const_logic_1;
        else 
            m_axi_out_hw_V_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_0_V_V_blk_n_assign_proc : process(out_0_V_V_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln68_reg_311_pp0_iter1_reg)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_0_V_V_blk_n <= out_0_V_V_empty_n;
        else 
            out_0_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_0_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln68_reg_311_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_0_V_V_read <= ap_const_logic_1;
        else 
            out_0_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_1_V_V_blk_n_assign_proc : process(out_1_V_V_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln68_reg_311_pp0_iter1_reg)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_1_V_V_blk_n <= out_1_V_V_empty_n;
        else 
            out_1_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_1_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln68_reg_311_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_1_V_V_read <= ap_const_logic_1;
        else 
            out_1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_2_V_V_blk_n_assign_proc : process(out_2_V_V_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln68_reg_311_pp0_iter1_reg)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_2_V_V_blk_n <= out_2_V_V_empty_n;
        else 
            out_2_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_2_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln68_reg_311_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_2_V_V_read <= ap_const_logic_1;
        else 
            out_2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_3_V_V_blk_n_assign_proc : process(out_3_V_V_empty_n, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln68_reg_311_pp0_iter1_reg)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_3_V_V_blk_n <= out_3_V_V_empty_n;
        else 
            out_3_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_3_V_V_read_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln68_reg_311_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_3_V_V_read <= ap_const_logic_1;
        else 
            out_3_V_V_read <= ap_const_logic_0;
        end if; 
    end process;


    out_hw_V_blk_n_AW_assign_proc : process(m_axi_out_hw_V_AWREADY, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln68_reg_311_pp0_iter1_reg)
    begin
        if (((icmp_ln68_reg_311_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_hw_V_blk_n_AW <= m_axi_out_hw_V_AWREADY;
        else 
            out_hw_V_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    out_hw_V_blk_n_B_assign_proc : process(m_axi_out_hw_V_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter8, icmp_ln68_reg_311_pp0_iter7_reg)
    begin
        if (((icmp_ln68_reg_311_pp0_iter7_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_hw_V_blk_n_B <= m_axi_out_hw_V_BVALID;
        else 
            out_hw_V_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    out_hw_V_blk_n_W_assign_proc : process(m_axi_out_hw_V_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, icmp_ln68_reg_311_pp0_iter2_reg)
    begin
        if (((icmp_ln68_reg_311_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            out_hw_V_blk_n_W <= m_axi_out_hw_V_WREADY;
        else 
            out_hw_V_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    out_hw_V_offset_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_hw_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_hw_V_offset_blk_n <= out_hw_V_offset_empty_n;
        else 
            out_hw_V_offset_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_hw_V_offset_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, weights_reloading_in_3_empty_n, out_hw_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_hw_V_offset_read <= ap_const_logic_1;
        else 
            out_hw_V_offset_read <= ap_const_logic_0;
        end if; 
    end process;

    out_index_fu_216_p3 <= (tmp4_i_i_i_fu_211_p2 & loops_0_0_i_i_i_reg_165);
    select_ln206_fu_248_p3 <= 
        ap_const_lv10_0 when (icmp_ln891_4_fu_236_p2(0) = '1') else 
        loops_impl_i_V_fu_242_p2;
    select_ln891_fu_256_p3 <= 
        select_ln206_fu_248_p3 when (icmp_ln891_fu_230_p2(0) = '1') else 
        loops_1_0_i_i_i_reg_154;
        sext_ln332_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln332_reg_335),64));

        sext_ln87_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(out_index_reg_320),33));

    tmp4_i_i_i_fu_211_p2 <= std_logic_vector(unsigned(empty_221_fu_207_p1) + unsigned(empty_reg_301));

    weights_reloading_in_3_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, weights_reloading_in_3_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_reloading_in_3_blk_n <= weights_reloading_in_3_empty_n;
        else 
            weights_reloading_in_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    weights_reloading_in_3_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, weights_reloading_in_3_empty_n, out_hw_V_offset_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (weights_reloading_in_3_empty_n = ap_const_logic_0) or (out_hw_V_offset_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            weights_reloading_in_3_read <= ap_const_logic_1;
        else 
            weights_reloading_in_3_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln68_fu_191_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_hw_V_offset_dout),33));
end behav;
